// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jobs.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	jobs.proto

It has these top-level messages:
	GrrMessage
	Certificate
	CpuSeconds
	GrrStatus
	MessageList
	PackedMessageList
	CipherProperties
	CipherMetadata
	ClientCommunication
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// This is done because signing is done on a group of messages as they arrive
// over the POST, but after decryption and unpacking, messages are queued
// individually and therefore need to retain their authenticated status.
type GrrMessage_AuthorizationState int32

const (
	GrrMessage_UNAUTHENTICATED GrrMessage_AuthorizationState = 0
	GrrMessage_AUTHENTICATED   GrrMessage_AuthorizationState = 1
	// This indicates that clocks are out of sync and this message may be a
	// replay.
	GrrMessage_DESYNCHRONIZED GrrMessage_AuthorizationState = 2
)

var GrrMessage_AuthorizationState_name = map[int32]string{
	0: "UNAUTHENTICATED",
	1: "AUTHENTICATED",
	2: "DESYNCHRONIZED",
}
var GrrMessage_AuthorizationState_value = map[string]int32{
	"UNAUTHENTICATED": 0,
	"AUTHENTICATED":   1,
	"DESYNCHRONIZED":  2,
}

func (x GrrMessage_AuthorizationState) Enum() *GrrMessage_AuthorizationState {
	p := new(GrrMessage_AuthorizationState)
	*p = x
	return p
}
func (x GrrMessage_AuthorizationState) String() string {
	return proto1.EnumName(GrrMessage_AuthorizationState_name, int32(x))
}
func (x *GrrMessage_AuthorizationState) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(GrrMessage_AuthorizationState_value, data, "GrrMessage_AuthorizationState")
	if err != nil {
		return err
	}
	*x = GrrMessage_AuthorizationState(value)
	return nil
}
func (GrrMessage_AuthorizationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type GrrMessage_Type int32

const (
	GrrMessage_MESSAGE  GrrMessage_Type = 0
	GrrMessage_STATUS   GrrMessage_Type = 1
	GrrMessage_ITERATOR GrrMessage_Type = 2
)

var GrrMessage_Type_name = map[int32]string{
	0: "MESSAGE",
	1: "STATUS",
	2: "ITERATOR",
}
var GrrMessage_Type_value = map[string]int32{
	"MESSAGE":  0,
	"STATUS":   1,
	"ITERATOR": 2,
}

func (x GrrMessage_Type) Enum() *GrrMessage_Type {
	p := new(GrrMessage_Type)
	*p = x
	return p
}
func (x GrrMessage_Type) String() string {
	return proto1.EnumName(GrrMessage_Type_name, int32(x))
}
func (x *GrrMessage_Type) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(GrrMessage_Type_value, data, "GrrMessage_Type")
	if err != nil {
		return err
	}
	*x = GrrMessage_Type(value)
	return nil
}
func (GrrMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type GrrMessage_Priority int32

const (
	GrrMessage_LOW_PRIORITY    GrrMessage_Priority = 0
	GrrMessage_MEDIUM_PRIORITY GrrMessage_Priority = 1
	GrrMessage_HIGH_PRIORITY   GrrMessage_Priority = 2
)

var GrrMessage_Priority_name = map[int32]string{
	0: "LOW_PRIORITY",
	1: "MEDIUM_PRIORITY",
	2: "HIGH_PRIORITY",
}
var GrrMessage_Priority_value = map[string]int32{
	"LOW_PRIORITY":    0,
	"MEDIUM_PRIORITY": 1,
	"HIGH_PRIORITY":   2,
}

func (x GrrMessage_Priority) Enum() *GrrMessage_Priority {
	p := new(GrrMessage_Priority)
	*p = x
	return p
}
func (x GrrMessage_Priority) String() string {
	return proto1.EnumName(GrrMessage_Priority_name, int32(x))
}
func (x *GrrMessage_Priority) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(GrrMessage_Priority_value, data, "GrrMessage_Priority")
	if err != nil {
		return err
	}
	*x = GrrMessage_Priority(value)
	return nil
}
func (GrrMessage_Priority) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

type Certificate_Type int32

const (
	Certificate_CSR Certificate_Type = 0
	Certificate_CRT Certificate_Type = 1
	Certificate_CA  Certificate_Type = 2
)

var Certificate_Type_name = map[int32]string{
	0: "CSR",
	1: "CRT",
	2: "CA",
}
var Certificate_Type_value = map[string]int32{
	"CSR": 0,
	"CRT": 1,
	"CA":  2,
}

func (x Certificate_Type) Enum() *Certificate_Type {
	p := new(Certificate_Type)
	*p = x
	return p
}
func (x Certificate_Type) String() string {
	return proto1.EnumName(Certificate_Type_name, int32(x))
}
func (x *Certificate_Type) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(Certificate_Type_value, data, "Certificate_Type")
	if err != nil {
		return err
	}
	*x = Certificate_Type(value)
	return nil
}
func (Certificate_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type GrrStatus_ReturnedStatus int32

const (
	GrrStatus_OK                      GrrStatus_ReturnedStatus = 0
	GrrStatus_IOERROR                 GrrStatus_ReturnedStatus = 1
	GrrStatus_RETRANSMISSION_DETECTED GrrStatus_ReturnedStatus = 2
	GrrStatus_CLIENT_KILLED           GrrStatus_ReturnedStatus = 3
	GrrStatus_NETWORK_LIMIT_EXCEEDED  GrrStatus_ReturnedStatus = 4
	GrrStatus_WORKER_STUCK            GrrStatus_ReturnedStatus = 9
	GrrStatus_GENERIC_ERROR           GrrStatus_ReturnedStatus = 10
)

var GrrStatus_ReturnedStatus_name = map[int32]string{
	0:  "OK",
	1:  "IOERROR",
	2:  "RETRANSMISSION_DETECTED",
	3:  "CLIENT_KILLED",
	4:  "NETWORK_LIMIT_EXCEEDED",
	9:  "WORKER_STUCK",
	10: "GENERIC_ERROR",
}
var GrrStatus_ReturnedStatus_value = map[string]int32{
	"OK":                      0,
	"IOERROR":                 1,
	"RETRANSMISSION_DETECTED": 2,
	"CLIENT_KILLED":           3,
	"NETWORK_LIMIT_EXCEEDED":  4,
	"WORKER_STUCK":            9,
	"GENERIC_ERROR":           10,
}

func (x GrrStatus_ReturnedStatus) Enum() *GrrStatus_ReturnedStatus {
	p := new(GrrStatus_ReturnedStatus)
	*p = x
	return p
}
func (x GrrStatus_ReturnedStatus) String() string {
	return proto1.EnumName(GrrStatus_ReturnedStatus_name, int32(x))
}
func (x *GrrStatus_ReturnedStatus) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(GrrStatus_ReturnedStatus_value, data, "GrrStatus_ReturnedStatus")
	if err != nil {
		return err
	}
	*x = GrrStatus_ReturnedStatus(value)
	return nil
}
func (GrrStatus_ReturnedStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type PackedMessageList_CompressionType int32

const (
	PackedMessageList_UNCOMPRESSED PackedMessageList_CompressionType = 0
	// Compressed using the zlib.compress() function.
	PackedMessageList_ZCOMPRESSION PackedMessageList_CompressionType = 1
)

var PackedMessageList_CompressionType_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "ZCOMPRESSION",
}
var PackedMessageList_CompressionType_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"ZCOMPRESSION": 1,
}

func (x PackedMessageList_CompressionType) Enum() *PackedMessageList_CompressionType {
	p := new(PackedMessageList_CompressionType)
	*p = x
	return p
}
func (x PackedMessageList_CompressionType) String() string {
	return proto1.EnumName(PackedMessageList_CompressionType_name, int32(x))
}
func (x *PackedMessageList_CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(PackedMessageList_CompressionType_value, data, "PackedMessageList_CompressionType")
	if err != nil {
		return err
	}
	*x = PackedMessageList_CompressionType(value)
	return nil
}
func (PackedMessageList_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type CipherProperties_HMACType int32

const (
	// Older clients use a HMAC only on the encrypted message.
	CipherProperties_SIMPLE_HMAC CipherProperties_HMACType = 0
	// Newer clients also include the encrypted cipher and API version in the
	// hmac.
	CipherProperties_FULL_HMAC CipherProperties_HMACType = 1
)

var CipherProperties_HMACType_name = map[int32]string{
	0: "SIMPLE_HMAC",
	1: "FULL_HMAC",
}
var CipherProperties_HMACType_value = map[string]int32{
	"SIMPLE_HMAC": 0,
	"FULL_HMAC":   1,
}

func (x CipherProperties_HMACType) Enum() *CipherProperties_HMACType {
	p := new(CipherProperties_HMACType)
	*p = x
	return p
}
func (x CipherProperties_HMACType) String() string {
	return proto1.EnumName(CipherProperties_HMACType_name, int32(x))
}
func (x *CipherProperties_HMACType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(CipherProperties_HMACType_value, data, "CipherProperties_HMACType")
	if err != nil {
		return err
	}
	*x = CipherProperties_HMACType(value)
	return nil
}
func (CipherProperties_HMACType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// This status code applies for the entire communication.
type ClientCommunication_Status int32

const (
	ClientCommunication_OK           ClientCommunication_Status = 200
	ClientCommunication_BAD_REQUEST  ClientCommunication_Status = 400
	ClientCommunication_CIPHER_ERROR ClientCommunication_Status = 406
)

var ClientCommunication_Status_name = map[int32]string{
	200: "OK",
	400: "BAD_REQUEST",
	406: "CIPHER_ERROR",
}
var ClientCommunication_Status_value = map[string]int32{
	"OK":           200,
	"BAD_REQUEST":  400,
	"CIPHER_ERROR": 406,
}

func (x ClientCommunication_Status) Enum() *ClientCommunication_Status {
	p := new(ClientCommunication_Status)
	*p = x
	return p
}
func (x ClientCommunication_Status) String() string {
	return proto1.EnumName(ClientCommunication_Status_name, int32(x))
}
func (x *ClientCommunication_Status) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(ClientCommunication_Status_value, data, "ClientCommunication_Status")
	if err != nil {
		return err
	}
	*x = ClientCommunication_Status(value)
	return nil
}
func (ClientCommunication_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

// This message is sent between the client and the server.
// Next field: 23
type GrrMessage struct {
	SessionId  *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	RequestId  *uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ResponseId *uint64 `protobuf:"varint,3,opt,name=response_id,json=responseId" json:"response_id,omitempty"`
	Name       *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// This field contains an encoded rdfvalue.
	Args      []byte                         `protobuf:"bytes,5,opt,name=args" json:"args,omitempty"`
	Source    *string                        `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	AuthState *GrrMessage_AuthorizationState `protobuf:"varint,7,opt,name=auth_state,json=authState,enum=proto.GrrMessage_AuthorizationState,def=0" json:"auth_state,omitempty"`
	// The final response to a request carries this type which indicates it is a
	// status message.
	Type            *GrrMessage_Type     `protobuf:"varint,8,opt,name=type,enum=proto.GrrMessage_Type,def=0" json:"type,omitempty"`
	Priority        *GrrMessage_Priority `protobuf:"varint,9,opt,name=priority,enum=proto.GrrMessage_Priority,def=1" json:"priority,omitempty"`
	Ttl             *uint32              `protobuf:"varint,10,opt,name=ttl,def=10" json:"ttl,omitempty"`
	RequireFastpoll *bool                `protobuf:"varint,11,opt,name=require_fastpoll,json=requireFastpoll,def=1" json:"require_fastpoll,omitempty"`
	CpuLimit        *float32             `protobuf:"fixed32,12,opt,name=cpu_limit,json=cpuLimit,def=3600" json:"cpu_limit,omitempty"`
	ArgsAge         *uint64              `protobuf:"varint,13,opt,name=args_age,json=argsAge" json:"args_age,omitempty"`
	// The rdfvalue class of the args.
	ArgsRdfName *string `protobuf:"bytes,14,opt,name=args_rdf_name,json=argsRdfName" json:"args_rdf_name,omitempty"`
	// The id of this message in the scheduler.
	TaskId *uint64 `protobuf:"varint,15,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// The ttl used in the task scheduler.
	TaskTtl *int32  `protobuf:"varint,16,opt,name=task_ttl,json=taskTtl,def=7" json:"task_ttl,omitempty"`
	Queue   *string `protobuf:"bytes,17,opt,name=queue" json:"queue,omitempty"`
	Eta     *uint64 `protobuf:"varint,18,opt,name=eta" json:"eta,omitempty"`
	// Human readable info about the last process leasing this message.
	LastLease         *string `protobuf:"bytes,19,opt,name=last_lease,json=lastLease" json:"last_lease,omitempty"`
	NetworkBytesLimit *uint64 `protobuf:"varint,21,opt,name=network_bytes_limit,json=networkBytesLimit,def=10737418240" json:"network_bytes_limit,omitempty"`
	Timestamp         *uint64 `protobuf:"varint,22,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *GrrMessage) Reset()                    { *m = GrrMessage{} }
func (m *GrrMessage) String() string            { return proto1.CompactTextString(m) }
func (*GrrMessage) ProtoMessage()               {}
func (*GrrMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_GrrMessage_AuthState GrrMessage_AuthorizationState = GrrMessage_UNAUTHENTICATED
const Default_GrrMessage_Type GrrMessage_Type = GrrMessage_MESSAGE
const Default_GrrMessage_Priority GrrMessage_Priority = GrrMessage_MEDIUM_PRIORITY
const Default_GrrMessage_Ttl uint32 = 10
const Default_GrrMessage_RequireFastpoll bool = true
const Default_GrrMessage_CpuLimit float32 = 3600
const Default_GrrMessage_TaskTtl int32 = 7
const Default_GrrMessage_NetworkBytesLimit uint64 = 10737418240

func (m *GrrMessage) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *GrrMessage) GetRequestId() uint64 {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return 0
}

func (m *GrrMessage) GetResponseId() uint64 {
	if m != nil && m.ResponseId != nil {
		return *m.ResponseId
	}
	return 0
}

func (m *GrrMessage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GrrMessage) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *GrrMessage) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *GrrMessage) GetAuthState() GrrMessage_AuthorizationState {
	if m != nil && m.AuthState != nil {
		return *m.AuthState
	}
	return Default_GrrMessage_AuthState
}

func (m *GrrMessage) GetType() GrrMessage_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_GrrMessage_Type
}

func (m *GrrMessage) GetPriority() GrrMessage_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_GrrMessage_Priority
}

func (m *GrrMessage) GetTtl() uint32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return Default_GrrMessage_Ttl
}

func (m *GrrMessage) GetRequireFastpoll() bool {
	if m != nil && m.RequireFastpoll != nil {
		return *m.RequireFastpoll
	}
	return Default_GrrMessage_RequireFastpoll
}

func (m *GrrMessage) GetCpuLimit() float32 {
	if m != nil && m.CpuLimit != nil {
		return *m.CpuLimit
	}
	return Default_GrrMessage_CpuLimit
}

func (m *GrrMessage) GetArgsAge() uint64 {
	if m != nil && m.ArgsAge != nil {
		return *m.ArgsAge
	}
	return 0
}

func (m *GrrMessage) GetArgsRdfName() string {
	if m != nil && m.ArgsRdfName != nil {
		return *m.ArgsRdfName
	}
	return ""
}

func (m *GrrMessage) GetTaskId() uint64 {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return 0
}

func (m *GrrMessage) GetTaskTtl() int32 {
	if m != nil && m.TaskTtl != nil {
		return *m.TaskTtl
	}
	return Default_GrrMessage_TaskTtl
}

func (m *GrrMessage) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return ""
}

func (m *GrrMessage) GetEta() uint64 {
	if m != nil && m.Eta != nil {
		return *m.Eta
	}
	return 0
}

func (m *GrrMessage) GetLastLease() string {
	if m != nil && m.LastLease != nil {
		return *m.LastLease
	}
	return ""
}

func (m *GrrMessage) GetNetworkBytesLimit() uint64 {
	if m != nil && m.NetworkBytesLimit != nil {
		return *m.NetworkBytesLimit
	}
	return Default_GrrMessage_NetworkBytesLimit
}

func (m *GrrMessage) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

// Certificates are exchanged with this.
type Certificate struct {
	Type             *Certificate_Type `protobuf:"varint,1,opt,name=type,enum=proto.Certificate_Type" json:"type,omitempty"`
	Pem              []byte            `protobuf:"bytes,2,opt,name=pem" json:"pem,omitempty"`
	Cn               *string           `protobuf:"bytes,3,opt,name=cn" json:"cn,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto1.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Certificate) GetType() Certificate_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Certificate_CSR
}

func (m *Certificate) GetPem() []byte {
	if m != nil {
		return m.Pem
	}
	return nil
}

func (m *Certificate) GetCn() string {
	if m != nil && m.Cn != nil {
		return *m.Cn
	}
	return ""
}

type CpuSeconds struct {
	UserCpuTime      *float32 `protobuf:"fixed32,1,opt,name=user_cpu_time,json=userCpuTime" json:"user_cpu_time,omitempty"`
	SystemCpuTime    *float32 `protobuf:"fixed32,2,opt,name=system_cpu_time,json=systemCpuTime" json:"system_cpu_time,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CpuSeconds) Reset()                    { *m = CpuSeconds{} }
func (m *CpuSeconds) String() string            { return proto1.CompactTextString(m) }
func (*CpuSeconds) ProtoMessage()               {}
func (*CpuSeconds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CpuSeconds) GetUserCpuTime() float32 {
	if m != nil && m.UserCpuTime != nil {
		return *m.UserCpuTime
	}
	return 0
}

func (m *CpuSeconds) GetSystemCpuTime() float32 {
	if m != nil && m.SystemCpuTime != nil {
		return *m.SystemCpuTime
	}
	return 0
}

// This is a status response that is sent for each complete
// transaction. It is always the last message in the transaction.
type GrrStatus struct {
	Status           *GrrStatus_ReturnedStatus `protobuf:"varint,1,opt,name=status,enum=proto.GrrStatus_ReturnedStatus,def=0" json:"status,omitempty"`
	ErrorMessage     *string                   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,def=" json:"error_message,omitempty"`
	Backtrace        *string                   `protobuf:"bytes,3,opt,name=backtrace,def=" json:"backtrace,omitempty"`
	CpuTimeUsed      *CpuSeconds               `protobuf:"bytes,4,opt,name=cpu_time_used,json=cpuTimeUsed" json:"cpu_time_used,omitempty"`
	ChildSessionId   *string                   `protobuf:"bytes,5,opt,name=child_session_id,json=childSessionId" json:"child_session_id,omitempty"`
	NetworkBytesSent *uint64                   `protobuf:"varint,6,opt,name=network_bytes_sent,json=networkBytesSent" json:"network_bytes_sent,omitempty"`
	NannyStatus      *string                   `protobuf:"bytes,7,opt,name=nanny_status,json=nannyStatus" json:"nanny_status,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *GrrStatus) Reset()                    { *m = GrrStatus{} }
func (m *GrrStatus) String() string            { return proto1.CompactTextString(m) }
func (*GrrStatus) ProtoMessage()               {}
func (*GrrStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

const Default_GrrStatus_Status GrrStatus_ReturnedStatus = GrrStatus_OK

func (m *GrrStatus) GetStatus() GrrStatus_ReturnedStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_GrrStatus_Status
}

func (m *GrrStatus) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *GrrStatus) GetBacktrace() string {
	if m != nil && m.Backtrace != nil {
		return *m.Backtrace
	}
	return ""
}

func (m *GrrStatus) GetCpuTimeUsed() *CpuSeconds {
	if m != nil {
		return m.CpuTimeUsed
	}
	return nil
}

func (m *GrrStatus) GetChildSessionId() string {
	if m != nil && m.ChildSessionId != nil {
		return *m.ChildSessionId
	}
	return ""
}

func (m *GrrStatus) GetNetworkBytesSent() uint64 {
	if m != nil && m.NetworkBytesSent != nil {
		return *m.NetworkBytesSent
	}
	return 0
}

func (m *GrrStatus) GetNannyStatus() string {
	if m != nil && m.NannyStatus != nil {
		return *m.NannyStatus
	}
	return ""
}

// This is a list of messages
type MessageList struct {
	Job              []*GrrMessage `protobuf:"bytes,1,rep,name=job" json:"job,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MessageList) Reset()                    { *m = MessageList{} }
func (m *MessageList) String() string            { return proto1.CompactTextString(m) }
func (*MessageList) ProtoMessage()               {}
func (*MessageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MessageList) GetJob() []*GrrMessage {
	if m != nil {
		return m.Job
	}
	return nil
}

// This is the protobuf which is transmitted on the wire
type PackedMessageList struct {
	// This is a serialized MessageList for signing
	MessageList []byte  `protobuf:"bytes,1,opt,name=message_list,json=messageList" json:"message_list,omitempty"`
	Source      *string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// How the message_list element is compressed
	Compression      *PackedMessageList_CompressionType `protobuf:"varint,4,opt,name=compression,enum=proto.PackedMessageList_CompressionType,def=0" json:"compression,omitempty"`
	Timestamp        *uint64                            `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *PackedMessageList) Reset()                    { *m = PackedMessageList{} }
func (m *PackedMessageList) String() string            { return proto1.CompactTextString(m) }
func (*PackedMessageList) ProtoMessage()               {}
func (*PackedMessageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

const Default_PackedMessageList_Compression PackedMessageList_CompressionType = PackedMessageList_UNCOMPRESSED

func (m *PackedMessageList) GetMessageList() []byte {
	if m != nil {
		return m.MessageList
	}
	return nil
}

func (m *PackedMessageList) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *PackedMessageList) GetCompression() PackedMessageList_CompressionType {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return Default_PackedMessageList_Compression
}

func (m *PackedMessageList) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CipherProperties struct {
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key  []byte  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// This IV is used to encrypt the cipher metadata block. Note: Both the
	// CipherProperties() and the CipherMetadata() protobufs do not change for all
	// messages in this session.
	MetadataIv []byte `protobuf:"bytes,3,opt,name=metadata_iv,json=metadataIv" json:"metadata_iv,omitempty"`
	// The key used for the hmac.
	HmacKey []byte `protobuf:"bytes,5,opt,name=hmac_key,json=hmacKey" json:"hmac_key,omitempty"`
	// The API version of the cipher.
	HmacType         *CipherProperties_HMACType `protobuf:"varint,6,opt,name=hmac_type,json=hmacType,enum=proto.CipherProperties_HMACType,def=0" json:"hmac_type,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CipherProperties) Reset()                    { *m = CipherProperties{} }
func (m *CipherProperties) String() string            { return proto1.CompactTextString(m) }
func (*CipherProperties) ProtoMessage()               {}
func (*CipherProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

const Default_CipherProperties_HmacType CipherProperties_HMACType = CipherProperties_SIMPLE_HMAC

func (m *CipherProperties) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CipherProperties) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CipherProperties) GetMetadataIv() []byte {
	if m != nil {
		return m.MetadataIv
	}
	return nil
}

func (m *CipherProperties) GetHmacKey() []byte {
	if m != nil {
		return m.HmacKey
	}
	return nil
}

func (m *CipherProperties) GetHmacType() CipherProperties_HMACType {
	if m != nil && m.HmacType != nil {
		return *m.HmacType
	}
	return Default_CipherProperties_HmacType
}

type CipherMetadata struct {
	Source *string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// The signature of the encrypted cipher block.
	Signature        []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CipherMetadata) Reset()                    { *m = CipherMetadata{} }
func (m *CipherMetadata) String() string            { return proto1.CompactTextString(m) }
func (*CipherMetadata) ProtoMessage()               {}
func (*CipherMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CipherMetadata) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *CipherMetadata) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Next field: 11
type ClientCommunication struct {
	// This message is a serialized SignedMessageList() protobuf, encrypted using
	// the session key (Encrypted inside field 2) and the per-packet IV (field 8).
	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted" json:"encrypted,omitempty"`
	// This is a CipherProperties() protobuf encrypted with the public key of the
	// receiver. Contains the session key and iv, as well as hmac key. This IV
	// does not change for the duration of the session. It is used to decrypt the
	// CipherMetadata() (field 9).
	EncryptedCipher []byte `protobuf:"bytes,2,opt,name=encrypted_cipher,json=encryptedCipher" json:"encrypted_cipher,omitempty"`
	// A serialized CipherMetadata() protobuf, encrypted with the session
	// key. Contains the RSA signature of the digest of the serialized
	// CipherProperties() above, signed with the sender's private key.
	EncryptedCipherMetadata []byte `protobuf:"bytes,9,opt,name=encrypted_cipher_metadata,json=encryptedCipherMetadata" json:"encrypted_cipher_metadata,omitempty"`
	// This iv is used to encrypt the encrypted field (No. 1). This IV changes for
	// each packet.
	PacketIv []byte `protobuf:"bytes,8,opt,name=packet_iv,json=packetIv" json:"packet_iv,omitempty"`
	// The number of messages waiting on the input queue. The client
	// fills this in so the server can limit the number of messages
	// issued to the client as a means of throttling it.
	QueueSize  *uint32                     `protobuf:"varint,4,opt,name=queue_size,json=queueSize,def=0" json:"queue_size,omitempty"`
	Status     *ClientCommunication_Status `protobuf:"varint,5,opt,name=status,enum=proto.ClientCommunication_Status,def=200" json:"status,omitempty"`
	ApiVersion *uint32                     `protobuf:"varint,6,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	// This is the SIMPLE_HMAC. It covers the "encrypted" field only.
	Hmac []byte `protobuf:"bytes,7,opt,name=hmac" json:"hmac,omitempty"`
	// This is the FULL_HMAC. It coverts:
	// 1) the "encrypted" field,
	// 2) The "encrypted_cipher" field.
	// 3) The encrypted_cipher_metadata field
	// 4) The packet iv
	// 5) the api_version.
	FullHmac         []byte `protobuf:"bytes,10,opt,name=full_hmac,json=fullHmac" json:"full_hmac,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClientCommunication) Reset()                    { *m = ClientCommunication{} }
func (m *ClientCommunication) String() string            { return proto1.CompactTextString(m) }
func (*ClientCommunication) ProtoMessage()               {}
func (*ClientCommunication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

const Default_ClientCommunication_QueueSize uint32 = 0
const Default_ClientCommunication_Status ClientCommunication_Status = ClientCommunication_OK

func (m *ClientCommunication) GetEncrypted() []byte {
	if m != nil {
		return m.Encrypted
	}
	return nil
}

func (m *ClientCommunication) GetEncryptedCipher() []byte {
	if m != nil {
		return m.EncryptedCipher
	}
	return nil
}

func (m *ClientCommunication) GetEncryptedCipherMetadata() []byte {
	if m != nil {
		return m.EncryptedCipherMetadata
	}
	return nil
}

func (m *ClientCommunication) GetPacketIv() []byte {
	if m != nil {
		return m.PacketIv
	}
	return nil
}

func (m *ClientCommunication) GetQueueSize() uint32 {
	if m != nil && m.QueueSize != nil {
		return *m.QueueSize
	}
	return Default_ClientCommunication_QueueSize
}

func (m *ClientCommunication) GetStatus() ClientCommunication_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_ClientCommunication_Status
}

func (m *ClientCommunication) GetApiVersion() uint32 {
	if m != nil && m.ApiVersion != nil {
		return *m.ApiVersion
	}
	return 0
}

func (m *ClientCommunication) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *ClientCommunication) GetFullHmac() []byte {
	if m != nil {
		return m.FullHmac
	}
	return nil
}

func init() {
	proto1.RegisterType((*GrrMessage)(nil), "proto.GrrMessage")
	proto1.RegisterType((*Certificate)(nil), "proto.Certificate")
	proto1.RegisterType((*CpuSeconds)(nil), "proto.CpuSeconds")
	proto1.RegisterType((*GrrStatus)(nil), "proto.GrrStatus")
	proto1.RegisterType((*MessageList)(nil), "proto.MessageList")
	proto1.RegisterType((*PackedMessageList)(nil), "proto.PackedMessageList")
	proto1.RegisterType((*CipherProperties)(nil), "proto.CipherProperties")
	proto1.RegisterType((*CipherMetadata)(nil), "proto.CipherMetadata")
	proto1.RegisterType((*ClientCommunication)(nil), "proto.ClientCommunication")
	proto1.RegisterEnum("proto.GrrMessage_AuthorizationState", GrrMessage_AuthorizationState_name, GrrMessage_AuthorizationState_value)
	proto1.RegisterEnum("proto.GrrMessage_Type", GrrMessage_Type_name, GrrMessage_Type_value)
	proto1.RegisterEnum("proto.GrrMessage_Priority", GrrMessage_Priority_name, GrrMessage_Priority_value)
	proto1.RegisterEnum("proto.Certificate_Type", Certificate_Type_name, Certificate_Type_value)
	proto1.RegisterEnum("proto.GrrStatus_ReturnedStatus", GrrStatus_ReturnedStatus_name, GrrStatus_ReturnedStatus_value)
	proto1.RegisterEnum("proto.PackedMessageList_CompressionType", PackedMessageList_CompressionType_name, PackedMessageList_CompressionType_value)
	proto1.RegisterEnum("proto.CipherProperties_HMACType", CipherProperties_HMACType_name, CipherProperties_HMACType_value)
	proto1.RegisterEnum("proto.ClientCommunication_Status", ClientCommunication_Status_name, ClientCommunication_Status_value)
}

func init() { proto1.RegisterFile("jobs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0x5b, 0x93, 0xe3, 0x46,
	0xf5, 0x1f, 0x79, 0xae, 0x6e, 0xcf, 0x45, 0xdb, 0x5b, 0x9b, 0x75, 0x6e, 0xff, 0x74, 0xfc, 0x87,
	0x8a, 0x03, 0x1b, 0xef, 0xec, 0x6c, 0xb2, 0xbb, 0x18, 0x52, 0xe0, 0x8b, 0x76, 0x46, 0xcc, 0xd8,
	0x1e, 0xda, 0x72, 0x6e, 0x05, 0x88, 0xb6, 0xd4, 0xb6, 0x95, 0x91, 0x25, 0xa7, 0xbb, 0x35, 0x5e,
	0xe7, 0x81, 0x82, 0x2a, 0xaa, 0x78, 0x81, 0x82, 0xa7, 0xc0, 0xb7, 0xa0, 0x78, 0xe4, 0x9d, 0x07,
	0x3e, 0x00, 0x9f, 0x00, 0xbe, 0x06, 0x0f, 0x54, 0x1f, 0x49, 0xb6, 0x67, 0x27, 0xe4, 0xc9, 0xd6,
	0xe9, 0xd3, 0xbf, 0x73, 0xfa, 0x5c, 0x7e, 0x7d, 0x1a, 0xa1, 0xcf, 0xe3, 0xa1, 0xac, 0xcd, 0x44,
	0xac, 0x62, 0xbc, 0x0d, 0x3f, 0xaf, 0xd5, 0xe7, 0xf3, 0x79, 0xed, 0x9a, 0x87, 0xb1, 0x17, 0xf8,
	0xfc, 0x45, 0xcd, 0x8b, 0xa7, 0x0f, 0xc7, 0x71, 0xc8, 0xa2, 0xf1, 0xc3, 0x54, 0x28, 0xd8, 0x4c,
	0xc5, 0xe2, 0x21, 0x28, 0x3f, 0x94, 0x7c, 0xca, 0x22, 0x15, 0x78, 0x29, 0x44, 0xe5, 0xd7, 0x18,
	0xa1, 0x53, 0x21, 0x3a, 0x5c, 0x4a, 0x36, 0xe6, 0x38, 0x42, 0x48, 0x72, 0x29, 0x83, 0x38, 0x72,
	0x03, 0xbf, 0x6c, 0x10, 0xa3, 0x5a, 0x6c, 0xf6, 0xfe, 0xf5, 0x9f, 0x7f, 0xff, 0xdd, 0xb0, 0xd1,
	0xc1, 0xf3, 0x30, 0x9e, 0xf7, 0xd3, 0x55, 0xbb, 0x8d, 0x9f, 0x39, 0x13, 0x4e, 0x32, 0x65, 0x12,
	0xf8, 0x24, 0x1e, 0x11, 0x35, 0xe1, 0x64, 0x14, 0xc6, 0x73, 0xa2, 0x26, 0x4c, 0x11, 0x35, 0x09,
	0x24, 0x99, 0xa6, 0xc0, 0x64, 0xc8, 0xc3, 0x38, 0x1a, 0x4b, 0xa2, 0xe2, 0x1a, 0x2d, 0x66, 0xbb,
	0x6c, 0x1f, 0x27, 0x08, 0x09, 0xfe, 0x45, 0xc2, 0xa5, 0xd2, 0xf6, 0x0a, 0xc4, 0xa8, 0x6e, 0x35,
	0x3f, 0x02, 0x7b, 0x97, 0xb8, 0xab, 0x0d, 0xe4, 0xfb, 0x03, 0x49, 0x82, 0x88, 0x08, 0x2e, 0x67,
	0x71, 0x24, 0x39, 0x51, 0x71, 0x0a, 0x9f, 0x6d, 0x26, 0x51, 0x32, 0x1d, 0x72, 0x41, 0xaa, 0xd9,
	0xb7, 0x56, 0xf6, 0x04, 0x9f, 0xf2, 0x48, 0x91, 0x91, 0x88, 0xa7, 0xe4, 0xd1, 0xbb, 0x35, 0x5a,
	0xcc, 0x16, 0x6d, 0x1f, 0xff, 0x0c, 0x95, 0x72, 0x28, 0x6d, 0x77, 0x13, 0xec, 0xfe, 0x00, 0xec,
	0x3e, 0xc1, 0xef, 0xd3, 0x6c, 0x49, 0x92, 0x51, 0x2c, 0x08, 0x67, 0xde, 0x64, 0x69, 0x87, 0x09,
	0x4e, 0x58, 0x28, 0xe3, 0xcc, 0x20, 0xf7, 0x33, 0xf8, 0x1a, 0x45, 0x39, 0xa0, 0xed, 0xe3, 0xdf,
	0x1b, 0x68, 0x2b, 0x62, 0x53, 0x5e, 0xde, 0x82, 0x00, 0x2e, 0x00, 0x58, 0xe2, 0x2f, 0x1c, 0xed,
	0x72, 0x20, 0x21, 0x4e, 0x7a, 0x3d, 0x8f, 0x99, 0x17, 0x06, 0xda, 0x53, 0xe6, 0x29, 0x1d, 0x4b,
	0x08, 0xde, 0x3c, 0x08, 0x43, 0x32, 0xe4, 0x84, 0xbf, 0xe0, 0x5e, 0xa2, 0xb8, 0x5f, 0x23, 0xb6,
	0xd2, 0x5b, 0x25, 0x57, 0x64, 0xb8, 0x58, 0x45, 0x9a, 0x45, 0xbe, 0x16, 0xe7, 0x6a, 0xf9, 0x5a,
	0x8a, 0x58, 0xa3, 0xe0, 0x06, 0xc6, 0x68, 0x8b, 0x89, 0xb1, 0x2c, 0x6f, 0x13, 0xa3, 0xba, 0x4f,
	0xe1, 0x3f, 0x0e, 0xd1, 0x8e, 0x8c, 0x13, 0xe1, 0xf1, 0xf2, 0x0e, 0x38, 0xe9, 0x80, 0x93, 0x5d,
	0xb4, 0x43, 0xdb, 0xcf, 0x07, 0xb4, 0x8b, 0xdb, 0xad, 0xd4, 0x29, 0xf0, 0x73, 0x3e, 0xe1, 0x82,
	0x03, 0x70, 0x9e, 0x0f, 0x4f, 0x8b, 0xe1, 0xec, 0xd5, 0xe7, 0x41, 0x18, 0x72, 0x5f, 0xa7, 0x27,
	0x77, 0x4c, 0xc4, 0x91, 0xe2, 0x91, 0xff, 0x6e, 0x8d, 0x66, 0x36, 0xb0, 0x83, 0x10, 0x4b, 0xd4,
	0xc4, 0x95, 0x8a, 0x29, 0x5e, 0xde, 0x25, 0x46, 0xf5, 0xf0, 0xe4, 0x5b, 0x69, 0x09, 0xd6, 0x56,
	0xe5, 0x57, 0x6b, 0x24, 0x6a, 0x12, 0x8b, 0xe0, 0x4b, 0xa6, 0x03, 0xd1, 0xd7, 0xba, 0xf5, 0xa3,
	0x41, 0xb7, 0x31, 0x70, 0xce, 0xac, 0xae, 0x63, 0xb7, 0x1a, 0x8e, 0xd5, 0xa6, 0x45, 0x0d, 0x04,
	0x6b, 0xf8, 0x31, 0xda, 0x52, 0x8b, 0x19, 0x2f, 0xef, 0x01, 0xde, 0x2b, 0xb7, 0xf1, 0x9c, 0xc5,
	0x8c, 0xd7, 0x77, 0x3b, 0x56, 0xbf, 0xdf, 0x38, 0xb5, 0x28, 0x28, 0xe3, 0xbf, 0x18, 0x68, 0x6f,
	0x26, 0x82, 0x58, 0x04, 0x6a, 0x51, 0x2e, 0xc2, 0xce, 0xd7, 0x6e, 0xef, 0xbc, 0xcc, 0x34, 0xea,
	0x47, 0x1d, 0xab, 0x6d, 0x0f, 0x3a, 0xee, 0x25, 0xb5, 0x7b, 0xd4, 0x76, 0x3e, 0x6d, 0x8e, 0x20,
	0x50, 0xbf, 0xc0, 0x3f, 0xd7, 0xe5, 0x99, 0x03, 0xa5, 0x99, 0x5c, 0xab, 0xf7, 0xf7, 0x08, 0x0b,
	0xc3, 0x78, 0x2e, 0xc9, 0x24, 0x18, 0x4f, 0xb8, 0x58, 0x29, 0x66, 0x0a, 0xba, 0x13, 0x48, 0xc8,
	0xd9, 0x2c, 0x2d, 0xe5, 0x2c, 0x68, 0x1a, 0xe6, 0x8b, 0x84, 0x27, 0x5c, 0xd6, 0xe8, 0xd2, 0x49,
	0x2c, 0xd0, 0xa6, 0x52, 0x61, 0x19, 0x11, 0xa3, 0x7a, 0x50, 0x2f, 0x3c, 0x3a, 0x6e, 0xfe, 0x14,
	0x5c, 0xf8, 0x08, 0x3b, 0x4e, 0x30, 0x85, 0x5e, 0x08, 0x83, 0x6b, 0x6d, 0x12, 0x4a, 0x55, 0x69,
	0x19, 0x5b, 0x56, 0x2c, 0x34, 0x89, 0x12, 0x2c, 0x92, 0xd3, 0x40, 0xe9, 0x0a, 0x01, 0x37, 0x7d,
	0x9e, 0xb7, 0x47, 0x12, 0xa9, 0x20, 0x24, 0x81, 0x22, 0xfc, 0xc5, 0x2c, 0x10, 0xda, 0xb0, 0x36,
	0x86, 0x7f, 0x65, 0x20, 0x53, 0x43, 0x04, 0x82, 0xbb, 0x23, 0x26, 0xd5, 0x2c, 0x0e, 0xc3, 0x72,
	0x89, 0x18, 0xd5, 0xbd, 0xfa, 0x96, 0x12, 0x09, 0xcf, 0x59, 0x01, 0x9f, 0xda, 0xd9, 0xc9, 0x75,
	0x5d, 0x8b, 0x84, 0x3f, 0x58, 0xaf, 0x68, 0xa8, 0x62, 0x1e, 0x29, 0x2e, 0x88, 0x06, 0x21, 0x1a,
	0x85, 0x4c, 0x63, 0x9f, 0x13, 0x36, 0x52, 0x10, 0x95, 0xd8, 0xd3, 0x5c, 0x10, 0x8d, 0x6b, 0xf4,
	0x28, 0x33, 0xf7, 0x3c, 0xb3, 0x86, 0x3d, 0x54, 0xf4, 0x66, 0x89, 0x1b, 0x06, 0xd3, 0x40, 0x95,
	0xf7, 0x89, 0x51, 0x2d, 0xd4, 0xb7, 0x1e, 0x3f, 0x39, 0x3e, 0x6e, 0xfe, 0x08, 0x4c, 0xd7, 0xf1,
	0xb3, 0x0e, 0x7b, 0x11, 0x4c, 0x93, 0x69, 0xde, 0xfd, 0xf1, 0x88, 0xb4, 0x2e, 0x07, 0x44, 0x72,
	0x2f, 0x8e, 0x7c, 0x08, 0xf0, 0x90, 0x93, 0x44, 0xe6, 0x5d, 0x11, 0xc8, 0xac, 0xc3, 0x6a, 0x74,
	0xcf, 0x9b, 0x25, 0x17, 0x1a, 0x17, 0x77, 0xd0, 0x9e, 0x6e, 0x07, 0x97, 0x8d, 0x79, 0xf9, 0x00,
	0x68, 0xe0, 0x04, 0xd0, 0x1f, 0xa0, 0x12, 0x6d, 0x3f, 0x6f, 0x33, 0xc5, 0x75, 0x3c, 0xf1, 0x9b,
	0x3a, 0xd9, 0x3a, 0xaf, 0x59, 0xc7, 0xea, 0x3d, 0x44, 0xf8, 0xa3, 0x6b, 0x16, 0x26, 0xbc, 0x46,
	0x77, 0xf5, 0x77, 0x63, 0xcc, 0x71, 0x05, 0x1d, 0x00, 0x9c, 0xf0, 0x47, 0x2e, 0x30, 0xc0, 0xa1,
	0x6e, 0x2e, 0x5a, 0xd2, 0x42, 0xea, 0x8f, 0xba, 0xba, 0x1b, 0xef, 0xa3, 0x5d, 0xc5, 0xe4, 0x95,
	0x26, 0x9e, 0x23, 0x6d, 0x91, 0xee, 0xe8, 0x4f, 0xdb, 0xc7, 0x6f, 0xa0, 0x3d, 0x58, 0xd0, 0xc9,
	0x36, 0x89, 0x51, 0xdd, 0xae, 0x1b, 0x4f, 0x29, 0xe8, 0x3a, 0x2a, 0xc4, 0x1d, 0xb4, 0x0d, 0xa5,
	0x51, 0xbe, 0x03, 0xfd, 0xfa, 0x14, 0xdc, 0x7c, 0xb4, 0xec, 0xd7, 0x77, 0x80, 0x8e, 0xbd, 0x09,
	0xf7, 0x93, 0x90, 0x8b, 0xb4, 0x8a, 0x6e, 0x96, 0x24, 0x50, 0x68, 0x8d, 0xa6, 0x28, 0xd8, 0x47,
	0x9b, 0x5c, 0xb1, 0x32, 0x86, 0x33, 0x53, 0x00, 0xbb, 0xb8, 0x79, 0xe6, 0x0f, 0x35, 0x22, 0x54,
	0xd3, 0x7c, 0xc2, 0xa3, 0x9b, 0x58, 0x19, 0x3d, 0x79, 0xb1, 0xae, 0xb5, 0x6b, 0x16, 0x84, 0x6c,
	0x18, 0x72, 0xa0, 0xcb, 0x90, 0xb3, 0x34, 0x9f, 0x1a, 0x1e, 0xbf, 0x89, 0x50, 0xc8, 0xa4, 0x72,
	0xb5, 0x94, 0x97, 0xef, 0x42, 0x30, 0x8a, 0x5a, 0x72, 0xa1, 0x05, 0xf8, 0x9f, 0x05, 0x74, 0x37,
	0xe2, 0x6a, 0x1e, 0x8b, 0x2b, 0x77, 0xb8, 0x50, 0x5c, 0x66, 0xd9, 0xbe, 0xa7, 0xbd, 0xaa, 0x97,
	0x1e, 0x1d, 0x3f, 0x7d, 0xfc, 0xf4, 0xfd, 0x47, 0xcf, 0x4e, 0xde, 0x3f, 0x6e, 0x7e, 0x55, 0x00,
	0x1f, 0xff, 0x50, 0xc0, 0xbf, 0x2b, 0xdc, 0xce, 0x7b, 0x06, 0x42, 0x00, 0x24, 0xcb, 0xbc, 0xe4,
	0x91, 0x7a, 0x40, 0x1e, 0x1d, 0x9f, 0x12, 0x9f, 0x8f, 0x58, 0x12, 0xaa, 0x1a, 0x69, 0x68, 0xaf,
	0x41, 0xc5, 0x9b, 0x30, 0x31, 0xe6, 0x3e, 0x61, 0x63, 0x16, 0x44, 0x52, 0xad, 0x08, 0x35, 0xbf,
	0xd1, 0xec, 0x36, 0xf1, 0xe2, 0x24, 0x52, 0x44, 0xc5, 0x73, 0x26, 0xfc, 0x94, 0xb4, 0xc1, 0x3b,
	0x32, 0x4c, 0x14, 0x89, 0xa3, 0x70, 0x41, 0xfc, 0x44, 0x04, 0xd1, 0x98, 0x38, 0xba, 0xbb, 0x46,
	0x5c, 0x34, 0x93, 0xd1, 0x88, 0x8b, 0x9c, 0xe0, 0x53, 0x5d, 0x1e, 0x8d, 0x62, 0xe1, 0x69, 0xfe,
	0x76, 0xd2, 0xf8, 0xb1, 0x48, 0x92, 0xb9, 0xe6, 0xcf, 0x88, 0x0c, 0xc3, 0xd8, 0xbb, 0x1a, 0x05,
	0x21, 0x27, 0x2a, 0x43, 0x90, 0x80, 0x2d, 0x95, 0x8e, 0xae, 0x17, 0x4f, 0xa7, 0x49, 0x14, 0x78,
	0x4c, 0xe5, 0xdd, 0xb2, 0x42, 0x85, 0xa6, 0x66, 0x3a, 0xd9, 0x35, 0x7a, 0x27, 0x3b, 0x7b, 0x53,
	0x9f, 0x2b, 0x2d, 0xea, 0x11, 0x2a, 0xea, 0xbc, 0x49, 0xc5, 0xa6, 0xb3, 0xf2, 0x2b, 0x90, 0xe1,
	0x33, 0x88, 0x5e, 0xf3, 0x66, 0x86, 0x1f, 0x37, 0x22, 0x12, 0xcf, 0x74, 0x4b, 0xb0, 0x90, 0x2c,
	0x77, 0x7c, 0x5d, 0xba, 0x99, 0x24, 0x52, 0xc5, 0x42, 0xdb, 0x5b, 0x41, 0x57, 0x2e, 0x11, 0xbe,
	0xcd, 0xd8, 0xf8, 0x2e, 0x7a, 0x99, 0xb3, 0xcd, 0x0d, 0x7c, 0x07, 0x1d, 0xdc, 0x14, 0x19, 0x18,
	0xa3, 0xc3, 0xb6, 0xd5, 0xff, 0xb4, 0xdb, 0x3a, 0xa3, 0xbd, 0xae, 0xfd, 0x99, 0xd5, 0x36, 0x0b,
	0x95, 0xf7, 0xd0, 0x96, 0xe6, 0x6c, 0x5c, 0x42, 0x39, 0x6b, 0x9b, 0x1b, 0x18, 0xa1, 0x9d, 0xbe,
	0xd3, 0x70, 0x06, 0x7d, 0xd3, 0xc0, 0xfb, 0x68, 0xcf, 0x76, 0x2c, 0xda, 0x70, 0x7a, 0xd4, 0x2c,
	0x54, 0xda, 0x68, 0x2f, 0x27, 0x6a, 0x6c, 0xa2, 0xfd, 0x8b, 0xde, 0xc7, 0x4b, 0x9e, 0x36, 0x37,
	0xb4, 0x23, 0x2f, 0x91, 0xb7, 0x69, 0x68, 0x47, 0xce, 0xec, 0xd3, 0xb3, 0x95, 0xa8, 0x50, 0xf9,
	0x25, 0x2a, 0xb5, 0xb8, 0x50, 0xc1, 0x08, 0x82, 0x8d, 0xbf, 0x9b, 0xdd, 0x2a, 0x06, 0xdc, 0x0d,
	0xf7, 0xb3, 0xbb, 0x61, 0x4d, 0x03, 0xae, 0x95, 0xec, 0x36, 0x31, 0xd1, 0xe6, 0x8c, 0x4f, 0x61,
	0x72, 0xd9, 0xa7, 0xfa, 0x2f, 0x3e, 0x44, 0x05, 0x2f, 0x82, 0x91, 0xa2, 0x48, 0x0b, 0x5e, 0x54,
	0x21, 0xd9, 0x91, 0x76, 0xd1, 0x66, 0xab, 0x4f, 0xcd, 0x0d, 0xf8, 0x43, 0x1d, 0xd3, 0xc0, 0x3b,
	0xa8, 0xd0, 0x6a, 0x98, 0x85, 0xca, 0x9f, 0x0d, 0x84, 0x5a, 0xb3, 0xa4, 0x9f, 0xf2, 0x16, 0x6e,
	0xa0, 0x83, 0x44, 0x72, 0xe1, 0x6a, 0xf2, 0xd3, 0xb1, 0x06, 0x47, 0x0a, 0xcd, 0x37, 0x21, 0x83,
	0xf7, 0x2b, 0xf7, 0x06, 0x92, 0x0b, 0xe2, 0xcd, 0x92, 0x25, 0xd1, 0x69, 0x8a, 0xa3, 0x25, 0xbd,
	0xa7, 0x35, 0x4b, 0xf4, 0x95, 0x80, 0x4f, 0xd1, 0x91, 0x5c, 0x48, 0xc5, 0xa7, 0x2b, 0x90, 0x02,
	0x80, 0xbc, 0x05, 0x20, 0xaf, 0x56, 0xee, 0xf7, 0x61, 0xf9, 0x36, 0xcc, 0x41, 0xba, 0x2f, 0x03,
	0xaa, 0xfc, 0x66, 0x0b, 0x15, 0x4f, 0x85, 0xd0, 0x89, 0x4d, 0x24, 0xfe, 0x3e, 0xda, 0x91, 0xf0,
	0x2f, 0x8b, 0xcd, 0x5b, 0xab, 0x7b, 0x33, 0xd5, 0xa8, 0x51, 0xae, 0x12, 0x11, 0x71, 0x3f, 0xfd,
	0xac, 0x17, 0x7a, 0xe7, 0x34, 0xdb, 0x82, 0xbf, 0x8d, 0x0e, 0xb8, 0x10, 0xb1, 0x70, 0xb3, 0xa2,
	0x02, 0x8f, 0x8a, 0xf5, 0x0d, 0xba, 0x0f, 0xe2, 0x7c, 0x02, 0xfd, 0x3f, 0x54, 0x1c, 0x32, 0xef,
	0x4a, 0x09, 0xe6, 0xf1, 0x34, 0x8a, 0xf5, 0x0d, 0xba, 0x12, 0xe1, 0x0f, 0xd0, 0x41, 0x7e, 0x26,
	0x57, 0x7b, 0x0c, 0x33, 0x56, 0xe9, 0xe4, 0x4e, 0x9e, 0xa6, 0x65, 0x1c, 0x69, 0xc9, 0x4b, 0x0f,
	0x31, 0x90, 0xdc, 0xc7, 0x14, 0x99, 0xde, 0x24, 0x08, 0x7d, 0x77, 0x6d, 0xbc, 0xdd, 0x06, 0x22,
	0xad, 0x42, 0x48, 0x2a, 0xa8, 0xb8, 0x1a, 0x6d, 0xef, 0x69, 0xe6, 0x1b, 0xd0, 0xae, 0x66, 0x16,
	0x46, 0x64, 0x32, 0xd4, 0xcc, 0x50, 0xa3, 0x87, 0x80, 0xd0, 0x5f, 0x0e, 0xaf, 0x0f, 0x10, 0xbe,
	0x49, 0x5e, 0x9a, 0x71, 0x60, 0x9c, 0xda, 0xa2, 0xe6, 0x7a, 0x57, 0xf6, 0x79, 0xa4, 0xf0, 0xdb,
	0x68, 0x3f, 0x62, 0x51, 0xb4, 0x70, 0xb3, 0x10, 0xee, 0xa6, 0x37, 0x03, 0xc8, 0xd2, 0x70, 0x55,
	0xbe, 0x32, 0xd0, 0xe1, 0xcd, 0x08, 0xea, 0x1a, 0xe9, 0x9d, 0x9b, 0x1b, 0xba, 0x21, 0xec, 0x9e,
	0x45, 0x69, 0x8f, 0x9a, 0x06, 0x7e, 0x1d, 0xdd, 0xa7, 0x96, 0x43, 0x1b, 0xdd, 0x7e, 0xc7, 0xee,
	0xf7, 0xed, 0x5e, 0xd7, 0x6d, 0x5b, 0x8e, 0xd5, 0xd2, 0x6d, 0x55, 0xd0, 0x05, 0xde, 0xba, 0xb0,
	0xad, 0xae, 0xe3, 0x9e, 0xdb, 0x17, 0x17, 0x56, 0xdb, 0xdc, 0xc4, 0xaf, 0xa1, 0x57, 0xba, 0x96,
	0xf3, 0x71, 0x8f, 0x9e, 0xbb, 0x17, 0x76, 0xc7, 0x76, 0x5c, 0xeb, 0x93, 0x96, 0x65, 0xb5, 0xad,
	0xb6, 0xb9, 0xa5, 0xdb, 0x46, 0x2f, 0x58, 0xd4, 0xed, 0x3b, 0x83, 0xd6, 0xb9, 0x59, 0xd4, 0x00,
	0xa7, 0x56, 0xd7, 0xa2, 0x76, 0xcb, 0x4d, 0x0d, 0xa2, 0xca, 0x09, 0x2a, 0x65, 0xf9, 0xb9, 0x08,
	0xa4, 0xc2, 0xff, 0x8f, 0x36, 0x3f, 0x8f, 0x87, 0x65, 0x83, 0x6c, 0xae, 0x45, 0x7e, 0x35, 0x3c,
	0x51, 0xbd, 0x5a, 0xf9, 0xed, 0x26, 0xba, 0x73, 0xc9, 0xbc, 0x2b, 0xee, 0xaf, 0x6f, 0x7d, 0x1b,
	0xed, 0x67, 0xf9, 0x77, 0xc3, 0x40, 0x2a, 0x28, 0xa4, 0x7d, 0x5a, 0x9a, 0xae, 0xa9, 0x5c, 0x2e,
	0x27, 0x53, 0x48, 0x7f, 0xf3, 0x19, 0x24, 0xe8, 0x64, 0x79, 0xd3, 0x55, 0xe1, 0xa6, 0x03, 0x8d,
	0xe5, 0x60, 0xba, 0xc6, 0x55, 0xcb, 0xc9, 0x74, 0x35, 0x7d, 0x7e, 0x82, 0x4a, 0x5e, 0x3c, 0x9d,
	0x89, 0x34, 0x73, 0x50, 0x31, 0x87, 0x27, 0xd5, 0xcc, 0xef, 0x5b, 0x3e, 0xd6, 0x5a, 0x2b, 0x5d,
	0x18, 0x20, 0xf7, 0x07, 0xdd, 0x56, 0xaf, 0x73, 0x49, 0xad, 0x7e, 0xdf, 0x6a, 0xd3, 0x75, 0x28,
	0x1c, 0xae, 0x33, 0x2d, 0x64, 0xbe, 0xd9, 0x05, 0x77, 0xcf, 0x6e, 0x32, 0xed, 0xf7, 0x9c, 0xd5,
	0x50, 0x24, 0xb9, 0xee, 0xb6, 0x40, 0xc9, 0x35, 0xca, 0x55, 0x31, 0x99, 0x09, 0x7e, 0xad, 0x97,
	0x05, 0x9f, 0x85, 0x6c, 0x41, 0x98, 0x52, 0xcc, 0xbb, 0x92, 0x37, 0xf8, 0xf6, 0x03, 0x74, 0xf4,
	0x92, 0x6f, 0x3a, 0x7d, 0xeb, 0xde, 0x99, 0x1b, 0x5a, 0xf2, 0x59, 0x2e, 0xb0, 0x7b, 0x5d, 0xd3,
	0xa8, 0xfc, 0xb5, 0x80, 0xcc, 0x56, 0x30, 0x9b, 0x70, 0x71, 0x29, 0xe2, 0x99, 0xe6, 0x31, 0x2e,
	0xf5, 0x9b, 0x00, 0x06, 0x14, 0x78, 0xe3, 0x65, 0xef, 0x84, 0x77, 0xd0, 0xe6, 0x15, 0x5f, 0xa4,
	0x64, 0xd6, 0xbc, 0x07, 0xe7, 0x38, 0x42, 0x07, 0x56, 0xe4, 0x89, 0x05, 0xdc, 0x12, 0xe7, 0x7c,
	0x41, 0xb5, 0x06, 0x7e, 0x82, 0x4a, 0x53, 0xae, 0x98, 0xcf, 0x14, 0x73, 0x83, 0x6b, 0xc8, 0xd3,
	0xff, 0xdc, 0x80, 0x72, 0x4d, 0xfb, 0x1a, 0x1f, 0xa3, 0xbd, 0xc9, 0x94, 0x79, 0xae, 0xb6, 0xb2,
	0xfd, 0x4d, 0x9b, 0x76, 0xb5, 0xda, 0x39, 0x5f, 0xe0, 0x1f, 0xa3, 0x22, 0xec, 0x00, 0x46, 0xde,
	0x81, 0xc4, 0x91, 0xbc, 0xd5, 0x5f, 0x3a, 0x52, 0xed, 0xac, 0xd3, 0x68, 0x41, 0xc2, 0x4a, 0x7d,
	0xbb, 0x73, 0x79, 0x61, 0xb9, 0x5a, 0x40, 0xc1, 0xa2, 0x16, 0x57, 0xbe, 0x83, 0xf6, 0x72, 0x15,
	0x7c, 0x84, 0xd6, 0x95, 0xcc, 0x0d, 0x7c, 0x80, 0x8a, 0xcf, 0x07, 0x17, 0x17, 0xe9, 0xa7, 0x51,
	0xf9, 0x93, 0x81, 0x0e, 0x53, 0x03, 0x9d, 0xcc, 0x7d, 0x3c, 0x5e, 0xd6, 0xe5, 0xcd, 0x77, 0x71,
	0x5e, 0x97, 0x3f, 0x84, 0x1c, 0xc7, 0xd3, 0x69, 0x1c, 0xa5, 0xaf, 0x26, 0x28, 0x4b, 0x0f, 0x40,
	0x88, 0x9c, 0xc4, 0x49, 0xe8, 0x2f, 0x07, 0x52, 0x15, 0xdf, 0xb8, 0xdf, 0xe7, 0x81, 0x9a, 0xac,
	0xca, 0xf5, 0x0d, 0x54, 0x94, 0xc1, 0x38, 0x62, 0x2a, 0x11, 0x3c, 0xbb, 0x59, 0x56, 0x82, 0xca,
	0xdf, 0x36, 0xd1, 0xdd, 0xf4, 0x6d, 0xd6, 0x5a, 0x22, 0xe8, 0x52, 0x7c, 0x03, 0x15, 0x79, 0x1a,
	0x43, 0xee, 0x67, 0x6d, 0xb5, 0x12, 0xe0, 0x77, 0x91, 0xb9, 0xfc, 0x70, 0x53, 0x9f, 0x32, 0xe8,
	0xa3, 0xa5, 0x3c, 0x3d, 0x2f, 0xae, 0xa3, 0x57, 0x5f, 0x56, 0x75, 0xf3, 0x1c, 0xc2, 0x83, 0x69,
	0x9f, 0xde, 0x7f, 0x69, 0xcf, 0x32, 0x46, 0x27, 0xa8, 0x38, 0xd3, 0xfd, 0xa4, 0x74, 0x59, 0xec,
	0x7d, 0x53, 0x86, 0xf7, 0x52, 0x3d, 0xfb, 0x1a, 0x13, 0x84, 0x60, 0x24, 0x75, 0x65, 0xf0, 0x65,
	0xfa, 0x64, 0x3e, 0xa8, 0x1b, 0xc7, 0xb4, 0x08, 0xc2, 0x7e, 0xf0, 0x25, 0xc7, 0x1f, 0x2e, 0xef,
	0x9d, 0x6d, 0xa8, 0x80, 0xb7, 0xf3, 0x0a, 0xb8, 0x1d, 0x86, 0xda, 0xd7, 0xdc, 0x3c, 0x6f, 0xa1,
	0x12, 0x9b, 0x05, 0xee, 0x35, 0x17, 0xd0, 0xfe, 0xba, 0x8a, 0x0e, 0x28, 0x62, 0xb3, 0xe0, 0xa3,
	0x54, 0xa2, 0x7b, 0x41, 0x17, 0x09, 0x50, 0xf2, 0x3e, 0x85, 0xff, 0xf8, 0x75, 0x54, 0x1c, 0x25,
	0x61, 0xe8, 0xc2, 0x02, 0x82, 0x85, 0x3d, 0x2d, 0x38, 0x9b, 0x32, 0xaf, 0xf2, 0x04, 0xed, 0x64,
	0xfc, 0xbc, 0x0b, 0xfc, 0xfc, 0x0f, 0x03, 0x9b, 0xa8, 0xd4, 0x6c, 0xb4, 0x5d, 0x6a, 0xfd, 0x64,
	0x60, 0xf5, 0x1d, 0xf3, 0x8f, 0x9b, 0xf8, 0x0e, 0xda, 0x6f, 0xd9, 0x97, 0x67, 0x16, 0xcd, 0x68,
	0xf4, 0xab, 0xcd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x78, 0x98, 0xf8, 0x59, 0xbd, 0x11, 0x00,
	0x00,
}
