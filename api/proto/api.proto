syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/flows/proto/flows.proto";
import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// Files within the same directory must be imported relatively.
import "clients.proto";
import "flows.proto";

package proto;

message StartFlowResponse {
    string flow_id = 1;
    FlowRunnerArgs runner_args = 2;
}

message FieldDescriptor {
    string friendly_name = 1;
    string name = 2;
    bool repeated = 3;
    string type = 4;
    string doc = 5;
    repeated string labels = 6;
    string default = 7;
}


message TypeDescriptor {
    string doc = 1;
    repeated FieldDescriptor fields = 2;
    string name = 3;
    string kind = 4;
}

message Types {
    repeated TypeDescriptor items = 1;
}

message Approval {
    string reason = 1;
}

message ApprovalList {
    repeated Approval items = 1;
}

// Next field: 4
message GUISettings {
    option (semantic) = {
        description: "User GUI settings and preferences."
    };

    enum UIMode {
        BASIC = 0;
        ADVANCED = 1;
        DEBUG = 2;
    }

    UIMode mode = 1 [(sem_type) = {
            description: "User interface mode.",
        }];

    bool canary_mode = 3 [(sem_type) = {
            description: "If true, show features that are being canaried."
        }];
}

// These traits are used by the AdminUI Angular app to disable certain UI
// elements.
message ApiGrrUserInterfaceTraits {
    bool cron_jobs_nav_item_enabled = 1;
    bool create_cron_job_action_enabled = 2;

    bool hunt_manager_nav_item_enabled = 3;
    bool create_hunt_action_enabled = 4;

    bool show_statistics_nav_item_enabled = 5;

    bool server_load_nav_item_enabled = 7;

    bool manage_binaries_nav_item_enabled = 9;
    bool upload_binary_action_enabled = 10;

    bool settings_nav_item_enabled = 11;

    bool artifact_manager_nav_item_enabled = 12;
    bool upload_artifact_action_enabled = 13;
    bool search_clients_action_enabled = 14;
    bool browse_virtual_file_system_nav_item_enabled = 15;
    bool start_client_flow_nav_item_enabled = 16;
    bool manage_client_flows_nav_item_enabled = 17;
    bool modify_client_labels_action_enabled = 18;
};

message ApiGrrUser {
    string username = 1 [(sem_type) = {
            description: "The name of the user."
        }];
    GUISettings settings = 2 [(sem_type) = {
            description: "User UI settings."
        }];
    ApiGrrUserInterfaceTraits interface_traits = 3 [(sem_type) = {
            description: "User's interface traits (what they can and can't do "
            "in the UI)."
        }];

    enum UserType {
        USER_TYPE_NONE = 0;
        USER_TYPE_STANDARD = 1;
        USER_TYPE_ADMIN = 2;
    }
    UserType user_type = 4;
}


service API {

    rpc LaunchFlow(FlowRunnerArgs) returns (StartFlowResponse) {
        option (google.api.http) = {
            post: "/api/v1/LaunchFlow",
            body: "*"
        };
    }

    rpc ListClients(SearchClientsRequest) returns (SearchClientsResponse) {
        option (google.api.http) = {
            get: "/api/v1/SearchClients",
        };
    }

    rpc GetClient(GetClientRequest) returns (ApiClient) {
        option (google.api.http) = {
            get: "/api/v1/GetClient/{query}",
        };
    }

    rpc GetClientFlows(ApiFlowRequest) returns (ApiFlowResponse) {
        option (google.api.http) = {
            get: "/api/v1/GetClientFlows/{client_id}",
            additional_bindings: {
                custom: {
                    kind: "HEAD",
                    path: "/api/v1/GetClientFlows/{client_id}",
                },
            }
        };
    }

    rpc GetClientApprovalForUser(GetClientRequest) returns (ApprovalList) {
        option (google.api.http) = {
            get: "/api/v1/GetApprovals/{query}",
        };
    }

    rpc GetUserUITraits(google.protobuf.Empty) returns (ApiGrrUser) {
        option (google.api.http) = {
            get: "/api/v1/GetUserUITraits",
        };
    }

    rpc GetFlowDetails(ApiFlowRequest) returns (ApiFlow) {
        option (google.api.http) = {
            get: "/api/v1/GetFlowDetails/{client_id}",
        };
    }

    rpc GetFlowRequests(ApiFlowRequest) returns (ApiFlowRequestDetails) {
        option (google.api.http) = {
            get: "/api/v1/GetFlowDetails/{client_id}/{flow_id}/requests",
        };
    }

    rpc GetFlowResults(ApiFlowRequest) returns (ApiFlowResultDetails) {
        option (google.api.http) = {
            get: "/api/v1/GetFlowDetails/{client_id}/{flow_id}/results",
        };
    }

    rpc GetFlowDescriptors(google.protobuf.Empty) returns (FlowDescriptors) {
        option (google.api.http) = {
            get: "/api/v1/flows/descriptors",
        };
    }

    rpc DescribeTypes(google.protobuf.Empty) returns (Types) {
        option (google.api.http) = {
            get: "/api/v1/DescribeTypes",
        };
    }
}