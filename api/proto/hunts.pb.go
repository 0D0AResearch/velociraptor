// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hunts.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "www.velocidex.com/golang/velociraptor/actions/proto"
import proto1 "www.velocidex.com/golang/velociraptor/flows/proto"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Hunt_State int32

const (
	Hunt_UNSET   Hunt_State = 0
	Hunt_PAUSED  Hunt_State = 1
	Hunt_RUNNING Hunt_State = 2
	Hunt_STOPPED Hunt_State = 3
)

var Hunt_State_name = map[int32]string{
	0: "UNSET",
	1: "PAUSED",
	2: "RUNNING",
	3: "STOPPED",
}
var Hunt_State_value = map[string]int32{
	"UNSET":   0,
	"PAUSED":  1,
	"RUNNING": 2,
	"STOPPED": 3,
}

func (x Hunt_State) String() string {
	return proto.EnumName(Hunt_State_name, int32(x))
}
func (Hunt_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{0, 0}
}

type HuntInfo_State int32

const (
	HuntInfo_UNSET   HuntInfo_State = 0
	HuntInfo_PENDING HuntInfo_State = 1
	HuntInfo_RUNNING HuntInfo_State = 2
)

var HuntInfo_State_name = map[int32]string{
	0: "UNSET",
	1: "PENDING",
	2: "RUNNING",
}
var HuntInfo_State_value = map[string]int32{
	"UNSET":   0,
	"PENDING": 1,
	"RUNNING": 2,
}

func (x HuntInfo_State) String() string {
	return proto.EnumName(HuntInfo_State_name, int32(x))
}
func (HuntInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{1, 0}
}

type Hunt struct {
	HuntId                   string                   `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	CreateTime               uint64                   `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Expires                  uint64                   `protobuf:"varint,10,opt,name=expires,proto3" json:"expires,omitempty"`
	HuntDescription          string                   `protobuf:"bytes,11,opt,name=hunt_description,json=huntDescription,proto3" json:"hunt_description,omitempty"`
	StartRequest             *proto1.FlowRunnerArgs   `protobuf:"bytes,3,opt,name=start_request,json=startRequest,proto3" json:"start_request,omitempty"`
	FlowConditionQuery       *proto2.VQLCollectorArgs `protobuf:"bytes,4,opt,name=flow_condition_query,json=flowConditionQuery,proto3" json:"flow_condition_query,omitempty"`
	ServerSideConditionQuery *proto2.VQLCollectorArgs `protobuf:"bytes,5,opt,name=server_side_condition_query,json=serverSideConditionQuery,proto3" json:"server_side_condition_query,omitempty"`
	ClientLimit              uint64                   `protobuf:"varint,6,opt,name=client_limit,json=clientLimit,proto3" json:"client_limit,omitempty"`
	ClientRate               uint64                   `protobuf:"varint,7,opt,name=client_rate,json=clientRate,proto3" json:"client_rate,omitempty"`
	TotalClientsScheduled    uint64                   `protobuf:"varint,9,opt,name=total_clients_scheduled,json=totalClientsScheduled,proto3" json:"total_clients_scheduled,omitempty"`
	// The following fields are used to calculate the client
	// recruitment rate when the hunt is paused.
	LastUnpauseTime          uint64     `protobuf:"varint,12,opt,name=last_unpause_time,json=lastUnpauseTime,proto3" json:"last_unpause_time,omitempty"`
	TotalClientsWhenUnpaused uint64     `protobuf:"varint,13,opt,name=total_clients_when_unpaused,json=totalClientsWhenUnpaused,proto3" json:"total_clients_when_unpaused,omitempty"`
	State                    Hunt_State `protobuf:"varint,8,opt,name=state,proto3,enum=proto.Hunt_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}   `json:"-"`
	XXX_unrecognized         []byte     `json:"-"`
	XXX_sizecache            int32      `json:"-"`
}

func (m *Hunt) Reset()         { *m = Hunt{} }
func (m *Hunt) String() string { return proto.CompactTextString(m) }
func (*Hunt) ProtoMessage()    {}
func (*Hunt) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{0}
}
func (m *Hunt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hunt.Unmarshal(m, b)
}
func (m *Hunt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hunt.Marshal(b, m, deterministic)
}
func (dst *Hunt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hunt.Merge(dst, src)
}
func (m *Hunt) XXX_Size() int {
	return xxx_messageInfo_Hunt.Size(m)
}
func (m *Hunt) XXX_DiscardUnknown() {
	xxx_messageInfo_Hunt.DiscardUnknown(m)
}

var xxx_messageInfo_Hunt proto.InternalMessageInfo

func (m *Hunt) GetHuntId() string {
	if m != nil {
		return m.HuntId
	}
	return ""
}

func (m *Hunt) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hunt) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *Hunt) GetHuntDescription() string {
	if m != nil {
		return m.HuntDescription
	}
	return ""
}

func (m *Hunt) GetStartRequest() *proto1.FlowRunnerArgs {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *Hunt) GetFlowConditionQuery() *proto2.VQLCollectorArgs {
	if m != nil {
		return m.FlowConditionQuery
	}
	return nil
}

func (m *Hunt) GetServerSideConditionQuery() *proto2.VQLCollectorArgs {
	if m != nil {
		return m.ServerSideConditionQuery
	}
	return nil
}

func (m *Hunt) GetClientLimit() uint64 {
	if m != nil {
		return m.ClientLimit
	}
	return 0
}

func (m *Hunt) GetClientRate() uint64 {
	if m != nil {
		return m.ClientRate
	}
	return 0
}

func (m *Hunt) GetTotalClientsScheduled() uint64 {
	if m != nil {
		return m.TotalClientsScheduled
	}
	return 0
}

func (m *Hunt) GetLastUnpauseTime() uint64 {
	if m != nil {
		return m.LastUnpauseTime
	}
	return 0
}

func (m *Hunt) GetTotalClientsWhenUnpaused() uint64 {
	if m != nil {
		return m.TotalClientsWhenUnpaused
	}
	return 0
}

func (m *Hunt) GetState() Hunt_State {
	if m != nil {
		return m.State
	}
	return Hunt_UNSET
}

type HuntInfo struct {
	HuntId               string                 `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	ScheduledTime        uint64                 `protobuf:"varint,2,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	ClientId             string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	FlowId               string                 `protobuf:"bytes,5,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	StartRequest         *proto1.FlowRunnerArgs `protobuf:"bytes,4,opt,name=start_request,json=startRequest,proto3" json:"start_request,omitempty"`
	State                HuntInfo_State         `protobuf:"varint,8,opt,name=state,proto3,enum=proto.HuntInfo_State" json:"state,omitempty"`
	Result               *proto1.FlowContext    `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HuntInfo) Reset()         { *m = HuntInfo{} }
func (m *HuntInfo) String() string { return proto.CompactTextString(m) }
func (*HuntInfo) ProtoMessage()    {}
func (*HuntInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{1}
}
func (m *HuntInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuntInfo.Unmarshal(m, b)
}
func (m *HuntInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuntInfo.Marshal(b, m, deterministic)
}
func (dst *HuntInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuntInfo.Merge(dst, src)
}
func (m *HuntInfo) XXX_Size() int {
	return xxx_messageInfo_HuntInfo.Size(m)
}
func (m *HuntInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HuntInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HuntInfo proto.InternalMessageInfo

func (m *HuntInfo) GetHuntId() string {
	if m != nil {
		return m.HuntId
	}
	return ""
}

func (m *HuntInfo) GetScheduledTime() uint64 {
	if m != nil {
		return m.ScheduledTime
	}
	return 0
}

func (m *HuntInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *HuntInfo) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *HuntInfo) GetStartRequest() *proto1.FlowRunnerArgs {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *HuntInfo) GetState() HuntInfo_State {
	if m != nil {
		return m.State
	}
	return HuntInfo_UNSET
}

func (m *HuntInfo) GetResult() *proto1.FlowContext {
	if m != nil {
		return m.Result
	}
	return nil
}

type ListHuntsRequest struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count                uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHuntsRequest) Reset()         { *m = ListHuntsRequest{} }
func (m *ListHuntsRequest) String() string { return proto.CompactTextString(m) }
func (*ListHuntsRequest) ProtoMessage()    {}
func (*ListHuntsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{2}
}
func (m *ListHuntsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHuntsRequest.Unmarshal(m, b)
}
func (m *ListHuntsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHuntsRequest.Marshal(b, m, deterministic)
}
func (dst *ListHuntsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHuntsRequest.Merge(dst, src)
}
func (m *ListHuntsRequest) XXX_Size() int {
	return xxx_messageInfo_ListHuntsRequest.Size(m)
}
func (m *ListHuntsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHuntsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHuntsRequest proto.InternalMessageInfo

func (m *ListHuntsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListHuntsRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetHuntRequest struct {
	HuntId               string   `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHuntRequest) Reset()         { *m = GetHuntRequest{} }
func (m *GetHuntRequest) String() string { return proto.CompactTextString(m) }
func (*GetHuntRequest) ProtoMessage()    {}
func (*GetHuntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{3}
}
func (m *GetHuntRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHuntRequest.Unmarshal(m, b)
}
func (m *GetHuntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHuntRequest.Marshal(b, m, deterministic)
}
func (dst *GetHuntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHuntRequest.Merge(dst, src)
}
func (m *GetHuntRequest) XXX_Size() int {
	return xxx_messageInfo_GetHuntRequest.Size(m)
}
func (m *GetHuntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHuntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHuntRequest proto.InternalMessageInfo

func (m *GetHuntRequest) GetHuntId() string {
	if m != nil {
		return m.HuntId
	}
	return ""
}

type ListHuntsResponse struct {
	Items                []*Hunt  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHuntsResponse) Reset()         { *m = ListHuntsResponse{} }
func (m *ListHuntsResponse) String() string { return proto.CompactTextString(m) }
func (*ListHuntsResponse) ProtoMessage()    {}
func (*ListHuntsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_2b2efa16e9ef001e, []int{4}
}
func (m *ListHuntsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHuntsResponse.Unmarshal(m, b)
}
func (m *ListHuntsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHuntsResponse.Marshal(b, m, deterministic)
}
func (dst *ListHuntsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHuntsResponse.Merge(dst, src)
}
func (m *ListHuntsResponse) XXX_Size() int {
	return xxx_messageInfo_ListHuntsResponse.Size(m)
}
func (m *ListHuntsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHuntsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHuntsResponse proto.InternalMessageInfo

func (m *ListHuntsResponse) GetItems() []*Hunt {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Hunt)(nil), "proto.Hunt")
	proto.RegisterType((*HuntInfo)(nil), "proto.HuntInfo")
	proto.RegisterType((*ListHuntsRequest)(nil), "proto.ListHuntsRequest")
	proto.RegisterType((*GetHuntRequest)(nil), "proto.GetHuntRequest")
	proto.RegisterType((*ListHuntsResponse)(nil), "proto.ListHuntsResponse")
	proto.RegisterEnum("proto.Hunt_State", Hunt_State_name, Hunt_State_value)
	proto.RegisterEnum("proto.HuntInfo_State", HuntInfo_State_name, HuntInfo_State_value)
}

func init() { proto.RegisterFile("hunts.proto", fileDescriptor_hunts_2b2efa16e9ef001e) }

var fileDescriptor_hunts_2b2efa16e9ef001e = []byte{
	// 1439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x4f, 0x1b, 0x49,
	0x16, 0xde, 0x26, 0x80, 0x43, 0x39, 0x04, 0x28, 0x85, 0xc5, 0x32, 0x97, 0xda, 0x56, 0x56, 0x21,
	0x09, 0xdb, 0xb0, 0xac, 0x44, 0xb4, 0x88, 0x6c, 0x16, 0x8c, 0x49, 0xbc, 0xb2, 0x08, 0xb4, 0x4d,
	0xd0, 0x6a, 0x15, 0x79, 0x9b, 0xee, 0x67, 0x5c, 0x52, 0xbb, 0xca, 0x54, 0x55, 0xc7, 0x41, 0x51,
	0xa4, 0x5d, 0xed, 0x25, 0xb7, 0x9d, 0x5f, 0x32, 0xd2, 0x1c, 0xe6, 0x90, 0xfb, 0xdc, 0xe6, 0x3a,
	0xbf, 0x20, 0x73, 0x18, 0xcd, 0x9c, 0xe7, 0x36, 0x73, 0x18, 0xd5, 0xab, 0xb6, 0x31, 0x90, 0xa0,
	0x99, 0x13, 0xee, 0xaa, 0x7a, 0xdf, 0xfb, 0xea, 0x7b, 0x5f, 0xbd, 0x07, 0x29, 0x76, 0x32, 0x61,
	0x74, 0xd0, 0x53, 0xd2, 0x48, 0x3a, 0x81, 0x7f, 0xca, 0x1b, 0xfd, 0x7e, 0x3f, 0x78, 0x05, 0xa9,
	0x8c, 0x79, 0x02, 0xaf, 0x83, 0x58, 0x76, 0x57, 0x4e, 0x64, 0x1a, 0x89, 0x93, 0x15, 0xb7, 0xa8,
	0xa2, 0x9e, 0x91, 0x6a, 0x05, 0x0f, 0xaf, 0x68, 0xe8, 0x46, 0xc2, 0xf0, 0xd8, 0x41, 0x94, 0x1f,
	0xff, 0xba, 0xd8, 0x76, 0x2a, 0xfb, 0x3a, 0x47, 0xc0, 0xdf, 0xbf, 0x2d, 0x3c, 0x8a, 0x0d, 0x97,
	0x62, 0x00, 0xf0, 0xea, 0x34, 0x75, 0xe1, 0xfe, 0xff, 0x66, 0xc8, 0xf8, 0xb3, 0x4c, 0x18, 0xba,
	0x44, 0x0a, 0xf6, 0x62, 0x2d, 0x9e, 0x94, 0x3c, 0xe6, 0x2d, 0x4d, 0x6d, 0xcf, 0x7c, 0xf8, 0xf9,
	0xdb, 0xaf, 0xbc, 0x29, 0xbf, 0x60, 0xb7, 0x59, 0x6d, 0x27, 0x9c, 0xb4, 0xfb, 0xb5, 0x84, 0xfe,
	0x9b, 0x14, 0x63, 0x05, 0x91, 0x81, 0x96, 0xe1, 0x5d, 0x28, 0x8d, 0x31, 0x6f, 0x69, 0x7c, 0xfb,
	0x09, 0x9e, 0xfe, 0x2b, 0x29, 0x86, 0x3b, 0xbb, 0x3b, 0x91, 0x01, 0xbb, 0x45, 0x17, 0x8f, 0x3a,
	0x20, 0x98, 0xe9, 0x70, 0xcd, 0x6c, 0x2c, 0xeb, 0x47, 0x9a, 0xb9, 0xd0, 0x24, 0xf0, 0xa7, 0x2b,
	0xf6, 0x17, 0x97, 0x82, 0x35, 0x79, 0x17, 0x42, 0xe2, 0x36, 0xec, 0x6f, 0x7a, 0x44, 0x0a, 0xf0,
	0xba, 0xc7, 0x15, 0xe8, 0x12, 0x41, 0xf4, 0xc7, 0x88, 0xfe, 0xe8, 0x63, 0xe8, 0x89, 0x04, 0x3d,
	0x92, 0xc2, 0xc5, 0x3d, 0xf1, 0x8b, 0x55, 0xfb, 0xe3, 0xcc, 0x61, 0x0f, 0xd0, 0x68, 0x95, 0xcc,
	0xe2, 0x25, 0x13, 0xd0, 0xb1, 0xe2, 0x3d, 0x9b, 0xbd, 0x54, 0xc4, 0xdb, 0x96, 0x31, 0xc3, 0x1d,
	0x4a, 0xed, 0x6d, 0xef, 0x69, 0x36, 0x72, 0x22, 0x9c, 0xb1, 0x31, 0x3b, 0xe7, 0x0b, 0xf4, 0x9d,
	0x47, 0xa6, 0xb5, 0x89, 0x94, 0x69, 0x29, 0x38, 0xcd, 0x40, 0x9b, 0xd2, 0x0d, 0xe6, 0x2d, 0x15,
	0xd7, 0xe6, 0x9d, 0xa8, 0xc1, 0x6e, 0x2a, 0xfb, 0x61, 0x26, 0x04, 0xa8, 0x2d, 0x75, 0xa2, 0xb7,
	0xeb, 0x88, 0xbd, 0x4b, 0x1f, 0xd5, 0xa3, 0x4c, 0xc4, 0x1d, 0xc7, 0xd6, 0xd6, 0x90, 0x49, 0xab,
	0x0e, 0xb0, 0x38, 0xe5, 0x20, 0x0c, 0xe3, 0x6d, 0xf7, 0x25, 0x45, 0xc2, 0x51, 0x18, 0xae, 0x99,
	0x51, 0x19, 0xf8, 0xc5, 0x3c, 0x10, 0x71, 0x6f, 0x61, 0xe6, 0xd0, 0x25, 0xa6, 0x5f, 0x8e, 0x91,
	0x3b, 0x16, 0xaa, 0x35, 0x8c, 0x6a, 0x9d, 0x66, 0xa0, 0xce, 0x4a, 0xe3, 0xc8, 0x68, 0x21, 0x67,
	0xf4, 0xe2, 0xa0, 0x5e, 0x91, 0x69, 0x0a, 0xb1, 0x91, 0x8e, 0xd3, 0xf7, 0x1e, 0x92, 0xfa, 0xe0,
	0xd1, 0xf6, 0x16, 0x7b, 0x71, 0x50, 0x67, 0x18, 0xc5, 0x8c, 0x64, 0x2a, 0x13, 0x8c, 0x0b, 0x26,
	0x55, 0x02, 0xca, 0x7e, 0xc7, 0x2e, 0x8e, 0x71, 0xd1, 0x96, 0xaa, 0xeb, 0x2a, 0xd6, 0x96, 0x8a,
	0x25, 0x60, 0x40, 0x75, 0xb9, 0xe0, 0xe2, 0x64, 0xc0, 0x1c, 0x2b, 0x10, 0xf5, 0x7a, 0x29, 0xb7,
	0x35, 0x91, 0xee, 0xa2, 0xee, 0x72, 0x81, 0x3f, 0x5f, 0x71, 0xb7, 0x6c, 0xf0, 0x04, 0x58, 0x65,
	0xc0, 0x76, 0x2d, 0x7a, 0xe3, 0x1f, 0xd8, 0xd4, 0xfe, 0x06, 0xfb, 0xd7, 0x1b, 0xff, 0xc5, 0x41,
	0xdd, 0xdf, 0x60, 0x7e, 0xa3, 0x5a, 0xaf, 0x56, 0x9a, 0xec, 0x79, 0x63, 0x99, 0x6d, 0xa9, 0xb8,
	0xc3, 0x0d, 0xc4, 0x26, 0x53, 0xb0, 0xcc, 0x76, 0x4f, 0x13, 0xb1, 0xcc, 0xf6, 0xd3, 0xc8, 0x58,
	0x32, 0xcb, 0x56, 0xab, 0x36, 0x3f, 0x09, 0x1c, 0x74, 0x2b, 0x8d, 0x8e, 0x21, 0xd5, 0xac, 0xad,
	0x64, 0x17, 0xe9, 0x2e, 0xdd, 0xf7, 0xdf, 0xbe, 0x7c, 0x1b, 0x52, 0x2b, 0xd0, 0x30, 0x23, 0x66,
	0xa3, 0xdf, 0x8c, 0x91, 0x45, 0x0d, 0xea, 0x15, 0xa8, 0x96, 0xe6, 0x09, 0x5c, 0x91, 0x6f, 0xe2,
	0x7a, 0xf9, 0x7e, 0x72, 0xf2, 0xfd, 0xe8, 0xd1, 0xcf, 0xbd, 0x51, 0xfd, 0xfa, 0x1d, 0x1e, 0x77,
	0xac, 0x84, 0x9a, 0x39, 0x74, 0x66, 0xd1, 0x07, 0x75, 0x56, 0xa0, 0xb3, 0xd4, 0x68, 0x26, 0x9d,
	0x5c, 0x1f, 0xab, 0x5b, 0xc0, 0x6a, 0x6d, 0x16, 0x89, 0x33, 0xa6, 0x64, 0x5f, 0xb3, 0x48, 0xd9,
	0x20, 0x93, 0x29, 0x01, 0x89, 0x0d, 0x11, 0x57, 0x0d, 0x92, 0x00, 0x74, 0x21, 0x61, 0xed, 0x2c,
	0x6d, 0xf3, 0x34, 0x85, 0x84, 0x45, 0x22, 0x39, 0x2f, 0x46, 0x9f, 0xa7, 0x29, 0x3b, 0x06, 0xa6,
	0xe3, 0x0e, 0x24, 0x59, 0x6a, 0xdf, 0xdd, 0x7c, 0xc3, 0x11, 0xbb, 0x54, 0x87, 0x07, 0xd7, 0xd4,
	0xe1, 0x81, 0x93, 0xd4, 0x52, 0x42, 0x41, 0x4b, 0xee, 0x6e, 0x16, 0xe1, 0x92, 0xac, 0xff, 0x24,
	0xb7, 0xe2, 0xbc, 0x16, 0xbc, 0xcb, 0x4d, 0x69, 0x12, 0x9f, 0xef, 0x3a, 0x8a, 0xb5, 0x4a, 0x83,
	0xa6, 0x34, 0x51, 0xca, 0x44, 0xd6, 0x3d, 0x06, 0x65, 0x55, 0x70, 0x67, 0x47, 0xdf, 0x2f, 0x12,
	0xb6, 0x16, 0x94, 0x22, 0x08, 0x8b, 0x6e, 0xbf, 0x6e, 0xa1, 0xe8, 0x4b, 0x92, 0x7f, 0xb6, 0x54,
	0x64, 0xa0, 0x54, 0x40, 0xe4, 0x4d, 0x44, 0x5e, 0xa7, 0xab, 0x0e, 0x79, 0x80, 0xd7, 0x03, 0xc5,
	0xba, 0x5c, 0x64, 0x06, 0x98, 0xe9, 0x44, 0x23, 0xa8, 0x03, 0x61, 0x82, 0xb5, 0xb1, 0xb5, 0xd5,
	0x90, 0xb8, 0xf3, 0x61, 0x64, 0x80, 0xfe, 0xdf, 0x23, 0x0b, 0xc6, 0x82, 0xb4, 0x72, 0x90, 0xd6,
	0x50, 0xb3, 0xd2, 0x14, 0xe6, 0x3a, 0xc2, 0x5c, 0x07, 0xf4, 0x6f, 0xcd, 0x0e, 0x30, 0xf3, 0x89,
	0x9b, 0xc4, 0x99, 0x52, 0x20, 0x4c, 0x7a, 0x76, 0x2e, 0x39, 0xbe, 0x96, 0xe1, 0x0d, 0x03, 0x7f,
	0xc6, 0x71, 0x6d, 0x0c, 0xf6, 0xc3, 0x79, 0x04, 0x73, 0x1e, 0xd6, 0xc3, 0x65, 0xfa, 0x1f, 0x8f,
	0xcc, 0xa5, 0x91, 0x36, 0xad, 0x4c, 0xf4, 0xa2, 0x4c, 0xe7, 0xed, 0xf6, 0x16, 0x72, 0x69, 0x22,
	0x97, 0xbd, 0x8b, 0x0d, 0x71, 0x13, 0x89, 0xf1, 0x2e, 0xb0, 0xfe, 0xc0, 0x2a, 0xc3, 0xb6, 0x6b,
	0x81, 0x18, 0xc2, 0x24, 0x0c, 0xe9, 0x80, 0xeb, 0xc4, 0xd6, 0x45, 0x36, 0x24, 0x28, 0x7b, 0x63,
	0xe1, 0x8c, 0x3d, 0x75, 0xe8, 0xb2, 0x61, 0x23, 0x7e, 0xe7, 0x91, 0xc5, 0x8b, 0xa2, 0x58, 0xe4,
	0x01, 0xa1, 0xa4, 0x34, 0x8d, 0x64, 0x6a, 0x48, 0xa6, 0x72, 0xbd, 0x30, 0x3a, 0xee, 0x38, 0x35,
	0xae, 0x72, 0x73, 0x60, 0xc8, 0xa0, 0x34, 0x2a, 0x85, 0xed, 0xef, 0x39, 0x9b, 0x84, 0xde, 0x23,
	0x13, 0xda, 0xd8, 0xc2, 0xdf, 0x64, 0xde, 0xd2, 0xed, 0xb5, 0xb9, 0xfc, 0x65, 0xda, 0x76, 0x1d,
	0x34, 0xec, 0x46, 0xe8, 0xf6, 0xfd, 0x2f, 0x3c, 0x32, 0x81, 0x0b, 0x74, 0x8a, 0x4c, 0x1c, 0xee,
	0x35, 0xaa, 0xcd, 0xd9, 0xdf, 0xd1, 0x67, 0x64, 0x72, 0x7f, 0xeb, 0xb0, 0x51, 0xdd, 0x99, 0xf5,
	0xca, 0x9b, 0x3f, 0xbc, 0xff, 0xfa, 0xbd, 0xb7, 0xfe, 0x6c, 0x68, 0x37, 0x21, 0xcd, 0xb0, 0x5a,
	0x4c, 0x40, 0x7f, 0xc8, 0xf9, 0x38, 0x33, 0x2c, 0x8e, 0x04, 0x3e, 0x20, 0xdb, 0x74, 0x21, 0x09,
	0xe8, 0x9f, 0x48, 0x21, 0x3c, 0xdc, 0xdb, 0xab, 0xed, 0x3d, 0x9d, 0x1d, 0x2b, 0x33, 0x84, 0x2a,
	0x23, 0x14, 0xd7, 0xd6, 0x61, 0xd8, 0x0e, 0xed, 0x13, 0x54, 0x10, 0x25, 0x67, 0x01, 0xbd, 0x4b,
	0x0a, 0x8d, 0xe6, 0xf3, 0xfd, 0xfd, 0xea, 0xce, 0xec, 0x8d, 0xf2, 0x02, 0x1e, 0x9f, 0xc3, 0xe3,
	0x9d, 0x48, 0xe7, 0xc3, 0x2a, 0x09, 0xfc, 0xef, 0xc6, 0xc9, 0x4d, 0xbb, 0x5a, 0x13, 0x6d, 0x49,
	0x17, 0x2e, 0x4d, 0xe2, 0xe1, 0xe0, 0xfd, 0x23, 0xb9, 0x3d, 0x34, 0xd5, 0xc8, 0xec, 0x0d, 0xa7,
	0x87, 0xab, 0x58, 0xb4, 0x45, 0x32, 0x95, 0x3f, 0x14, 0x9e, 0xe0, 0x60, 0x9a, 0x0a, 0x6f, 0xba,
	0x85, 0x5a, 0x42, 0xff, 0x41, 0x0a, 0xd8, 0x76, 0x78, 0x82, 0x2d, 0x6e, 0x6a, 0xfb, 0xcf, 0x58,
	0xbc, 0x87, 0xf4, 0x7e, 0x33, 0xef, 0x48, 0xf9, 0x8b, 0x41, 0xcf, 0xd8, 0xa9, 0x73, 0xc5, 0xc0,
	0xe1, 0xa4, 0x3d, 0x56, 0x4b, 0xe8, 0x7f, 0xaf, 0x8c, 0xc1, 0xf1, 0xeb, 0xc6, 0x60, 0x15, 0x33,
	0x3d, 0xa1, 0x8f, 0x2f, 0x65, 0xca, 0x5b, 0x94, 0x7b, 0xf4, 0xa3, 0xf3, 0x10, 0x9d, 0xc2, 0x51,
	0xd9, 0xf3, 0xfe, 0x75, 0x69, 0xfe, 0x3d, 0xbc, 0x68, 0x8b, 0xf9, 0x11, 0x5b, 0x58, 0x31, 0x2f,
	0x58, 0x83, 0x0a, 0x32, 0xe9, 0x5a, 0x30, 0xbe, 0xe8, 0xe2, 0x1a, 0x1d, 0x21, 0x5a, 0x91, 0xc2,
	0xc0, 0x6b, 0xb3, 0xbd, 0x8d, 0x2c, 0x37, 0xe9, 0xc6, 0xd1, 0xc0, 0xa7, 0x48, 0xd5, 0x0e, 0x32,
	0xd9, 0xed, 0xa5, 0x60, 0x80, 0x71, 0xa3, 0x59, 0x9b, 0x8b, 0x28, 0xcd, 0x1b, 0x3a, 0x12, 0x34,
	0x52, 0x41, 0xc2, 0x3a, 0xa0, 0x20, 0x08, 0xf3, 0x2c, 0xfe, 0x67, 0x1f, 0xb3, 0x62, 0x85, 0x14,
	0xf6, 0xab, 0x7b, 0x3b, 0xd6, 0x40, 0x5e, 0x79, 0x1d, 0x1d, 0xb1, 0x6a, 0x09, 0xa0, 0x23, 0xac,
	0x15, 0xcf, 0xc0, 0xb0, 0x63, 0x00, 0x31, 0xf8, 0x57, 0x09, 0x6d, 0xe8, 0x64, 0xe8, 0x81, 0x48,
	0xb8, 0x38, 0x09, 0xe8, 0xa3, 0x51, 0x17, 0x3e, 0x40, 0x90, 0xbb, 0x43, 0x90, 0x0b, 0xc1, 0xd6,
	0x8b, 0x23, 0xdd, 0xff, 0xef, 0x64, 0xb6, 0xce, 0xb5, 0xb1, 0xfa, 0xe8, 0x81, 0x86, 0xbf, 0x27,
	0x93, 0xb2, 0xdd, 0xd6, 0x60, 0xd0, 0x6f, 0xe3, 0x61, 0xfe, 0x45, 0xef, 0x90, 0x89, 0x58, 0x66,
	0xc2, 0xe4, 0x36, 0x73, 0x1f, 0xfe, 0x7d, 0x72, 0xfb, 0x29, 0x20, 0xc0, 0x20, 0xfe, 0x53, 0x86,
	0xf5, 0xd7, 0xc9, 0xdc, 0x48, 0x32, 0xdd, 0x93, 0x42, 0x03, 0xfd, 0x03, 0x99, 0xe0, 0x06, 0xba,
	0xba, 0xe4, 0xb1, 0x1b, 0x4b, 0xc5, 0xb5, 0xe2, 0x48, 0xc5, 0x42, 0xb7, 0x73, 0x3c, 0x89, 0x4b,
	0x7f, 0xf9, 0x25, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x0a, 0x1a, 0xa0, 0x6b, 0x0b, 0x00, 0x00,
}
