// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hunts.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "www.velocidex.com/golang/velociraptor/actions/proto"
import proto1 "www.velocidex.com/golang/velociraptor/flows/proto"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Hunt_State int32

const (
	Hunt_PENDING Hunt_State = 0
	Hunt_RUNNING Hunt_State = 1
	Hunt_STOPPED Hunt_State = 2
)

var Hunt_State_name = map[int32]string{
	0: "PENDING",
	1: "RUNNING",
	2: "STOPPED",
}
var Hunt_State_value = map[string]int32{
	"PENDING": 0,
	"RUNNING": 1,
	"STOPPED": 2,
}

func (x Hunt_State) String() string {
	return proto.EnumName(Hunt_State_name, int32(x))
}
func (Hunt_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_hunts_ca214d0e06082ad8, []int{0, 0}
}

type Hunt struct {
	HuntId                   string                   `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	CreateTime               uint64                   `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartRequest             *proto1.FlowRunnerArgs   `protobuf:"bytes,3,opt,name=start_request,json=startRequest,proto3" json:"start_request,omitempty"`
	FlowConditionQuery       *proto2.VQLCollectorArgs `protobuf:"bytes,4,opt,name=flow_condition_query,json=flowConditionQuery,proto3" json:"flow_condition_query,omitempty"`
	ServerSideConditionQuery *proto2.VQLCollectorArgs `protobuf:"bytes,5,opt,name=server_side_condition_query,json=serverSideConditionQuery,proto3" json:"server_side_condition_query,omitempty"`
	ClientLimit              uint64                   `protobuf:"varint,6,opt,name=client_limit,json=clientLimit,proto3" json:"client_limit,omitempty"`
	ClientRate               uint64                   `protobuf:"varint,7,opt,name=client_rate,json=clientRate,proto3" json:"client_rate,omitempty"`
	TotalClientsScheduled    uint64                   `protobuf:"varint,9,opt,name=total_clients_scheduled,json=totalClientsScheduled,proto3" json:"total_clients_scheduled,omitempty"`
	State                    Hunt_State               `protobuf:"varint,8,opt,name=state,proto3,enum=proto.Hunt_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                 `json:"-"`
	XXX_unrecognized         []byte                   `json:"-"`
	XXX_sizecache            int32                    `json:"-"`
}

func (m *Hunt) Reset()         { *m = Hunt{} }
func (m *Hunt) String() string { return proto.CompactTextString(m) }
func (*Hunt) ProtoMessage()    {}
func (*Hunt) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_ca214d0e06082ad8, []int{0}
}
func (m *Hunt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hunt.Unmarshal(m, b)
}
func (m *Hunt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hunt.Marshal(b, m, deterministic)
}
func (dst *Hunt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hunt.Merge(dst, src)
}
func (m *Hunt) XXX_Size() int {
	return xxx_messageInfo_Hunt.Size(m)
}
func (m *Hunt) XXX_DiscardUnknown() {
	xxx_messageInfo_Hunt.DiscardUnknown(m)
}

var xxx_messageInfo_Hunt proto.InternalMessageInfo

func (m *Hunt) GetHuntId() string {
	if m != nil {
		return m.HuntId
	}
	return ""
}

func (m *Hunt) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hunt) GetStartRequest() *proto1.FlowRunnerArgs {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *Hunt) GetFlowConditionQuery() *proto2.VQLCollectorArgs {
	if m != nil {
		return m.FlowConditionQuery
	}
	return nil
}

func (m *Hunt) GetServerSideConditionQuery() *proto2.VQLCollectorArgs {
	if m != nil {
		return m.ServerSideConditionQuery
	}
	return nil
}

func (m *Hunt) GetClientLimit() uint64 {
	if m != nil {
		return m.ClientLimit
	}
	return 0
}

func (m *Hunt) GetClientRate() uint64 {
	if m != nil {
		return m.ClientRate
	}
	return 0
}

func (m *Hunt) GetTotalClientsScheduled() uint64 {
	if m != nil {
		return m.TotalClientsScheduled
	}
	return 0
}

func (m *Hunt) GetState() Hunt_State {
	if m != nil {
		return m.State
	}
	return Hunt_PENDING
}

type HuntInfo struct {
	HuntId               string                 `protobuf:"bytes,1,opt,name=hunt_id,json=huntId,proto3" json:"hunt_id,omitempty"`
	ScheduledTime        uint64                 `protobuf:"varint,2,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	ClientId             string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	FlowId               string                 `protobuf:"bytes,5,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	StartRequest         *proto1.FlowRunnerArgs `protobuf:"bytes,4,opt,name=start_request,json=startRequest,proto3" json:"start_request,omitempty"`
	State                Hunt_State             `protobuf:"varint,8,opt,name=state,proto3,enum=proto.Hunt_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HuntInfo) Reset()         { *m = HuntInfo{} }
func (m *HuntInfo) String() string { return proto.CompactTextString(m) }
func (*HuntInfo) ProtoMessage()    {}
func (*HuntInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_hunts_ca214d0e06082ad8, []int{1}
}
func (m *HuntInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HuntInfo.Unmarshal(m, b)
}
func (m *HuntInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HuntInfo.Marshal(b, m, deterministic)
}
func (dst *HuntInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HuntInfo.Merge(dst, src)
}
func (m *HuntInfo) XXX_Size() int {
	return xxx_messageInfo_HuntInfo.Size(m)
}
func (m *HuntInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HuntInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HuntInfo proto.InternalMessageInfo

func (m *HuntInfo) GetHuntId() string {
	if m != nil {
		return m.HuntId
	}
	return ""
}

func (m *HuntInfo) GetScheduledTime() uint64 {
	if m != nil {
		return m.ScheduledTime
	}
	return 0
}

func (m *HuntInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *HuntInfo) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *HuntInfo) GetStartRequest() *proto1.FlowRunnerArgs {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *HuntInfo) GetState() Hunt_State {
	if m != nil {
		return m.State
	}
	return Hunt_PENDING
}

func init() {
	proto.RegisterType((*Hunt)(nil), "proto.Hunt")
	proto.RegisterType((*HuntInfo)(nil), "proto.HuntInfo")
	proto.RegisterEnum("proto.Hunt_State", Hunt_State_name, Hunt_State_value)
}

func init() { proto.RegisterFile("hunts.proto", fileDescriptor_hunts_ca214d0e06082ad8) }

var fileDescriptor_hunts_ca214d0e06082ad8 = []byte{
	// 948 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6b, 0x24, 0x45,
	0x17, 0x7e, 0x7b, 0xde, 0x7c, 0xf6, 0xec, 0x2e, 0x6b, 0x61, 0xc8, 0xb0, 0x41, 0x38, 0xb4, 0x88,
	0xd9, 0x35, 0x74, 0x62, 0x84, 0x15, 0x82, 0xab, 0xe6, 0x53, 0x47, 0x86, 0x6c, 0xd2, 0x33, 0x46,
	0x44, 0x96, 0xa1, 0xd2, 0x75, 0x3a, 0x53, 0x50, 0x5d, 0x95, 0x54, 0x55, 0xa7, 0x0d, 0xcb, 0x0a,
	0xde, 0x79, 0xed, 0x0f, 0xf1, 0xce, 0x7f, 0xe0, 0x4f, 0xf0, 0x07, 0xc8, 0x7a, 0xe5, 0xbd, 0x77,
	0x7a, 0x21, 0x55, 0xd5, 0x33, 0x09, 0x89, 0x1b, 0xd6, 0xab, 0x99, 0xd3, 0x75, 0xce, 0x73, 0x9e,
	0xf3, 0x9c, 0x8f, 0xb8, 0x3d, 0xaa, 0xa4, 0x35, 0xe9, 0xa9, 0x56, 0x56, 0x91, 0x69, 0xff, 0xf3,
	0x60, 0xa3, 0xae, 0xeb, 0xf4, 0x1c, 0x85, 0xca, 0x39, 0xc3, 0x6f, 0xd3, 0x5c, 0x95, 0xab, 0x27,
	0x4a, 0x50, 0x79, 0xb2, 0x1a, 0x3e, 0x6a, 0x7a, 0x6a, 0x95, 0x5e, 0xf5, 0xce, 0xab, 0x06, 0x4b,
	0x2a, 0x2d, 0xcf, 0x03, 0xc4, 0x83, 0x27, 0xaf, 0x17, 0x5b, 0x08, 0x55, 0x9b, 0x06, 0xc1, 0xff,
	0xff, 0x6f, 0xe1, 0x34, 0xb7, 0x5c, 0xc9, 0x31, 0xc0, 0xf9, 0x99, 0x08, 0xe1, 0xc9, 0x8f, 0x71,
	0x3c, 0xf5, 0x79, 0x25, 0x2d, 0x59, 0x8c, 0x67, 0x5d, 0x61, 0x43, 0xce, 0x3a, 0x11, 0x44, 0xcb,
	0xf3, 0xd9, 0x8c, 0x33, 0xbb, 0x8c, 0xec, 0xc4, 0xed, 0x5c, 0x23, 0xb5, 0x38, 0xb4, 0xbc, 0xc4,
	0x4e, 0x0b, 0xa2, 0xe5, 0xa9, 0xad, 0xb7, 0x5f, 0xfe, 0xfd, 0xfb, 0x2f, 0xd1, 0x5b, 0x64, 0xe9,
	0xab, 0x11, 0x4a, 0xb0, 0x23, 0x6e, 0xc0, 0xb9, 0x43, 0x4d, 0x0d, 0x04, 0x6f, 0x96, 0x66, 0x71,
	0xf8, 0x37, 0xe0, 0x25, 0x92, 0x1f, 0xa2, 0xf8, 0xae, 0xb1, 0x54, 0xdb, 0xa1, 0xc6, 0xb3, 0x0a,
	0x8d, 0xed, 0xfc, 0x1f, 0xa2, 0xe5, 0xf6, 0xfa, 0x42, 0xe0, 0x91, 0xee, 0x09, 0x55, 0x67, 0x95,
	0x94, 0xa8, 0x37, 0xf5, 0x89, 0xd9, 0xea, 0x79, 0xfc, 0x3d, 0xf2, 0x61, 0x8f, 0x56, 0x32, 0x1f,
	0x85, 0x0c, 0xae, 0x6c, 0x50, 0x2e, 0x1d, 0x42, 0x2e, 0x38, 0x4a, 0x0b, 0xbc, 0x08, 0x96, 0x92,
	0x8c, 0xbb, 0x02, 0x81, 0x1b, 0xb0, 0xba, 0xc2, 0xa4, 0xdd, 0x04, 0x7a, 0xdc, 0x3b, 0x3e, 0x73,
	0x16, 0x12, 0x93, 0x9f, 0x5b, 0xf1, 0x9b, 0x0e, 0x6a, 0x38, 0x89, 0x1a, 0x9e, 0x55, 0xa8, 0x2f,
	0x3a, 0x53, 0x9e, 0xd1, 0x62, 0xc3, 0xe8, 0xe8, 0xb0, 0xb7, 0xad, 0x84, 0xc0, 0xdc, 0xaa, 0xc0,
	0xe9, 0x8f, 0xc8, 0x93, 0x7a, 0x19, 0x91, 0x62, 0x13, 0x8e, 0x0e, 0x7b, 0xe0, 0xa3, 0xc0, 0x2a,
	0xd0, 0x95, 0x04, 0x2e, 0x41, 0x69, 0x86, 0xda, 0xd9, 0x79, 0x88, 0x03, 0x2e, 0x0b, 0xa5, 0x4b,
	0xea, 0x89, 0x15, 0x4a, 0x03, 0x43, 0x8b, 0xba, 0xe4, 0x92, 0xcb, 0x93, 0x31, 0x73, 0xaf, 0x1a,
	0x3d, 0x3d, 0x15, 0x1c, 0x8d, 0x0b, 0xf5, 0x85, 0x86, 0xe2, 0xd2, 0x64, 0x61, 0x3b, 0x54, 0xd9,
	0xe7, 0x0c, 0x61, 0x7b, 0xcc, 0x76, 0x9d, 0x3e, 0x4f, 0x0e, 0x5d, 0xea, 0x64, 0x03, 0xbe, 0x79,
	0x9e, 0x1c, 0x1d, 0xf6, 0x92, 0x0d, 0x48, 0xfa, 0xbb, 0xbd, 0xdd, 0xed, 0x01, 0x3c, 0xed, 0xaf,
	0xc0, 0xa6, 0xce, 0x47, 0xdc, 0x62, 0x6e, 0x2b, 0x8d, 0x2b, 0xb0, 0x77, 0xc6, 0xe4, 0x0a, 0x1c,
	0x08, 0x6a, 0x1d, 0x99, 0x15, 0xa7, 0x55, 0xc1, 0x4f, 0xd2, 0x00, 0x3d, 0x14, 0xf4, 0x18, 0x85,
	0x81, 0x42, 0xab, 0xd2, 0xd3, 0x5d, 0x7e, 0x98, 0xbc, 0x78, 0xf6, 0x22, 0x23, 0x4e, 0xa0, 0x49,
	0x46, 0x9f, 0x8d, 0xfc, 0xda, 0x8a, 0x97, 0x0c, 0xea, 0x73, 0xd4, 0x43, 0xc3, 0x19, 0xde, 0x90,
	0x6f, 0xfa, 0x76, 0xf9, 0xfe, 0x0a, 0xf2, 0xfd, 0x19, 0x91, 0x9f, 0xa2, 0xab, 0xfa, 0xd5, 0x23,
	0x9e, 0x8f, 0x9c, 0x84, 0x06, 0x02, 0x3a, 0x38, 0xf4, 0x71, 0x9f, 0x35, 0x9a, 0x4a, 0x58, 0x03,
	0x2a, 0xc8, 0xf5, 0x6f, 0x7d, 0x4b, 0xa1, 0x5b, 0x00, 0x95, 0x17, 0xa0, 0x55, 0x6d, 0x80, 0x6a,
	0x17, 0x64, 0x2b, 0x2d, 0x91, 0xb9, 0x10, 0x79, 0x73, 0x40, 0x18, 0x62, 0x89, 0x0c, 0x8a, 0x4a,
	0x14, 0x5c, 0x08, 0x64, 0x40, 0x25, 0xbb, 0x6c, 0x46, 0xcd, 0x85, 0x80, 0x63, 0x04, 0x93, 0x8f,
	0x90, 0x55, 0x02, 0x59, 0x9a, 0x2c, 0xf4, 0x03, 0xb1, 0x6b, 0x7d, 0x78, 0x74, 0x4b, 0x1f, 0x1e,
	0x05, 0x49, 0x1d, 0x25, 0x2f, 0x68, 0x27, 0xd4, 0xe6, 0x10, 0xae, 0xc9, 0xfa, 0x75, 0x7c, 0x27,
	0x6f, 0x7a, 0xc1, 0x4b, 0x6e, 0x3b, 0x33, 0x7e, 0xc1, 0x1e, 0x7b, 0xb1, 0xd6, 0x48, 0x3a, 0x50,
	0x96, 0x0a, 0x90, 0x55, 0x79, 0x8c, 0xda, 0xa9, 0x10, 0x7c, 0xcd, 0xd5, 0x9d, 0x73, 0x84, 0xdd,
	0x08, 0x2a, 0x99, 0x66, 0xed, 0xf0, 0xde, 0x73, 0x50, 0xe4, 0x59, 0xdc, 0x98, 0x43, 0x4d, 0x2d,
	0x76, 0x66, 0x3d, 0xf2, 0x47, 0x1e, 0xf9, 0x31, 0x59, 0x0b, 0xc8, 0x63, 0xbc, 0x53, 0xd4, 0x50,
	0x72, 0x59, 0x59, 0x04, 0x3b, 0xa2, 0x57, 0x50, 0xc7, 0xc2, 0xa4, 0xeb, 0xad, 0xf5, 0xb5, 0x2c,
	0x0e, 0xfe, 0x19, 0xb5, 0x48, 0xbe, 0x8b, 0x17, 0xad, 0xc3, 0x18, 0x36, 0x18, 0xc3, 0x89, 0x64,
	0x9d, 0x79, 0x9f, 0x6a, 0xcf, 0xa7, 0xfa, 0x94, 0x7c, 0x3c, 0x18, 0x21, 0xd8, 0x57, 0x14, 0x92,
	0x57, 0x5a, 0xa3, 0xb4, 0xe2, 0xe2, 0x52, 0x71, 0xbf, 0x2c, 0x93, 0x02, 0xd3, 0x6c, 0xc1, 0xc7,
	0x86, 0x89, 0x35, 0xfd, 0xb1, 0x17, 0x79, 0x37, 0x9e, 0x36, 0xd6, 0x15, 0x36, 0x07, 0xd1, 0xf2,
	0xbd, 0xf5, 0x37, 0x9a, 0xc9, 0x73, 0xe7, 0x2c, 0xed, 0xbb, 0x87, 0x2c, 0xbc, 0x27, 0x69, 0x3c,
	0xed, 0x6d, 0xd2, 0x8e, 0x67, 0x0f, 0x76, 0xf7, 0x77, 0xba, 0xfb, 0x9f, 0xdd, 0xff, 0x9f, 0x33,
	0xb2, 0x2f, 0xf7, 0xf7, 0x9d, 0x11, 0x39, 0xa3, 0x3f, 0x78, 0x7a, 0x70, 0xb0, 0xbb, 0x73, 0xbf,
	0x95, 0xfc, 0xd6, 0x8a, 0xe7, 0x1c, 0x4a, 0x57, 0x16, 0xea, 0xd5, 0x87, 0xf1, 0x9d, 0xf8, 0xde,
	0x84, 0xf1, 0x95, 0xdb, 0x98, 0xdd, 0x9d, 0x7c, 0xf5, 0x97, 0x6f, 0x29, 0x9e, 0x6f, 0x9a, 0xc0,
	0x99, 0x3f, 0x7a, 0xf3, 0xd9, 0x5c, 0xf8, 0xd0, 0x65, 0xe4, 0x8b, 0x78, 0xd6, 0x8f, 0x34, 0x67,
	0x7e, 0x7d, 0xe6, 0xb7, 0xde, 0xf7, 0x92, 0xbd, 0x47, 0x1e, 0x0e, 0x9a, 0x69, 0x6f, 0xba, 0x41,
	0x0d, 0x08, 0x7f, 0xd1, 0x6e, 0xaa, 0x33, 0xe3, 0xdc, 0xba, 0x8c, 0x7c, 0x7f, 0xe3, 0xc4, 0x4e,
	0xdd, 0x76, 0x62, 0x77, 0x7d, 0xa6, 0x4f, 0xc8, 0x93, 0x6b, 0x99, 0x9a, 0xf1, 0x0f, 0x03, 0x75,
	0xf5, 0xd6, 0xd6, 0x6e, 0x99, 0xb8, 0x75, 0x1b, 0x74, 0xb9, 0x1b, 0xd7, 0x6e, 0xeb, 0xeb, 0xb6,
	0xe4, 0x78, 0xc6, 0x3f, 0x7c, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x58, 0x63, 0x80,
	0x4e, 0x07, 0x00, 0x00,
}
