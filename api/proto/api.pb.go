// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import proto2 "www.velocidex.com/golang/velociraptor/actions/proto"
import proto3 "www.velocidex.com/golang/velociraptor/artifacts/proto"
import proto1 "www.velocidex.com/golang/velociraptor/flows/proto"
import _ "www.velocidex.com/golang/velociraptor/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartFlowResponse struct {
	FlowId               string                 `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	RunnerArgs           *proto1.FlowRunnerArgs `protobuf:"bytes,2,opt,name=runner_args,json=runnerArgs,proto3" json:"runner_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StartFlowResponse) Reset()         { *m = StartFlowResponse{} }
func (m *StartFlowResponse) String() string { return proto.CompactTextString(m) }
func (*StartFlowResponse) ProtoMessage()    {}
func (*StartFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_55d903dedd065032, []int{0}
}
func (m *StartFlowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartFlowResponse.Unmarshal(m, b)
}
func (m *StartFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartFlowResponse.Marshal(b, m, deterministic)
}
func (dst *StartFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartFlowResponse.Merge(dst, src)
}
func (m *StartFlowResponse) XXX_Size() int {
	return xxx_messageInfo_StartFlowResponse.Size(m)
}
func (m *StartFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartFlowResponse proto.InternalMessageInfo

func (m *StartFlowResponse) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *StartFlowResponse) GetRunnerArgs() *proto1.FlowRunnerArgs {
	if m != nil {
		return m.RunnerArgs
	}
	return nil
}

type Approval struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Approval) Reset()         { *m = Approval{} }
func (m *Approval) String() string { return proto.CompactTextString(m) }
func (*Approval) ProtoMessage()    {}
func (*Approval) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_55d903dedd065032, []int{1}
}
func (m *Approval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Approval.Unmarshal(m, b)
}
func (m *Approval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Approval.Marshal(b, m, deterministic)
}
func (dst *Approval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approval.Merge(dst, src)
}
func (m *Approval) XXX_Size() int {
	return xxx_messageInfo_Approval.Size(m)
}
func (m *Approval) XXX_DiscardUnknown() {
	xxx_messageInfo_Approval.DiscardUnknown(m)
}

var xxx_messageInfo_Approval proto.InternalMessageInfo

func (m *Approval) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ApprovalList struct {
	Items                []*Approval `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ApprovalList) Reset()         { *m = ApprovalList{} }
func (m *ApprovalList) String() string { return proto.CompactTextString(m) }
func (*ApprovalList) ProtoMessage()    {}
func (*ApprovalList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_55d903dedd065032, []int{2}
}
func (m *ApprovalList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApprovalList.Unmarshal(m, b)
}
func (m *ApprovalList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApprovalList.Marshal(b, m, deterministic)
}
func (dst *ApprovalList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovalList.Merge(dst, src)
}
func (m *ApprovalList) XXX_Size() int {
	return xxx_messageInfo_ApprovalList.Size(m)
}
func (m *ApprovalList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovalList.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovalList proto.InternalMessageInfo

func (m *ApprovalList) GetItems() []*Approval {
	if m != nil {
		return m.Items
	}
	return nil
}

type VFSRefreshDirectoryRequest struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	VfsPath              string   `protobuf:"bytes,2,opt,name=vfs_path,json=vfsPath,proto3" json:"vfs_path,omitempty"`
	Depth                uint64   `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VFSRefreshDirectoryRequest) Reset()         { *m = VFSRefreshDirectoryRequest{} }
func (m *VFSRefreshDirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*VFSRefreshDirectoryRequest) ProtoMessage()    {}
func (*VFSRefreshDirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_55d903dedd065032, []int{3}
}
func (m *VFSRefreshDirectoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VFSRefreshDirectoryRequest.Unmarshal(m, b)
}
func (m *VFSRefreshDirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VFSRefreshDirectoryRequest.Marshal(b, m, deterministic)
}
func (dst *VFSRefreshDirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VFSRefreshDirectoryRequest.Merge(dst, src)
}
func (m *VFSRefreshDirectoryRequest) XXX_Size() int {
	return xxx_messageInfo_VFSRefreshDirectoryRequest.Size(m)
}
func (m *VFSRefreshDirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VFSRefreshDirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VFSRefreshDirectoryRequest proto.InternalMessageInfo

func (m *VFSRefreshDirectoryRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VFSRefreshDirectoryRequest) GetVfsPath() string {
	if m != nil {
		return m.VfsPath
	}
	return ""
}

func (m *VFSRefreshDirectoryRequest) GetDepth() uint64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type VFSFileBuffer struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	VfsPath              string   `protobuf:"bytes,2,opt,name=vfs_path,json=vfsPath,proto3" json:"vfs_path,omitempty"`
	Offset               uint64   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               uint32   `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VFSFileBuffer) Reset()         { *m = VFSFileBuffer{} }
func (m *VFSFileBuffer) String() string { return proto.CompactTextString(m) }
func (*VFSFileBuffer) ProtoMessage()    {}
func (*VFSFileBuffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_55d903dedd065032, []int{4}
}
func (m *VFSFileBuffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VFSFileBuffer.Unmarshal(m, b)
}
func (m *VFSFileBuffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VFSFileBuffer.Marshal(b, m, deterministic)
}
func (dst *VFSFileBuffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VFSFileBuffer.Merge(dst, src)
}
func (m *VFSFileBuffer) XXX_Size() int {
	return xxx_messageInfo_VFSFileBuffer.Size(m)
}
func (m *VFSFileBuffer) XXX_DiscardUnknown() {
	xxx_messageInfo_VFSFileBuffer.DiscardUnknown(m)
}

var xxx_messageInfo_VFSFileBuffer proto.InternalMessageInfo

func (m *VFSFileBuffer) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *VFSFileBuffer) GetVfsPath() string {
	if m != nil {
		return m.VfsPath
	}
	return ""
}

func (m *VFSFileBuffer) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *VFSFileBuffer) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *VFSFileBuffer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotificationRequest struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	NotifyAll            bool     `protobuf:"varint,2,opt,name=notify_all,json=notifyAll,proto3" json:"notify_all,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotificationRequest) Reset()         { *m = NotificationRequest{} }
func (m *NotificationRequest) String() string { return proto.CompactTextString(m) }
func (*NotificationRequest) ProtoMessage()    {}
func (*NotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_55d903dedd065032, []int{5}
}
func (m *NotificationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationRequest.Unmarshal(m, b)
}
func (m *NotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationRequest.Marshal(b, m, deterministic)
}
func (dst *NotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationRequest.Merge(dst, src)
}
func (m *NotificationRequest) XXX_Size() int {
	return xxx_messageInfo_NotificationRequest.Size(m)
}
func (m *NotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationRequest proto.InternalMessageInfo

func (m *NotificationRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NotificationRequest) GetNotifyAll() bool {
	if m != nil {
		return m.NotifyAll
	}
	return false
}

func init() {
	proto.RegisterType((*StartFlowResponse)(nil), "proto.StartFlowResponse")
	proto.RegisterType((*Approval)(nil), "proto.Approval")
	proto.RegisterType((*ApprovalList)(nil), "proto.ApprovalList")
	proto.RegisterType((*VFSRefreshDirectoryRequest)(nil), "proto.VFSRefreshDirectoryRequest")
	proto.RegisterType((*VFSFileBuffer)(nil), "proto.VFSFileBuffer")
	proto.RegisterType((*NotificationRequest)(nil), "proto.NotificationRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Hunts
	CreateHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*StartFlowResponse, error)
	ListHunts(ctx context.Context, in *ListHuntsRequest, opts ...grpc.CallOption) (*ListHuntsResponse, error)
	GetHunt(ctx context.Context, in *GetHuntRequest, opts ...grpc.CallOption) (*Hunt, error)
	ModifyHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*empty.Empty, error)
	GetHuntResults(ctx context.Context, in *GetHuntResultsRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Clients.
	NotifyClients(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	LabelClients(ctx context.Context, in *LabelClientsRequest, opts ...grpc.CallOption) (*APIResponse, error)
	ListClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*SearchClientsResponse, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApiClient, error)
	GetClientFlows(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowResponse, error)
	GetClientApprovalForUser(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApprovalList, error)
	// Users
	GetUserUITraits(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ApiGrrUser, error)
	GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error)
	GetUserNotificationCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserNotificationCount, error)
	// VFS
	VFSListDirectory(ctx context.Context, in *proto1.VFSListRequest, opts ...grpc.CallOption) (*proto2.VQLResponse, error)
	VFSRefreshDirectory(ctx context.Context, in *VFSRefreshDirectoryRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	VFSGetBuffer(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*VFSFileBuffer, error)
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Flows
	LaunchFlow(ctx context.Context, in *proto1.FlowRunnerArgs, opts ...grpc.CallOption) (*StartFlowResponse, error)
	CancelFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error)
	GetFlowDetails(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlow, error)
	GetFlowRequests(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowRequestDetails, error)
	GetFlowDescriptors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FlowDescriptors, error)
	DescribeTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto3.Types, error)
	// Artifacts
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*proto3.ArtifactDescriptors, error)
	GetArtifactFile(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
	SetArtifactFile(ctx context.Context, in *SetArtifactRequest, opts ...grpc.CallOption) (*APIResponse, error)
	// Reporting and post processing.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	// Streaming free form VQL
	Query(ctx context.Context, in *proto2.VQLCollectorArgs, opts ...grpc.CallOption) (API_QueryClient, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service..
	GetServerMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service.
	SetServerMonitoringState(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	GetClientMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	SetClientMonitoringState(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListHunts(ctx context.Context, in *ListHuntsRequest, opts ...grpc.CallOption) (*ListHuntsResponse, error) {
	out := new(ListHuntsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListHunts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHunt(ctx context.Context, in *GetHuntRequest, opts ...grpc.CallOption) (*Hunt, error) {
	out := new(Hunt)
	err := c.cc.Invoke(ctx, "/proto.API/GetHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ModifyHunt(ctx context.Context, in *Hunt, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/ModifyHunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetHuntResults(ctx context.Context, in *GetHuntResultsRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetHuntResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NotifyClients(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.API/NotifyClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LabelClients(ctx context.Context, in *LabelClientsRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.API/LabelClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListClients(ctx context.Context, in *SearchClientsRequest, opts ...grpc.CallOption) (*SearchClientsResponse, error) {
	out := new(SearchClientsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApiClient, error) {
	out := new(ApiClient)
	err := c.cc.Invoke(ctx, "/proto.API/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientFlows(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowResponse, error) {
	out := new(ApiFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientFlows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientApprovalForUser(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ApprovalList, error) {
	out := new(ApprovalList)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientApprovalForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserUITraits(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ApiGrrUser, error) {
	out := new(ApiGrrUser)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserUITraits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error) {
	out := new(GetUserNotificationsResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserNotificationCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserNotificationCount, error) {
	out := new(UserNotificationCount)
	err := c.cc.Invoke(ctx, "/proto.API/GetUserNotificationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSListDirectory(ctx context.Context, in *proto1.VFSListRequest, opts ...grpc.CallOption) (*proto2.VQLResponse, error) {
	out := new(proto2.VQLResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSRefreshDirectory(ctx context.Context, in *VFSRefreshDirectoryRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/VFSRefreshDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) VFSGetBuffer(ctx context.Context, in *VFSFileBuffer, opts ...grpc.CallOption) (*VFSFileBuffer, error) {
	out := new(VFSFileBuffer)
	err := c.cc.Invoke(ctx, "/proto.API/VFSGetBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LaunchFlow(ctx context.Context, in *proto1.FlowRunnerArgs, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/LaunchFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CancelFlow(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*StartFlowResponse, error) {
	out := new(StartFlowResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CancelFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowDetails(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlow, error) {
	out := new(ApiFlow)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowRequests(ctx context.Context, in *ApiFlowRequest, opts ...grpc.CallOption) (*ApiFlowRequestDetails, error) {
	out := new(ApiFlowRequestDetails)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFlowDescriptors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FlowDescriptors, error) {
	out := new(FlowDescriptors)
	err := c.cc.Invoke(ctx, "/proto.API/GetFlowDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DescribeTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto3.Types, error) {
	out := new(proto3.Types)
	err := c.cc.Invoke(ctx, "/proto.API/DescribeTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*proto3.ArtifactDescriptors, error) {
	out := new(proto3.ArtifactDescriptors)
	err := c.cc.Invoke(ctx, "/proto.API/GetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetArtifactFile(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetArtifactFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetArtifactFile(ctx context.Context, in *SetArtifactRequest, opts ...grpc.CallOption) (*APIResponse, error) {
	out := new(APIResponse)
	err := c.cc.Invoke(ctx, "/proto.API/SetArtifactFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, "/proto.API/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Query(ctx context.Context, in *proto2.VQLCollectorArgs, opts ...grpc.CallOption) (API_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/proto.API/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_QueryClient interface {
	Recv() (*proto2.VQLResponse, error)
	grpc.ClientStream
}

type aPIQueryClient struct {
	grpc.ClientStream
}

func (x *aPIQueryClient) Recv() (*proto2.VQLResponse, error) {
	m := new(proto2.VQLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetServerMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error) {
	out := new(proto1.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/GetServerMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetServerMonitoringState(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error) {
	out := new(proto1.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/SetServerMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetClientMonitoringState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error) {
	out := new(proto1.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/GetClientMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetClientMonitoringState(ctx context.Context, in *proto1.ArtifactCollectorArgs, opts ...grpc.CallOption) (*proto1.ArtifactCollectorArgs, error) {
	out := new(proto1.ArtifactCollectorArgs)
	err := c.cc.Invoke(ctx, "/proto.API/SetClientMonitoringState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Hunts
	CreateHunt(context.Context, *Hunt) (*StartFlowResponse, error)
	ListHunts(context.Context, *ListHuntsRequest) (*ListHuntsResponse, error)
	GetHunt(context.Context, *GetHuntRequest) (*Hunt, error)
	ModifyHunt(context.Context, *Hunt) (*empty.Empty, error)
	GetHuntResults(context.Context, *GetHuntResultsRequest) (*GetTableResponse, error)
	// Clients.
	NotifyClients(context.Context, *NotificationRequest) (*empty.Empty, error)
	LabelClients(context.Context, *LabelClientsRequest) (*APIResponse, error)
	ListClients(context.Context, *SearchClientsRequest) (*SearchClientsResponse, error)
	GetClient(context.Context, *GetClientRequest) (*ApiClient, error)
	GetClientFlows(context.Context, *ApiFlowRequest) (*ApiFlowResponse, error)
	GetClientApprovalForUser(context.Context, *GetClientRequest) (*ApprovalList, error)
	// Users
	GetUserUITraits(context.Context, *empty.Empty) (*ApiGrrUser, error)
	GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error)
	GetUserNotificationCount(context.Context, *empty.Empty) (*UserNotificationCount, error)
	// VFS
	VFSListDirectory(context.Context, *proto1.VFSListRequest) (*proto2.VQLResponse, error)
	VFSRefreshDirectory(context.Context, *VFSRefreshDirectoryRequest) (*StartFlowResponse, error)
	VFSGetBuffer(context.Context, *VFSFileBuffer) (*VFSFileBuffer, error)
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	// Flows
	LaunchFlow(context.Context, *proto1.FlowRunnerArgs) (*StartFlowResponse, error)
	CancelFlow(context.Context, *ApiFlowRequest) (*StartFlowResponse, error)
	GetFlowDetails(context.Context, *ApiFlowRequest) (*ApiFlow, error)
	GetFlowRequests(context.Context, *ApiFlowRequest) (*ApiFlowRequestDetails, error)
	GetFlowDescriptors(context.Context, *empty.Empty) (*FlowDescriptors, error)
	DescribeTypes(context.Context, *empty.Empty) (*proto3.Types, error)
	// Artifacts
	GetArtifacts(context.Context, *GetArtifactsRequest) (*proto3.ArtifactDescriptors, error)
	GetArtifactFile(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
	SetArtifactFile(context.Context, *SetArtifactRequest) (*APIResponse, error)
	// Reporting and post processing.
	GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error)
	// Streaming free form VQL
	Query(*proto2.VQLCollectorArgs, API_QueryServer) error
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service..
	GetServerMonitoringState(context.Context, *empty.Empty) (*proto1.ArtifactCollectorArgs, error)
	// Server Monitoring Artifacts - manage the Server Monitoring
	// Service.
	SetServerMonitoringState(context.Context, *proto1.ArtifactCollectorArgs) (*proto1.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	GetClientMonitoringState(context.Context, *empty.Empty) (*proto1.ArtifactCollectorArgs, error)
	// Client Monitoring Artifacts - manage the Client Monitoring
	// Service.
	SetClientMonitoringState(context.Context, *proto1.ArtifactCollectorArgs) (*proto1.ArtifactCollectorArgs, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateHunt(ctx, req.(*Hunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListHunts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHuntsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListHunts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListHunts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListHunts(ctx, req.(*ListHuntsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHunt(ctx, req.(*GetHuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ModifyHunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ModifyHunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ModifyHunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ModifyHunt(ctx, req.(*Hunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetHuntResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuntResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetHuntResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetHuntResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetHuntResults(ctx, req.(*GetHuntResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NotifyClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NotifyClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/NotifyClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NotifyClients(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LabelClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LabelClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/LabelClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LabelClients(ctx, req.(*LabelClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListClients(ctx, req.(*SearchClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientFlows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientFlows(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientApprovalForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientApprovalForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientApprovalForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientApprovalForUser(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserUITraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserUITraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserUITraits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserUITraits(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserNotifications(ctx, req.(*GetUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserNotificationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserNotificationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetUserNotificationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserNotificationCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.VFSListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSListDirectory(ctx, req.(*proto1.VFSListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSRefreshDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSRefreshDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSRefreshDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSRefreshDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSRefreshDirectory(ctx, req.(*VFSRefreshDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_VFSGetBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VFSFileBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).VFSGetBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/VFSGetBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).VFSGetBuffer(ctx, req.(*VFSFileBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LaunchFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.FlowRunnerArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LaunchFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/LaunchFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LaunchFlow(ctx, req.(*proto1.FlowRunnerArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CancelFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CancelFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CancelFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CancelFlow(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowDetails(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowRequests(ctx, req.(*ApiFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFlowDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFlowDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetFlowDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFlowDescriptors(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DescribeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DescribeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/DescribeTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DescribeTypes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetArtifactFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetArtifactFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetArtifactFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetArtifactFile(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetArtifactFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetArtifactFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetArtifactFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetArtifactFile(ctx, req.(*SetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto2.VQLCollectorArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Query(m, &aPIQueryServer{stream})
}

type API_QueryServer interface {
	Send(*proto2.VQLResponse) error
	grpc.ServerStream
}

type aPIQueryServer struct {
	grpc.ServerStream
}

func (x *aPIQueryServer) Send(m *proto2.VQLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetServerMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetServerMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetServerMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetServerMonitoringState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetServerMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ArtifactCollectorArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetServerMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetServerMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetServerMonitoringState(ctx, req.(*proto1.ArtifactCollectorArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetClientMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetClientMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetClientMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetClientMonitoringState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetClientMonitoringState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ArtifactCollectorArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetClientMonitoringState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/SetClientMonitoringState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetClientMonitoringState(ctx, req.(*proto1.ArtifactCollectorArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHunt",
			Handler:    _API_CreateHunt_Handler,
		},
		{
			MethodName: "ListHunts",
			Handler:    _API_ListHunts_Handler,
		},
		{
			MethodName: "GetHunt",
			Handler:    _API_GetHunt_Handler,
		},
		{
			MethodName: "ModifyHunt",
			Handler:    _API_ModifyHunt_Handler,
		},
		{
			MethodName: "GetHuntResults",
			Handler:    _API_GetHuntResults_Handler,
		},
		{
			MethodName: "NotifyClients",
			Handler:    _API_NotifyClients_Handler,
		},
		{
			MethodName: "LabelClients",
			Handler:    _API_LabelClients_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _API_ListClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _API_GetClient_Handler,
		},
		{
			MethodName: "GetClientFlows",
			Handler:    _API_GetClientFlows_Handler,
		},
		{
			MethodName: "GetClientApprovalForUser",
			Handler:    _API_GetClientApprovalForUser_Handler,
		},
		{
			MethodName: "GetUserUITraits",
			Handler:    _API_GetUserUITraits_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _API_GetUserNotifications_Handler,
		},
		{
			MethodName: "GetUserNotificationCount",
			Handler:    _API_GetUserNotificationCount_Handler,
		},
		{
			MethodName: "VFSListDirectory",
			Handler:    _API_VFSListDirectory_Handler,
		},
		{
			MethodName: "VFSRefreshDirectory",
			Handler:    _API_VFSRefreshDirectory_Handler,
		},
		{
			MethodName: "VFSGetBuffer",
			Handler:    _API_VFSGetBuffer_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _API_GetTable_Handler,
		},
		{
			MethodName: "LaunchFlow",
			Handler:    _API_LaunchFlow_Handler,
		},
		{
			MethodName: "CancelFlow",
			Handler:    _API_CancelFlow_Handler,
		},
		{
			MethodName: "GetFlowDetails",
			Handler:    _API_GetFlowDetails_Handler,
		},
		{
			MethodName: "GetFlowRequests",
			Handler:    _API_GetFlowRequests_Handler,
		},
		{
			MethodName: "GetFlowDescriptors",
			Handler:    _API_GetFlowDescriptors_Handler,
		},
		{
			MethodName: "DescribeTypes",
			Handler:    _API_DescribeTypes_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _API_GetArtifacts_Handler,
		},
		{
			MethodName: "GetArtifactFile",
			Handler:    _API_GetArtifactFile_Handler,
		},
		{
			MethodName: "SetArtifactFile",
			Handler:    _API_SetArtifactFile_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _API_GetReport_Handler,
		},
		{
			MethodName: "GetServerMonitoringState",
			Handler:    _API_GetServerMonitoringState_Handler,
		},
		{
			MethodName: "SetServerMonitoringState",
			Handler:    _API_SetServerMonitoringState_Handler,
		},
		{
			MethodName: "GetClientMonitoringState",
			Handler:    _API_GetClientMonitoringState_Handler,
		},
		{
			MethodName: "SetClientMonitoringState",
			Handler:    _API_SetClientMonitoringState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _API_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_55d903dedd065032) }

var fileDescriptor_api_55d903dedd065032 = []byte{
	// 1499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x0f, 0x13, 0xdb, 0xb1, 0x56, 0x76, 0x1c, 0xaf, 0x1d, 0x49, 0x96, 0x95, 0x67, 0x9a, 0x2f,
	0x7e, 0x11, 0xfc, 0x02, 0xe9, 0x3d, 0x17, 0x69, 0x83, 0xb4, 0x39, 0x48, 0x76, 0xe4, 0x18, 0x70,
	0x02, 0x9b, 0xb2, 0x85, 0xb6, 0x48, 0x60, 0xac, 0xa9, 0xa5, 0x44, 0x94, 0x26, 0x95, 0xe5, 0x4a,
	0xae, 0x1a, 0xe4, 0x92, 0xa2, 0x45, 0xef, 0x3d, 0xf5, 0x7b, 0xf4, 0x23, 0xf4, 0x1b, 0xf4, 0xde,
	0x43, 0xdb, 0x8f, 0xd1, 0x43, 0xb1, 0xff, 0x28, 0x92, 0xa2, 0xec, 0x18, 0x48, 0x4f, 0xe2, 0xce,
	0xec, 0xfc, 0x7e, 0x33, 0xb3, 0xb3, 0x33, 0x2b, 0x90, 0x41, 0x3d, 0xa7, 0xd2, 0x23, 0x3e, 0xf5,
	0xe1, 0x34, 0xff, 0x29, 0xee, 0x9c, 0x9f, 0x9f, 0x57, 0x06, 0xd8, 0xf5, 0x2d, 0xa7, 0x8d, 0xbf,
	0xae, 0x58, 0xfe, 0x59, 0xb5, 0xe3, 0xbb, 0xc8, 0xeb, 0x54, 0x85, 0x90, 0xa0, 0x1e, 0xf5, 0x49,
	0x15, 0x11, 0xea, 0xd8, 0xc8, 0xa2, 0x41, 0x95, 0x9b, 0x85, 0x6b, 0x01, 0x56, 0xac, 0xbd, 0x1f,
	0x8a, 0xed, 0xfa, 0xe7, 0x49, 0x84, 0x40, 0x42, 0x3c, 0xb9, 0x3a, 0x04, 0xff, 0x96, 0xe6, 0x9f,
	0x5e, 0xdd, 0x7c, 0x60, 0x2b, 0xe3, 0xc7, 0xef, 0x67, 0x2c, 0xcc, 0x02, 0x7c, 0x86, 0x3c, 0xea,
	0x58, 0x57, 0xf3, 0x1b, 0x59, 0xd4, 0xf1, 0xbd, 0x90, 0xfa, 0xb5, 0x2b, 0xcd, 0x4b, 0x1d, 0xdf,
	0xef, 0xb8, 0xb8, 0x8a, 0x7a, 0x4e, 0x15, 0x79, 0x9e, 0x4f, 0x11, 0xdf, 0x27, 0xb5, 0xab, 0x52,
	0xcb, 0x57, 0xa7, 0x7d, 0xbb, 0x8a, 0xcf, 0x7a, 0x74, 0x28, 0x95, 0x0b, 0xc9, 0x14, 0xce, 0x5b,
	0xae, 0x83, 0xbd, 0x70, 0x99, 0xed, 0xf6, 0x23, 0x8b, 0x68, 0xb2, 0xb2, 0xfd, 0x00, 0x13, 0xb5,
	0xc8, 0x58, 0xc1, 0x40, 0x7c, 0x1a, 0x6d, 0xb0, 0xd8, 0xa4, 0x88, 0xd0, 0x86, 0xeb, 0x9f, 0x9b,
	0x38, 0xe8, 0xf9, 0x5e, 0x80, 0x61, 0x1e, 0xdc, 0x64, 0xb6, 0x27, 0x4e, 0xbb, 0xa0, 0xe9, 0x5a,
	0x39, 0x63, 0xce, 0xb0, 0xe5, 0x5e, 0x1b, 0x7e, 0x0c, 0xb2, 0xa4, 0xef, 0x79, 0x98, 0x9c, 0x20,
	0xd2, 0x09, 0x0a, 0xd7, 0x75, 0xad, 0x9c, 0xdd, 0xba, 0x23, 0xa0, 0x2a, 0x1c, 0x82, 0x6b, 0x6b,
	0xa4, 0x13, 0x98, 0x80, 0x84, 0xdf, 0x86, 0x01, 0x66, 0x6b, 0xbd, 0x1e, 0xf1, 0x07, 0xc8, 0x85,
	0x39, 0x30, 0x43, 0x30, 0x0a, 0x7c, 0x4f, 0x61, 0x8b, 0x95, 0xf1, 0x10, 0xcc, 0xa9, 0x3d, 0xfb,
	0x4e, 0x40, 0xe1, 0x06, 0x98, 0x76, 0x28, 0x3e, 0x0b, 0x0a, 0x9a, 0x7e, 0xa3, 0x9c, 0xdd, 0x5a,
	0x90, 0x2c, 0x6a, 0x8f, 0x29, 0xb4, 0xc6, 0x6f, 0x1a, 0x28, 0xb6, 0x1a, 0x4d, 0x13, 0xdb, 0x04,
	0x07, 0xdd, 0x1d, 0x87, 0x60, 0x8b, 0xfa, 0x64, 0x68, 0xe2, 0xd7, 0x7d, 0x1c, 0x50, 0x58, 0x07,
	0x19, 0x91, 0xa2, 0x30, 0x98, 0xfa, 0xc6, 0xef, 0x7f, 0xfd, 0xf1, 0x8b, 0xb6, 0x06, 0x66, 0xcc,
	0x9d, 0xc6, 0xb1, 0xf9, 0x02, 0xc2, 0xa3, 0x2e, 0xd6, 0xc5, 0x26, 0x9d, 0xfa, 0xba, 0xeb, 0x04,
	0xb4, 0xa8, 0x5d, 0x37, 0x67, 0x85, 0x68, 0xaf, 0x0d, 0xeb, 0x60, 0x76, 0x60, 0x07, 0x27, 0x3d,
	0x44, 0xbb, 0x3c, 0xe4, 0x4c, 0xfd, 0x3e, 0x87, 0x58, 0x87, 0x6b, 0xcc, 0xb4, 0xd5, 0x68, 0xea,
	0x07, 0x88, 0x76, 0x95, 0xb1, 0x6e, 0x3b, 0x2e, 0x0e, 0x74, 0xc7, 0xd3, 0x2b, 0xe6, 0xcd, 0x81,
	0x1d, 0x30, 0x1d, 0x7c, 0x04, 0xa6, 0xdb, 0xb8, 0x47, 0xbb, 0x85, 0x1b, 0xba, 0x56, 0x9e, 0xaa,
	0x1b, 0x1c, 0xa0, 0x04, 0x8b, 0x3b, 0x4c, 0xa8, 0xfb, 0xb6, 0xde, 0x56, 0x9e, 0xeb, 0x44, 0x84,
	0x62, 0x0a, 0x03, 0xe3, 0x67, 0x0d, 0xcc, 0xb7, 0x1a, 0xcd, 0x86, 0xe3, 0xe2, 0x7a, 0xdf, 0xb6,
	0x31, 0x81, 0xab, 0x63, 0x31, 0x7d, 0x60, 0x67, 0x73, 0x60, 0xc6, 0xb7, 0xed, 0x00, 0x53, 0xe1,
	0xad, 0x29, 0x57, 0x4c, 0xee, 0x62, 0xaf, 0x43, 0xbb, 0x85, 0x29, 0x5d, 0x2b, 0xcf, 0x9b, 0x72,
	0x05, 0x21, 0x98, 0x6a, 0x23, 0x8a, 0x0a, 0xd3, 0xba, 0x56, 0x9e, 0x33, 0xf9, 0xb7, 0x71, 0x08,
	0x96, 0x5e, 0xf8, 0xd4, 0xb1, 0x1d, 0x8b, 0x97, 0xb7, 0x3a, 0x8f, 0x0b, 0x7d, 0xbf, 0x0b, 0x80,
	0xc7, 0x6c, 0x86, 0x27, 0xc8, 0x75, 0xb9, 0xf7, 0xb3, 0x66, 0x46, 0x48, 0x6a, 0xae, 0xbb, 0xf5,
	0x6e, 0x15, 0xdc, 0xa8, 0x1d, 0xec, 0x41, 0x13, 0x80, 0x6d, 0x82, 0x11, 0xc5, 0xcf, 0xfa, 0x1e,
	0x85, 0x59, 0x59, 0x18, 0x6c, 0x51, 0x2c, 0xc8, 0xc5, 0x58, 0x4d, 0x1b, 0x77, 0xdf, 0xfd, 0xfa,
	0xe7, 0x8f, 0xd7, 0xf3, 0x06, 0xe4, 0xf7, 0x6e, 0xf0, 0xff, 0xea, 0x08, 0xe2, 0xb1, 0xb6, 0x09,
	0xbf, 0x00, 0x19, 0x56, 0x75, 0x6c, 0x19, 0xc0, 0xbc, 0x44, 0x09, 0x25, 0xd2, 0xfb, 0x10, 0x3e,
	0xa2, 0x90, 0xf0, 0x2b, 0x1c, 0x7e, 0x09, 0x2e, 0x2a, 0xf8, 0x11, 0x5a, 0x03, 0xdc, 0xdc, 0xc5,
	0xfc, 0x1b, 0xaa, 0xab, 0x22, 0xd7, 0x0a, 0x36, 0x1a, 0x82, 0x91, 0xe7, 0x48, 0x8b, 0x70, 0x41,
	0x21, 0x29, 0xe3, 0x03, 0x00, 0x9e, 0xfb, 0x6d, 0xc7, 0x1e, 0x8e, 0x87, 0x9d, 0xab, 0x88, 0xae,
	0x51, 0x51, 0x5d, 0xa3, 0xf2, 0x94, 0x75, 0x8d, 0xf1, 0xa0, 0x47, 0x00, 0x2c, 0xe8, 0x0e, 0xb8,
	0x15, 0x7a, 0x12, 0xf4, 0x5d, 0x1a, 0xc0, 0x52, 0xd2, 0x41, 0x2e, 0x56, 0x7e, 0xe6, 0x47, 0xda,
	0x23, 0x74, 0xea, 0xe2, 0x30, 0xfa, 0x7f, 0x71, 0x9e, 0x02, 0xcc, 0x25, 0x7c, 0x56, 0xb0, 0x6d,
	0x30, 0xcf, 0x8b, 0x61, 0xb8, 0x2d, 0xda, 0x15, 0x2c, 0x4a, 0xa4, 0x94, 0x12, 0x99, 0x18, 0xcc,
	0x1a, 0x27, 0x59, 0x31, 0x96, 0x15, 0x49, 0x14, 0x92, 0x85, 0x73, 0x02, 0xe6, 0xf6, 0xd1, 0x29,
	0x76, 0x93, 0x24, 0x51, 0xa1, 0x22, 0x81, 0xaa, 0x9d, 0x1c, 0xec, 0x85, 0x51, 0x8c, 0x11, 0x44,
	0x0d, 0x45, 0xbe, 0xb2, 0xec, 0x58, 0x15, 0xfe, 0xaa, 0x2a, 0x36, 0x8c, 0x88, 0xd5, 0x4d, 0x10,
	0x94, 0xd2, 0x95, 0xf1, 0x6a, 0x84, 0x77, 0x14, 0x55, 0x6c, 0x1b, 0x7c, 0x05, 0x32, 0xbb, 0x58,
	0xf2, 0xc0, 0x48, 0xd6, 0x85, 0x44, 0x51, 0xdc, 0x0e, 0x5b, 0xa2, 0x23, 0x14, 0xc6, 0x06, 0x87,
	0x5d, 0x83, 0x77, 0x23, 0xe7, 0x20, 0x54, 0xd5, 0x37, 0xe1, 0xb5, 0x7b, 0x0b, 0x7f, 0xd2, 0xf8,
	0xc1, 0x0b, 0x0d, 0xbb, 0x25, 0x41, 0x58, 0x99, 0xb5, 0x9e, 0x23, 0xae, 0x8d, 0x3a, 0x8b, 0x84,
	0x58, 0xfa, 0xff, 0x39, 0x27, 0x32, 0xa1, 0x31, 0x46, 0xc4, 0xe1, 0xa2, 0x6c, 0x5f, 0x3e, 0xa8,
	0x6f, 0x82, 0xa9, 0x67, 0x4f, 0x6b, 0x3b, 0xef, 0xb3, 0x1b, 0x12, 0x50, 0x08, 0xb5, 0xaa, 0xd7,
	0x37, 0x7c, 0x72, 0x1c, 0x60, 0x32, 0x39, 0x13, 0x4b, 0x89, 0xe1, 0xc0, 0x4e, 0xc9, 0x28, 0x73,
	0x1f, 0x0d, 0xa8, 0x47, 0x58, 0xd5, 0x86, 0x38, 0xe7, 0x2b, 0xb0, 0xb0, 0x8b, 0x29, 0xa3, 0x38,
	0xde, 0x3b, 0x22, 0xc8, 0xa1, 0x01, 0x9c, 0x50, 0x84, 0xc5, 0xc5, 0x51, 0x42, 0x76, 0x09, 0xf7,
	0x4a, 0x95, 0x0d, 0xcc, 0x47, 0x78, 0x62, 0x58, 0x3f, 0x68, 0x60, 0x59, 0xca, 0xa2, 0xf5, 0x1e,
	0x40, 0x63, 0x14, 0xcf, 0x98, 0x52, 0x85, 0xf6, 0xef, 0x0b, 0xf7, 0xc8, 0xe3, 0xb8, 0xcf, 0x5d,
	0x58, 0x37, 0x4a, 0x09, 0x17, 0x62, 0xbb, 0x59, 0x05, 0x7f, 0xc3, 0xb3, 0x9b, 0x54, 0x6d, 0xfb,
	0xac, 0xa3, 0x4c, 0x0a, 0x59, 0x55, 0x72, 0xaa, 0x55, 0x6a, 0x96, 0xd3, 0xf1, 0xbf, 0x02, 0xb7,
	0x5b, 0x8d, 0x26, 0x3b, 0x9a, 0x70, 0x4a, 0x87, 0x65, 0x27, 0x15, 0xc9, 0xdb, 0xd9, 0x3a, 0xdc,
	0x0f, 0x63, 0x7c, 0xc0, 0x89, 0xfe, 0x03, 0xef, 0x29, 0xa2, 0x24, 0x58, 0xec, 0x48, 0xbf, 0xd7,
	0xc0, 0x52, 0xca, 0xb3, 0x00, 0xae, 0x8f, 0x08, 0x27, 0x3c, 0x19, 0x2e, 0x98, 0x21, 0x5b, 0xdc,
	0x85, 0x07, 0xc6, 0xfd, 0x88, 0x0b, 0x49, 0x94, 0xa8, 0x17, 0x2c, 0xe3, 0x9f, 0x81, 0xb9, 0x56,
	0xa3, 0xb9, 0x8b, 0xa9, 0x1c, 0xde, 0xcb, 0x23, 0x07, 0x46, 0x23, 0xbd, 0x98, 0x2a, 0x35, 0xae,
	0xc1, 0x63, 0x30, 0xab, 0x9a, 0x2d, 0xcc, 0x8d, 0x75, 0xdf, 0x4b, 0xba, 0x72, 0x81, 0xbb, 0x0b,
	0xe1, 0xed, 0xc8, 0xd1, 0x08, 0xa8, 0x97, 0x00, 0xec, 0xa3, 0xbe, 0x67, 0x75, 0x59, 0x78, 0x30,
	0xfd, 0x01, 0x77, 0x95, 0x59, 0x3a, 0x02, 0x63, 0x21, 0xbf, 0x04, 0x60, 0x1b, 0x79, 0x16, 0x76,
	0x63, 0xe8, 0x89, 0xce, 0x72, 0x95, 0x49, 0x1d, 0x82, 0x31, 0x74, 0x8b, 0xf7, 0x2e, 0xb6, 0xda,
	0xc1, 0x14, 0x39, 0xee, 0xc4, 0xde, 0x75, 0x2b, 0x2e, 0x36, 0x36, 0x39, 0xee, 0xbd, 0x58, 0x17,
	0x8a, 0xc0, 0xc4, 0xca, 0xe7, 0x3b, 0x8d, 0xb7, 0x84, 0x08, 0xdc, 0x44, 0x9a, 0x52, 0xaa, 0x58,
	0x82, 0x1a, 0x4f, 0x38, 0xe9, 0x27, 0xf0, 0xe1, 0xe5, 0xa4, 0xd5, 0x37, 0xf2, 0xd1, 0xfd, 0xb6,
	0x4a, 0x14, 0x67, 0x07, 0xc0, 0xd0, 0x20, 0xb0, 0x88, 0xc3, 0xfe, 0x58, 0x4c, 0x6e, 0x4e, 0xb9,
	0xc8, 0x41, 0x46, 0xf6, 0x1b, 0xeb, 0xdc, 0x89, 0x55, 0xb8, 0xa2, 0x9c, 0x10, 0xff, 0x89, 0xda,
	0x11, 0xc8, 0x23, 0x30, 0x2f, 0x2c, 0x4e, 0xf1, 0xd1, 0xb0, 0x87, 0x27, 0x73, 0xcc, 0x49, 0x0e,
	0xbe, 0x6b, 0x7c, 0x8e, 0xc5, 0x41, 0xda, 0x60, 0x8e, 0x35, 0x5d, 0xf5, 0xa7, 0x25, 0x9c, 0xc8,
	0x51, 0xa1, 0xca, 0xa3, 0xd2, 0x29, 0x45, 0x34, 0x80, 0x12, 0xa7, 0xc9, 0xc1, 0xe5, 0x68, 0x2b,
	0x0f, 0x51, 0x1d, 0x7e, 0x56, 0x6a, 0xcd, 0xee, 0x0f, 0x5c, 0x19, 0x27, 0x4a, 0xf2, 0xc4, 0x54,
	0xf1, 0x17, 0x40, 0xac, 0x95, 0xc7, 0x70, 0xdb, 0x60, 0xa1, 0x39, 0x81, 0xaa, 0x39, 0x4e, 0x95,
	0xf6, 0xc8, 0x30, 0x38, 0x45, 0xc9, 0xc8, 0x8f, 0x26, 0x7f, 0x0c, 0x4f, 0x5c, 0x20, 0x36, 0xfe,
	0x4d, 0xdc, 0xf3, 0x49, 0x6c, 0xfc, 0x0b, 0x49, 0xf2, 0x06, 0x45, 0x14, 0x92, 0x43, 0xa6, 0xcb,
	0x58, 0x8c, 0x84, 0x21, 0xb6, 0x30, 0xf4, 0x47, 0x60, 0xfa, 0xb0, 0x8f, 0xc9, 0x30, 0x44, 0x6e,
	0x1d, 0xee, 0x6f, 0xfb, 0xae, 0xcb, 0xfb, 0x17, 0xbf, 0xf9, 0x69, 0xed, 0xf7, 0xda, 0xff, 0x34,
	0x39, 0x3d, 0x9a, 0x98, 0x0c, 0x30, 0x79, 0xee, 0x7b, 0x0e, 0xf5, 0x89, 0xe3, 0x75, 0x9a, 0x14,
	0x51, 0x7c, 0xe9, 0xf4, 0x50, 0x31, 0xc6, 0x98, 0x52, 0xa7, 0x47, 0x3a, 0xfe, 0xb7, 0x1a, 0x28,
	0x34, 0x27, 0x29, 0x2f, 0x24, 0xb9, 0xc4, 0x85, 0xff, 0x72, 0x17, 0x36, 0x0c, 0x3d, 0x72, 0x20,
	0xa9, 0x2c, 0xa3, 0xf9, 0x29, 0x1e, 0x1f, 0xff, 0x5c, 0x06, 0xd2, 0xf1, 0x65, 0x06, 0xd2, 0x95,
	0x1f, 0x3a, 0x03, 0xa9, 0x2c, 0x8f, 0xb5, 0xcd, 0xd3, 0x19, 0x8e, 0xf4, 0xd1, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xcb, 0x26, 0x04, 0xf7, 0x58, 0x12, 0x00, 0x00,
}
