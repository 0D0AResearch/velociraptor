syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";
import "www.velocidex.com/golang/velociraptor/flows/proto/flows.proto";
import "www.velocidex.com/golang/velociraptor/crypto/proto/jobs.proto";
import "www.velocidex.com/golang/velociraptor/actions/proto/vql.proto";

package proto;


message HuntConditionGeneric {
    VQLCollectorArgs flow_condition_query = 4 [(sem_type) = {
            description: "A VQL query to run in order to collect information for determining if the hunt applies to this client.",
            friendly_name: "Client Side Condition",
        }];
    VQLCollectorArgs server_side_condition_query = 5 [(sem_type) = {
            description: "A VQL query which runs server side on the results of the flow_condition_query. If any rows are returned then the condition is deemed fulfilled and the hunt will be scheduled."
            friendly_name: "Server Side Condition",
        }];
}

message HuntLabelCondition {
    repeated string label = 1;
}

message HuntOsCondition {
    enum OS {
        ALL = 0;
        WINDOWS = 1;
        LINUX = 2;
        OSX = 3;
    }

    OS os = 1;
}

message HuntCondition {
    option (semantic) = {
        description: "The condition to match hosts for this hunt.",
    };

    oneof union_field {
        HuntConditionGeneric generic_condition = 1 [(sem_type) = {
                friendly_name: "Generic Condition",
                default: '{"flow_condition_query": {"Query": [{"Name": "Collect default client info", "VQL": "SELECT OS, Architecture, Fqdn, Platform, config.Client_labels from info()"}]}, "server_side_condition_query": {"Query": [{"Name": "Select client by info", "VQL": "SELECT * from rows where Fqdn =~ \'.\'"}]}}',
            }];

        HuntLabelCondition labels = 2 [(sem_type) = {
                friendly_name: "Match by label",
            }];

        HuntOsCondition os = 3 [(sem_type) = {
                friendly_name: "Operating System",
            }];
    }
}


message Hunt {
    string hunt_id = 1 [(sem_type) = {
            friendly_name: "Hunt ID",
        }];
    uint64 create_time = 2 [(sem_type) = {
            description: "When this hunt was created.",
            friendly_name: "Creation Time",
            type: "RDFDatetime",
        }];
    uint64 expires = 10 [(sem_type) = {
            description: "When does this hunt expire?",
            friendly_name: "Expiry Time",
            type: "RDFDatetime",
        }];

    string hunt_description = 11 [(sem_type) = {
            description: "Hunt's description",
        }];

    FlowRunnerArgs start_request = 3 [(sem_type) = {
            description: "Launch this flow on the client if the condition is true",
            friendly_name: "Launch Flow",
        }];

    HuntCondition condition = 4 [(sem_type) = {
            description: "The condition that must be satisfied for the hunt to be scheduled.",
            friendly_name: "Hunt Condition",
        }];

    uint64 client_limit = 6 [(sem_type) = {
            description: "Total number of clients this hunt will run on."
        }];

    uint64 client_rate = 7 [(sem_type) = {
            description: "Total clients per minute that will run the hunt.",
            default: "20",
        }];

    uint64 total_clients_scheduled = 9 [(sem_type) = {
            description: "The total number of clients currently scheduled for this hunt.",
            friendly_name: "Total Scheduled",
        }];

    uint64 total_clients_with_results = 14 [(sem_type) = {
            description: "Total number of clients with results.",
            friendly_name: "Total Clients with Results",
        }];

    uint64 total_clients_without_results = 16 [(sem_type) = {
            description: "Total number of clients with out results.",
            friendly_name: "Total Clients without Results",
        }];

    uint64 total_clients_with_errors = 15 [(sem_type) = {
            description: "Total number of clients with errors.",
            friendly_name: "Total Clients with Errors",
        }];

    // The following fields are used to calculate the client
    // recruitment rate when the hunt is paused.
    uint64 last_unpause_time = 12 [(sem_type) = {
            description: "The time when the hunt was last paused or the creation time.",
            type: "RDFDatetime",
            label: HIDDEN,
        }];

    uint64 total_clients_when_unpaused = 13 [(sem_type) = {
            description: "The total number of clients schduled when the hunt was paused.",
            label: HIDDEN,
        }];

    enum State {
        UNSET = 0;
        PAUSED = 1 [(description) = "Hunt will not schedule new clients but can be started."];
        RUNNING = 2 [(description) = "Hunt is running and ready."];
        STOPPED = 3 [(description) = "Hunt has expired."];
    };

    State state = 8;
}


message HuntInfo {
    string hunt_id = 1;
    uint64 scheduled_time = 2;
    string client_id = 3;
    string flow_id = 5 [(sem_type) = {
            description: "The flow that was launched for this hunt."
        }];

    FlowRunnerArgs start_request = 4 [(sem_type) = {
            description: "The flow that will be run on the client when it is scheduled."
        }];

    enum State {
        UNSET = 0;
        PENDING = 1 [(description) = "Flow has not yet been created but it is pending."];
        RUNNING = 2 [(description) = "Flow has been created and scheduled."];
        ERROR = 3 [(description) = "We tried to start the flow but it errored."];
    }

    State state = 8;

    FlowContext result = 9 [(sem_type) = {
            description: "When the flow is complete its final result is stored here."
        }];
}


message ListHuntsRequest {
    uint64 offset = 1;
    uint64 count = 2;
}

message GetHuntRequest {
    string hunt_id = 1;
}

message GetHuntResultsRequest {
    uint64 offset = 1;
    uint64 count = 2;
    string hunt_id = 3;
}

message HuntResults {
    repeated HuntInfo items = 1;
}

message ListHuntsResponse {
    repeated Hunt items = 1;
}

message ListHuntClientsRequest {
    enum Type {
        PENDING = 0 [(description) = "Clients that matched the hunt condition and are waiting to be scheduled."];
        SCHEDULED = 1 [(description) = "Clients scheduled with flows in progress"];
        COMPLETED = 2 [(description) = "Clients with completed flows"];
        RESULTS = 3 [(description) = "Client with non empty results"];
    }

    Type type = 1 [(sem_type) = {
            description: "Where type of clients to display";
        }];

    string hunt_id = 2;
    uint64 offset = 3;
    uint64 count = 4;
}
