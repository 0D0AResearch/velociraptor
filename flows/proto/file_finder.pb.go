// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file_finder.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileFinderContentsRegexMatchCondition_Mode int32

const (
	FileFinderContentsRegexMatchCondition_ALL_HITS  FileFinderContentsRegexMatchCondition_Mode = 0
	FileFinderContentsRegexMatchCondition_FIRST_HIT FileFinderContentsRegexMatchCondition_Mode = 1
)

var FileFinderContentsRegexMatchCondition_Mode_name = map[int32]string{
	0: "ALL_HITS",
	1: "FIRST_HIT",
}
var FileFinderContentsRegexMatchCondition_Mode_value = map[string]int32{
	"ALL_HITS":  0,
	"FIRST_HIT": 1,
}

func (x FileFinderContentsRegexMatchCondition_Mode) String() string {
	return proto.EnumName(FileFinderContentsRegexMatchCondition_Mode_name, int32(x))
}
func (FileFinderContentsRegexMatchCondition_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{4, 0}
}

type FileFinderContentsLiteralMatchCondition_Mode int32

const (
	FileFinderContentsLiteralMatchCondition_ALL_HITS  FileFinderContentsLiteralMatchCondition_Mode = 0
	FileFinderContentsLiteralMatchCondition_FIRST_HIT FileFinderContentsLiteralMatchCondition_Mode = 1
)

var FileFinderContentsLiteralMatchCondition_Mode_name = map[int32]string{
	0: "ALL_HITS",
	1: "FIRST_HIT",
}
var FileFinderContentsLiteralMatchCondition_Mode_value = map[string]int32{
	"ALL_HITS":  0,
	"FIRST_HIT": 1,
}

func (x FileFinderContentsLiteralMatchCondition_Mode) String() string {
	return proto.EnumName(FileFinderContentsLiteralMatchCondition_Mode_name, int32(x))
}
func (FileFinderContentsLiteralMatchCondition_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{5, 0}
}

type FileFinderHashActionOptions_OversizedFilePolicy int32

const (
	FileFinderHashActionOptions_SKIP           FileFinderHashActionOptions_OversizedFilePolicy = 0
	FileFinderHashActionOptions_HASH_TRUNCATED FileFinderHashActionOptions_OversizedFilePolicy = 1
)

var FileFinderHashActionOptions_OversizedFilePolicy_name = map[int32]string{
	0: "SKIP",
	1: "HASH_TRUNCATED",
}
var FileFinderHashActionOptions_OversizedFilePolicy_value = map[string]int32{
	"SKIP":           0,
	"HASH_TRUNCATED": 1,
}

func (x FileFinderHashActionOptions_OversizedFilePolicy) String() string {
	return proto.EnumName(FileFinderHashActionOptions_OversizedFilePolicy_name, int32(x))
}
func (FileFinderHashActionOptions_OversizedFilePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{7, 0}
}

type FileFinderDownloadActionOptions_OversizedFilePolicy int32

const (
	FileFinderDownloadActionOptions_SKIP               FileFinderDownloadActionOptions_OversizedFilePolicy = 0
	FileFinderDownloadActionOptions_HASH_TRUNCATED     FileFinderDownloadActionOptions_OversizedFilePolicy = 1
	FileFinderDownloadActionOptions_DOWNLOAD_TRUNCATED FileFinderDownloadActionOptions_OversizedFilePolicy = 2
)

var FileFinderDownloadActionOptions_OversizedFilePolicy_name = map[int32]string{
	0: "SKIP",
	1: "HASH_TRUNCATED",
	2: "DOWNLOAD_TRUNCATED",
}
var FileFinderDownloadActionOptions_OversizedFilePolicy_value = map[string]int32{
	"SKIP":               0,
	"HASH_TRUNCATED":     1,
	"DOWNLOAD_TRUNCATED": 2,
}

func (x FileFinderDownloadActionOptions_OversizedFilePolicy) String() string {
	return proto.EnumName(FileFinderDownloadActionOptions_OversizedFilePolicy_name, int32(x))
}
func (FileFinderDownloadActionOptions_OversizedFilePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{8, 0}
}

type FileFinderArgs_XDev int32

const (
	FileFinderArgs_NEVER  FileFinderArgs_XDev = 0
	FileFinderArgs_ALWAYS FileFinderArgs_XDev = 1
	FileFinderArgs_LOCAL  FileFinderArgs_XDev = 2
)

var FileFinderArgs_XDev_name = map[int32]string{
	0: "NEVER",
	1: "ALWAYS",
	2: "LOCAL",
}
var FileFinderArgs_XDev_value = map[string]int32{
	"NEVER":  0,
	"ALWAYS": 1,
	"LOCAL":  2,
}

func (x FileFinderArgs_XDev) String() string {
	return proto.EnumName(FileFinderArgs_XDev_name, int32(x))
}
func (FileFinderArgs_XDev) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{11, 0}
}

// Next field ID: 7
type FileFinderModificationTimeCondition struct {
	MinLastModifiedTime  uint64   `protobuf:"varint,5,opt,name=min_last_modified_time,json=minLastModifiedTime,proto3" json:"min_last_modified_time,omitempty"`
	MaxLastModifiedTime  uint64   `protobuf:"varint,6,opt,name=max_last_modified_time,json=maxLastModifiedTime,proto3" json:"max_last_modified_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileFinderModificationTimeCondition) Reset()         { *m = FileFinderModificationTimeCondition{} }
func (m *FileFinderModificationTimeCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderModificationTimeCondition) ProtoMessage()    {}
func (*FileFinderModificationTimeCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{0}
}
func (m *FileFinderModificationTimeCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderModificationTimeCondition.Unmarshal(m, b)
}
func (m *FileFinderModificationTimeCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderModificationTimeCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderModificationTimeCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderModificationTimeCondition.Merge(dst, src)
}
func (m *FileFinderModificationTimeCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderModificationTimeCondition.Size(m)
}
func (m *FileFinderModificationTimeCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderModificationTimeCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderModificationTimeCondition proto.InternalMessageInfo

func (m *FileFinderModificationTimeCondition) GetMinLastModifiedTime() uint64 {
	if m != nil {
		return m.MinLastModifiedTime
	}
	return 0
}

func (m *FileFinderModificationTimeCondition) GetMaxLastModifiedTime() uint64 {
	if m != nil {
		return m.MaxLastModifiedTime
	}
	return 0
}

// Next field ID: 7
type FileFinderAccessTimeCondition struct {
	MinLastAccessTime    uint64   `protobuf:"varint,5,opt,name=min_last_access_time,json=minLastAccessTime,proto3" json:"min_last_access_time,omitempty"`
	MaxLastAccessTime    uint64   `protobuf:"varint,6,opt,name=max_last_access_time,json=maxLastAccessTime,proto3" json:"max_last_access_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileFinderAccessTimeCondition) Reset()         { *m = FileFinderAccessTimeCondition{} }
func (m *FileFinderAccessTimeCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderAccessTimeCondition) ProtoMessage()    {}
func (*FileFinderAccessTimeCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{1}
}
func (m *FileFinderAccessTimeCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderAccessTimeCondition.Unmarshal(m, b)
}
func (m *FileFinderAccessTimeCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderAccessTimeCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderAccessTimeCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderAccessTimeCondition.Merge(dst, src)
}
func (m *FileFinderAccessTimeCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderAccessTimeCondition.Size(m)
}
func (m *FileFinderAccessTimeCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderAccessTimeCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderAccessTimeCondition proto.InternalMessageInfo

func (m *FileFinderAccessTimeCondition) GetMinLastAccessTime() uint64 {
	if m != nil {
		return m.MinLastAccessTime
	}
	return 0
}

func (m *FileFinderAccessTimeCondition) GetMaxLastAccessTime() uint64 {
	if m != nil {
		return m.MaxLastAccessTime
	}
	return 0
}

// Next field ID: 7
type FileFinderInodeChangeTimeCondition struct {
	MinLastInodeChangeTime uint64   `protobuf:"varint,5,opt,name=min_last_inode_change_time,json=minLastInodeChangeTime,proto3" json:"min_last_inode_change_time,omitempty"`
	MaxLastInodeChangeTime uint64   `protobuf:"varint,6,opt,name=max_last_inode_change_time,json=maxLastInodeChangeTime,proto3" json:"max_last_inode_change_time,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *FileFinderInodeChangeTimeCondition) Reset()         { *m = FileFinderInodeChangeTimeCondition{} }
func (m *FileFinderInodeChangeTimeCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderInodeChangeTimeCondition) ProtoMessage()    {}
func (*FileFinderInodeChangeTimeCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{2}
}
func (m *FileFinderInodeChangeTimeCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderInodeChangeTimeCondition.Unmarshal(m, b)
}
func (m *FileFinderInodeChangeTimeCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderInodeChangeTimeCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderInodeChangeTimeCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderInodeChangeTimeCondition.Merge(dst, src)
}
func (m *FileFinderInodeChangeTimeCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderInodeChangeTimeCondition.Size(m)
}
func (m *FileFinderInodeChangeTimeCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderInodeChangeTimeCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderInodeChangeTimeCondition proto.InternalMessageInfo

func (m *FileFinderInodeChangeTimeCondition) GetMinLastInodeChangeTime() uint64 {
	if m != nil {
		return m.MinLastInodeChangeTime
	}
	return 0
}

func (m *FileFinderInodeChangeTimeCondition) GetMaxLastInodeChangeTime() uint64 {
	if m != nil {
		return m.MaxLastInodeChangeTime
	}
	return 0
}

// Next field ID: 13
type FileFinderSizeCondition struct {
	MinFileSize          uint64   `protobuf:"varint,11,opt,name=min_file_size,json=minFileSize,proto3" json:"min_file_size,omitempty"`
	MaxFileSize          uint64   `protobuf:"varint,12,opt,name=max_file_size,json=maxFileSize,proto3" json:"max_file_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileFinderSizeCondition) Reset()         { *m = FileFinderSizeCondition{} }
func (m *FileFinderSizeCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderSizeCondition) ProtoMessage()    {}
func (*FileFinderSizeCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{3}
}
func (m *FileFinderSizeCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderSizeCondition.Unmarshal(m, b)
}
func (m *FileFinderSizeCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderSizeCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderSizeCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderSizeCondition.Merge(dst, src)
}
func (m *FileFinderSizeCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderSizeCondition.Size(m)
}
func (m *FileFinderSizeCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderSizeCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderSizeCondition proto.InternalMessageInfo

func (m *FileFinderSizeCondition) GetMinFileSize() uint64 {
	if m != nil {
		return m.MinFileSize
	}
	return 0
}

func (m *FileFinderSizeCondition) GetMaxFileSize() uint64 {
	if m != nil {
		return m.MaxFileSize
	}
	return 0
}

// Next field ID: 9
type FileFinderContentsRegexMatchCondition struct {
	Regex                string                                     `protobuf:"bytes,4,opt,name=regex,proto3" json:"regex,omitempty"`
	Mode                 FileFinderContentsRegexMatchCondition_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=proto.FileFinderContentsRegexMatchCondition_Mode" json:"mode,omitempty"`
	BytesBefore          uint32                                     `protobuf:"varint,7,opt,name=bytes_before,json=bytesBefore,proto3" json:"bytes_before,omitempty"`
	BytesAfter           uint32                                     `protobuf:"varint,8,opt,name=bytes_after,json=bytesAfter,proto3" json:"bytes_after,omitempty"`
	StartOffset          uint64                                     `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	Length               uint64                                     `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *FileFinderContentsRegexMatchCondition) Reset()         { *m = FileFinderContentsRegexMatchCondition{} }
func (m *FileFinderContentsRegexMatchCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderContentsRegexMatchCondition) ProtoMessage()    {}
func (*FileFinderContentsRegexMatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{4}
}
func (m *FileFinderContentsRegexMatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderContentsRegexMatchCondition.Unmarshal(m, b)
}
func (m *FileFinderContentsRegexMatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderContentsRegexMatchCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderContentsRegexMatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderContentsRegexMatchCondition.Merge(dst, src)
}
func (m *FileFinderContentsRegexMatchCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderContentsRegexMatchCondition.Size(m)
}
func (m *FileFinderContentsRegexMatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderContentsRegexMatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderContentsRegexMatchCondition proto.InternalMessageInfo

func (m *FileFinderContentsRegexMatchCondition) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *FileFinderContentsRegexMatchCondition) GetMode() FileFinderContentsRegexMatchCondition_Mode {
	if m != nil {
		return m.Mode
	}
	return FileFinderContentsRegexMatchCondition_ALL_HITS
}

func (m *FileFinderContentsRegexMatchCondition) GetBytesBefore() uint32 {
	if m != nil {
		return m.BytesBefore
	}
	return 0
}

func (m *FileFinderContentsRegexMatchCondition) GetBytesAfter() uint32 {
	if m != nil {
		return m.BytesAfter
	}
	return 0
}

func (m *FileFinderContentsRegexMatchCondition) GetStartOffset() uint64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *FileFinderContentsRegexMatchCondition) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// Next field ID: 11
type FileFinderContentsLiteralMatchCondition struct {
	Literal              []byte                                       `protobuf:"bytes,5,opt,name=literal,proto3" json:"literal,omitempty"`
	Mode                 FileFinderContentsLiteralMatchCondition_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=proto.FileFinderContentsLiteralMatchCondition_Mode" json:"mode,omitempty"`
	StartOffset          uint64                                       `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	Length               uint64                                       `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	BytesBefore          uint32                                       `protobuf:"varint,7,opt,name=bytes_before,json=bytesBefore,proto3" json:"bytes_before,omitempty"`
	BytesAfter           uint32                                       `protobuf:"varint,8,opt,name=bytes_after,json=bytesAfter,proto3" json:"bytes_after,omitempty"`
	XorInKey             uint32                                       `protobuf:"varint,9,opt,name=xor_in_key,json=xorInKey,proto3" json:"xor_in_key,omitempty"`
	XorOutKey            uint32                                       `protobuf:"varint,10,opt,name=xor_out_key,json=xorOutKey,proto3" json:"xor_out_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *FileFinderContentsLiteralMatchCondition) Reset() {
	*m = FileFinderContentsLiteralMatchCondition{}
}
func (m *FileFinderContentsLiteralMatchCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderContentsLiteralMatchCondition) ProtoMessage()    {}
func (*FileFinderContentsLiteralMatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{5}
}
func (m *FileFinderContentsLiteralMatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderContentsLiteralMatchCondition.Unmarshal(m, b)
}
func (m *FileFinderContentsLiteralMatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderContentsLiteralMatchCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderContentsLiteralMatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderContentsLiteralMatchCondition.Merge(dst, src)
}
func (m *FileFinderContentsLiteralMatchCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderContentsLiteralMatchCondition.Size(m)
}
func (m *FileFinderContentsLiteralMatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderContentsLiteralMatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderContentsLiteralMatchCondition proto.InternalMessageInfo

func (m *FileFinderContentsLiteralMatchCondition) GetLiteral() []byte {
	if m != nil {
		return m.Literal
	}
	return nil
}

func (m *FileFinderContentsLiteralMatchCondition) GetMode() FileFinderContentsLiteralMatchCondition_Mode {
	if m != nil {
		return m.Mode
	}
	return FileFinderContentsLiteralMatchCondition_ALL_HITS
}

func (m *FileFinderContentsLiteralMatchCondition) GetStartOffset() uint64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *FileFinderContentsLiteralMatchCondition) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *FileFinderContentsLiteralMatchCondition) GetBytesBefore() uint32 {
	if m != nil {
		return m.BytesBefore
	}
	return 0
}

func (m *FileFinderContentsLiteralMatchCondition) GetBytesAfter() uint32 {
	if m != nil {
		return m.BytesAfter
	}
	return 0
}

func (m *FileFinderContentsLiteralMatchCondition) GetXorInKey() uint32 {
	if m != nil {
		return m.XorInKey
	}
	return 0
}

func (m *FileFinderContentsLiteralMatchCondition) GetXorOutKey() uint32 {
	if m != nil {
		return m.XorOutKey
	}
	return 0
}

// Next field ID: 9
type FileFinderCondition struct {
	// Types that are valid to be assigned to UnionField:
	//	*FileFinderCondition_ModificationTime
	//	*FileFinderCondition_AccessTime
	//	*FileFinderCondition_InodeChangeTime
	//	*FileFinderCondition_Size
	//	*FileFinderCondition_ContentsRegexMatch
	//	*FileFinderCondition_ContentsLiteralMatch
	UnionField           isFileFinderCondition_UnionField `protobuf_oneof:"union_field"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FileFinderCondition) Reset()         { *m = FileFinderCondition{} }
func (m *FileFinderCondition) String() string { return proto.CompactTextString(m) }
func (*FileFinderCondition) ProtoMessage()    {}
func (*FileFinderCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{6}
}
func (m *FileFinderCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderCondition.Unmarshal(m, b)
}
func (m *FileFinderCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderCondition.Marshal(b, m, deterministic)
}
func (dst *FileFinderCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderCondition.Merge(dst, src)
}
func (m *FileFinderCondition) XXX_Size() int {
	return xxx_messageInfo_FileFinderCondition.Size(m)
}
func (m *FileFinderCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderCondition.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderCondition proto.InternalMessageInfo

type isFileFinderCondition_UnionField interface {
	isFileFinderCondition_UnionField()
}

type FileFinderCondition_ModificationTime struct {
	ModificationTime *FileFinderModificationTimeCondition `protobuf:"bytes,2,opt,name=modification_time,json=modificationTime,proto3,oneof"`
}
type FileFinderCondition_AccessTime struct {
	AccessTime *FileFinderAccessTimeCondition `protobuf:"bytes,3,opt,name=access_time,json=accessTime,proto3,oneof"`
}
type FileFinderCondition_InodeChangeTime struct {
	InodeChangeTime *FileFinderInodeChangeTimeCondition `protobuf:"bytes,4,opt,name=inode_change_time,json=inodeChangeTime,proto3,oneof"`
}
type FileFinderCondition_Size struct {
	Size *FileFinderSizeCondition `protobuf:"bytes,5,opt,name=size,proto3,oneof"`
}
type FileFinderCondition_ContentsRegexMatch struct {
	ContentsRegexMatch *FileFinderContentsRegexMatchCondition `protobuf:"bytes,6,opt,name=contents_regex_match,json=contentsRegexMatch,proto3,oneof"`
}
type FileFinderCondition_ContentsLiteralMatch struct {
	ContentsLiteralMatch *FileFinderContentsLiteralMatchCondition `protobuf:"bytes,7,opt,name=contents_literal_match,json=contentsLiteralMatch,proto3,oneof"`
}

func (*FileFinderCondition_ModificationTime) isFileFinderCondition_UnionField()     {}
func (*FileFinderCondition_AccessTime) isFileFinderCondition_UnionField()           {}
func (*FileFinderCondition_InodeChangeTime) isFileFinderCondition_UnionField()      {}
func (*FileFinderCondition_Size) isFileFinderCondition_UnionField()                 {}
func (*FileFinderCondition_ContentsRegexMatch) isFileFinderCondition_UnionField()   {}
func (*FileFinderCondition_ContentsLiteralMatch) isFileFinderCondition_UnionField() {}

func (m *FileFinderCondition) GetUnionField() isFileFinderCondition_UnionField {
	if m != nil {
		return m.UnionField
	}
	return nil
}

func (m *FileFinderCondition) GetModificationTime() *FileFinderModificationTimeCondition {
	if x, ok := m.GetUnionField().(*FileFinderCondition_ModificationTime); ok {
		return x.ModificationTime
	}
	return nil
}

func (m *FileFinderCondition) GetAccessTime() *FileFinderAccessTimeCondition {
	if x, ok := m.GetUnionField().(*FileFinderCondition_AccessTime); ok {
		return x.AccessTime
	}
	return nil
}

func (m *FileFinderCondition) GetInodeChangeTime() *FileFinderInodeChangeTimeCondition {
	if x, ok := m.GetUnionField().(*FileFinderCondition_InodeChangeTime); ok {
		return x.InodeChangeTime
	}
	return nil
}

func (m *FileFinderCondition) GetSize() *FileFinderSizeCondition {
	if x, ok := m.GetUnionField().(*FileFinderCondition_Size); ok {
		return x.Size
	}
	return nil
}

func (m *FileFinderCondition) GetContentsRegexMatch() *FileFinderContentsRegexMatchCondition {
	if x, ok := m.GetUnionField().(*FileFinderCondition_ContentsRegexMatch); ok {
		return x.ContentsRegexMatch
	}
	return nil
}

func (m *FileFinderCondition) GetContentsLiteralMatch() *FileFinderContentsLiteralMatchCondition {
	if x, ok := m.GetUnionField().(*FileFinderCondition_ContentsLiteralMatch); ok {
		return x.ContentsLiteralMatch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FileFinderCondition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FileFinderCondition_OneofMarshaler, _FileFinderCondition_OneofUnmarshaler, _FileFinderCondition_OneofSizer, []interface{}{
		(*FileFinderCondition_ModificationTime)(nil),
		(*FileFinderCondition_AccessTime)(nil),
		(*FileFinderCondition_InodeChangeTime)(nil),
		(*FileFinderCondition_Size)(nil),
		(*FileFinderCondition_ContentsRegexMatch)(nil),
		(*FileFinderCondition_ContentsLiteralMatch)(nil),
	}
}

func _FileFinderCondition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FileFinderCondition)
	// union_field
	switch x := m.UnionField.(type) {
	case *FileFinderCondition_ModificationTime:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ModificationTime); err != nil {
			return err
		}
	case *FileFinderCondition_AccessTime:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccessTime); err != nil {
			return err
		}
	case *FileFinderCondition_InodeChangeTime:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InodeChangeTime); err != nil {
			return err
		}
	case *FileFinderCondition_Size:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Size); err != nil {
			return err
		}
	case *FileFinderCondition_ContentsRegexMatch:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContentsRegexMatch); err != nil {
			return err
		}
	case *FileFinderCondition_ContentsLiteralMatch:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContentsLiteralMatch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FileFinderCondition.UnionField has unexpected type %T", x)
	}
	return nil
}

func _FileFinderCondition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FileFinderCondition)
	switch tag {
	case 2: // union_field.modification_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderModificationTimeCondition)
		err := b.DecodeMessage(msg)
		m.UnionField = &FileFinderCondition_ModificationTime{msg}
		return true, err
	case 3: // union_field.access_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderAccessTimeCondition)
		err := b.DecodeMessage(msg)
		m.UnionField = &FileFinderCondition_AccessTime{msg}
		return true, err
	case 4: // union_field.inode_change_time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderInodeChangeTimeCondition)
		err := b.DecodeMessage(msg)
		m.UnionField = &FileFinderCondition_InodeChangeTime{msg}
		return true, err
	case 5: // union_field.size
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderSizeCondition)
		err := b.DecodeMessage(msg)
		m.UnionField = &FileFinderCondition_Size{msg}
		return true, err
	case 6: // union_field.contents_regex_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderContentsRegexMatchCondition)
		err := b.DecodeMessage(msg)
		m.UnionField = &FileFinderCondition_ContentsRegexMatch{msg}
		return true, err
	case 7: // union_field.contents_literal_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderContentsLiteralMatchCondition)
		err := b.DecodeMessage(msg)
		m.UnionField = &FileFinderCondition_ContentsLiteralMatch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FileFinderCondition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FileFinderCondition)
	// union_field
	switch x := m.UnionField.(type) {
	case *FileFinderCondition_ModificationTime:
		s := proto.Size(x.ModificationTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderCondition_AccessTime:
		s := proto.Size(x.AccessTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderCondition_InodeChangeTime:
		s := proto.Size(x.InodeChangeTime)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderCondition_Size:
		s := proto.Size(x.Size)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderCondition_ContentsRegexMatch:
		s := proto.Size(x.ContentsRegexMatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderCondition_ContentsLiteralMatch:
		s := proto.Size(x.ContentsLiteralMatch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Next field ID: 5
type FileFinderHashActionOptions struct {
	MaxSize              uint64                                          `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	OversizedFilePolicy  FileFinderHashActionOptions_OversizedFilePolicy `protobuf:"varint,2,opt,name=oversized_file_policy,json=oversizedFilePolicy,proto3,enum=proto.FileFinderHashActionOptions_OversizedFilePolicy" json:"oversized_file_policy,omitempty"`
	CollectExtAttrs      bool                                            `protobuf:"varint,4,opt,name=collect_ext_attrs,json=collectExtAttrs,proto3" json:"collect_ext_attrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *FileFinderHashActionOptions) Reset()         { *m = FileFinderHashActionOptions{} }
func (m *FileFinderHashActionOptions) String() string { return proto.CompactTextString(m) }
func (*FileFinderHashActionOptions) ProtoMessage()    {}
func (*FileFinderHashActionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{7}
}
func (m *FileFinderHashActionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderHashActionOptions.Unmarshal(m, b)
}
func (m *FileFinderHashActionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderHashActionOptions.Marshal(b, m, deterministic)
}
func (dst *FileFinderHashActionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderHashActionOptions.Merge(dst, src)
}
func (m *FileFinderHashActionOptions) XXX_Size() int {
	return xxx_messageInfo_FileFinderHashActionOptions.Size(m)
}
func (m *FileFinderHashActionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderHashActionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderHashActionOptions proto.InternalMessageInfo

func (m *FileFinderHashActionOptions) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *FileFinderHashActionOptions) GetOversizedFilePolicy() FileFinderHashActionOptions_OversizedFilePolicy {
	if m != nil {
		return m.OversizedFilePolicy
	}
	return FileFinderHashActionOptions_SKIP
}

func (m *FileFinderHashActionOptions) GetCollectExtAttrs() bool {
	if m != nil {
		return m.CollectExtAttrs
	}
	return false
}

// Next field ID: 12
type FileFinderDownloadActionOptions struct {
	MaxSize              uint64                                              `protobuf:"varint,5,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	OversizedFilePolicy  FileFinderDownloadActionOptions_OversizedFilePolicy `protobuf:"varint,7,opt,name=oversized_file_policy,json=oversizedFilePolicy,proto3,enum=proto.FileFinderDownloadActionOptions_OversizedFilePolicy" json:"oversized_file_policy,omitempty"`
	UseExternalStores    bool                                                `protobuf:"varint,6,opt,name=use_external_stores,json=useExternalStores,proto3" json:"use_external_stores,omitempty"`
	CollectExtAttrs      bool                                                `protobuf:"varint,9,opt,name=collect_ext_attrs,json=collectExtAttrs,proto3" json:"collect_ext_attrs,omitempty"`
	ChunkSize            uint64                                              `protobuf:"varint,11,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *FileFinderDownloadActionOptions) Reset()         { *m = FileFinderDownloadActionOptions{} }
func (m *FileFinderDownloadActionOptions) String() string { return proto.CompactTextString(m) }
func (*FileFinderDownloadActionOptions) ProtoMessage()    {}
func (*FileFinderDownloadActionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{8}
}
func (m *FileFinderDownloadActionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderDownloadActionOptions.Unmarshal(m, b)
}
func (m *FileFinderDownloadActionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderDownloadActionOptions.Marshal(b, m, deterministic)
}
func (dst *FileFinderDownloadActionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderDownloadActionOptions.Merge(dst, src)
}
func (m *FileFinderDownloadActionOptions) XXX_Size() int {
	return xxx_messageInfo_FileFinderDownloadActionOptions.Size(m)
}
func (m *FileFinderDownloadActionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderDownloadActionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderDownloadActionOptions proto.InternalMessageInfo

func (m *FileFinderDownloadActionOptions) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *FileFinderDownloadActionOptions) GetOversizedFilePolicy() FileFinderDownloadActionOptions_OversizedFilePolicy {
	if m != nil {
		return m.OversizedFilePolicy
	}
	return FileFinderDownloadActionOptions_SKIP
}

func (m *FileFinderDownloadActionOptions) GetUseExternalStores() bool {
	if m != nil {
		return m.UseExternalStores
	}
	return false
}

func (m *FileFinderDownloadActionOptions) GetCollectExtAttrs() bool {
	if m != nil {
		return m.CollectExtAttrs
	}
	return false
}

func (m *FileFinderDownloadActionOptions) GetChunkSize() uint64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

type FileFinderStatActionOptions struct {
	ResolveLinks         bool     `protobuf:"varint,1,opt,name=resolve_links,json=resolveLinks,proto3" json:"resolve_links,omitempty"`
	CollectExtAttrs      bool     `protobuf:"varint,2,opt,name=collect_ext_attrs,json=collectExtAttrs,proto3" json:"collect_ext_attrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileFinderStatActionOptions) Reset()         { *m = FileFinderStatActionOptions{} }
func (m *FileFinderStatActionOptions) String() string { return proto.CompactTextString(m) }
func (*FileFinderStatActionOptions) ProtoMessage()    {}
func (*FileFinderStatActionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{9}
}
func (m *FileFinderStatActionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderStatActionOptions.Unmarshal(m, b)
}
func (m *FileFinderStatActionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderStatActionOptions.Marshal(b, m, deterministic)
}
func (dst *FileFinderStatActionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderStatActionOptions.Merge(dst, src)
}
func (m *FileFinderStatActionOptions) XXX_Size() int {
	return xxx_messageInfo_FileFinderStatActionOptions.Size(m)
}
func (m *FileFinderStatActionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderStatActionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderStatActionOptions proto.InternalMessageInfo

func (m *FileFinderStatActionOptions) GetResolveLinks() bool {
	if m != nil {
		return m.ResolveLinks
	}
	return false
}

func (m *FileFinderStatActionOptions) GetCollectExtAttrs() bool {
	if m != nil {
		return m.CollectExtAttrs
	}
	return false
}

// Next field ID: 5
type FileFinderAction struct {
	// Types that are valid to be assigned to Action:
	//	*FileFinderAction_Hash
	//	*FileFinderAction_Download
	//	*FileFinderAction_Stat
	Action               isFileFinderAction_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *FileFinderAction) Reset()         { *m = FileFinderAction{} }
func (m *FileFinderAction) String() string { return proto.CompactTextString(m) }
func (*FileFinderAction) ProtoMessage()    {}
func (*FileFinderAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{10}
}
func (m *FileFinderAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderAction.Unmarshal(m, b)
}
func (m *FileFinderAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderAction.Marshal(b, m, deterministic)
}
func (dst *FileFinderAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderAction.Merge(dst, src)
}
func (m *FileFinderAction) XXX_Size() int {
	return xxx_messageInfo_FileFinderAction.Size(m)
}
func (m *FileFinderAction) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderAction.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderAction proto.InternalMessageInfo

type isFileFinderAction_Action interface {
	isFileFinderAction_Action()
}

type FileFinderAction_Hash struct {
	Hash *FileFinderHashActionOptions `protobuf:"bytes,3,opt,name=hash,proto3,oneof"`
}
type FileFinderAction_Download struct {
	Download *FileFinderDownloadActionOptions `protobuf:"bytes,2,opt,name=download,proto3,oneof"`
}
type FileFinderAction_Stat struct {
	Stat *FileFinderStatActionOptions `protobuf:"bytes,4,opt,name=stat,proto3,oneof"`
}

func (*FileFinderAction_Hash) isFileFinderAction_Action()     {}
func (*FileFinderAction_Download) isFileFinderAction_Action() {}
func (*FileFinderAction_Stat) isFileFinderAction_Action()     {}

func (m *FileFinderAction) GetAction() isFileFinderAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *FileFinderAction) GetHash() *FileFinderHashActionOptions {
	if x, ok := m.GetAction().(*FileFinderAction_Hash); ok {
		return x.Hash
	}
	return nil
}

func (m *FileFinderAction) GetDownload() *FileFinderDownloadActionOptions {
	if x, ok := m.GetAction().(*FileFinderAction_Download); ok {
		return x.Download
	}
	return nil
}

func (m *FileFinderAction) GetStat() *FileFinderStatActionOptions {
	if x, ok := m.GetAction().(*FileFinderAction_Stat); ok {
		return x.Stat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FileFinderAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FileFinderAction_OneofMarshaler, _FileFinderAction_OneofUnmarshaler, _FileFinderAction_OneofSizer, []interface{}{
		(*FileFinderAction_Hash)(nil),
		(*FileFinderAction_Download)(nil),
		(*FileFinderAction_Stat)(nil),
	}
}

func _FileFinderAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FileFinderAction)
	// action
	switch x := m.Action.(type) {
	case *FileFinderAction_Hash:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case *FileFinderAction_Download:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Download); err != nil {
			return err
		}
	case *FileFinderAction_Stat:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FileFinderAction.Action has unexpected type %T", x)
	}
	return nil
}

func _FileFinderAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FileFinderAction)
	switch tag {
	case 3: // action.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderHashActionOptions)
		err := b.DecodeMessage(msg)
		m.Action = &FileFinderAction_Hash{msg}
		return true, err
	case 2: // action.download
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderDownloadActionOptions)
		err := b.DecodeMessage(msg)
		m.Action = &FileFinderAction_Download{msg}
		return true, err
	case 4: // action.stat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileFinderStatActionOptions)
		err := b.DecodeMessage(msg)
		m.Action = &FileFinderAction_Stat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FileFinderAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FileFinderAction)
	// action
	switch x := m.Action.(type) {
	case *FileFinderAction_Hash:
		s := proto.Size(x.Hash)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderAction_Download:
		s := proto.Size(x.Download)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FileFinderAction_Stat:
		s := proto.Size(x.Stat)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Next field ID: 11
type FileFinderArgs struct {
	Paths                  []string               `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Conditions             []*FileFinderCondition `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Action                 *FileFinderAction      `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	ProcessNonRegularFiles bool                   `protobuf:"varint,7,opt,name=process_non_regular_files,json=processNonRegularFiles,proto3" json:"process_non_regular_files,omitempty"`
	FollowLinks            bool                   `protobuf:"varint,8,opt,name=follow_links,json=followLinks,proto3" json:"follow_links,omitempty"`
	Xdev                   FileFinderArgs_XDev    `protobuf:"varint,9,opt,name=xdev,proto3,enum=proto.FileFinderArgs_XDev" json:"xdev,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}               `json:"-"`
	XXX_unrecognized       []byte                 `json:"-"`
	XXX_sizecache          int32                  `json:"-"`
}

func (m *FileFinderArgs) Reset()         { *m = FileFinderArgs{} }
func (m *FileFinderArgs) String() string { return proto.CompactTextString(m) }
func (*FileFinderArgs) ProtoMessage()    {}
func (*FileFinderArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_file_finder_8b07ffb12d6bcec7, []int{11}
}
func (m *FileFinderArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFinderArgs.Unmarshal(m, b)
}
func (m *FileFinderArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFinderArgs.Marshal(b, m, deterministic)
}
func (dst *FileFinderArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFinderArgs.Merge(dst, src)
}
func (m *FileFinderArgs) XXX_Size() int {
	return xxx_messageInfo_FileFinderArgs.Size(m)
}
func (m *FileFinderArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFinderArgs.DiscardUnknown(m)
}

var xxx_messageInfo_FileFinderArgs proto.InternalMessageInfo

func (m *FileFinderArgs) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *FileFinderArgs) GetConditions() []*FileFinderCondition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *FileFinderArgs) GetAction() *FileFinderAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *FileFinderArgs) GetProcessNonRegularFiles() bool {
	if m != nil {
		return m.ProcessNonRegularFiles
	}
	return false
}

func (m *FileFinderArgs) GetFollowLinks() bool {
	if m != nil {
		return m.FollowLinks
	}
	return false
}

func (m *FileFinderArgs) GetXdev() FileFinderArgs_XDev {
	if m != nil {
		return m.Xdev
	}
	return FileFinderArgs_NEVER
}

func init() {
	proto.RegisterType((*FileFinderModificationTimeCondition)(nil), "proto.FileFinderModificationTimeCondition")
	proto.RegisterType((*FileFinderAccessTimeCondition)(nil), "proto.FileFinderAccessTimeCondition")
	proto.RegisterType((*FileFinderInodeChangeTimeCondition)(nil), "proto.FileFinderInodeChangeTimeCondition")
	proto.RegisterType((*FileFinderSizeCondition)(nil), "proto.FileFinderSizeCondition")
	proto.RegisterType((*FileFinderContentsRegexMatchCondition)(nil), "proto.FileFinderContentsRegexMatchCondition")
	proto.RegisterType((*FileFinderContentsLiteralMatchCondition)(nil), "proto.FileFinderContentsLiteralMatchCondition")
	proto.RegisterType((*FileFinderCondition)(nil), "proto.FileFinderCondition")
	proto.RegisterType((*FileFinderHashActionOptions)(nil), "proto.FileFinderHashActionOptions")
	proto.RegisterType((*FileFinderDownloadActionOptions)(nil), "proto.FileFinderDownloadActionOptions")
	proto.RegisterType((*FileFinderStatActionOptions)(nil), "proto.FileFinderStatActionOptions")
	proto.RegisterType((*FileFinderAction)(nil), "proto.FileFinderAction")
	proto.RegisterType((*FileFinderArgs)(nil), "proto.FileFinderArgs")
	proto.RegisterEnum("proto.FileFinderContentsRegexMatchCondition_Mode", FileFinderContentsRegexMatchCondition_Mode_name, FileFinderContentsRegexMatchCondition_Mode_value)
	proto.RegisterEnum("proto.FileFinderContentsLiteralMatchCondition_Mode", FileFinderContentsLiteralMatchCondition_Mode_name, FileFinderContentsLiteralMatchCondition_Mode_value)
	proto.RegisterEnum("proto.FileFinderHashActionOptions_OversizedFilePolicy", FileFinderHashActionOptions_OversizedFilePolicy_name, FileFinderHashActionOptions_OversizedFilePolicy_value)
	proto.RegisterEnum("proto.FileFinderDownloadActionOptions_OversizedFilePolicy", FileFinderDownloadActionOptions_OversizedFilePolicy_name, FileFinderDownloadActionOptions_OversizedFilePolicy_value)
	proto.RegisterEnum("proto.FileFinderArgs_XDev", FileFinderArgs_XDev_name, FileFinderArgs_XDev_value)
}

func init() { proto.RegisterFile("file_finder.proto", fileDescriptor_file_finder_8b07ffb12d6bcec7) }

var fileDescriptor_file_finder_8b07ffb12d6bcec7 = []byte{
	// 2921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4f, 0x6c, 0x24, 0x47,
	0xd5, 0xdf, 0xf6, 0x8e, 0xbd, 0xe3, 0x1a, 0xdb, 0xb1, 0xcb, 0xfb, 0x6d, 0x9c, 0xd9, 0xef, 0x4b,
	0xea, 0xeb, 0x6c, 0x76, 0xbd, 0x89, 0x33, 0xbb, 0x3b, 0xd9, 0x7c, 0xd9, 0xf8, 0x83, 0x24, 0x33,
	0xb6, 0x77, 0xbd, 0x59, 0x7b, 0xbd, 0xb4, 0x9d, 0x6c, 0x50, 0x12, 0x4d, 0x6a, 0xba, 0x6b, 0xa6,
	0x4b, 0xee, 0xee, 0x1a, 0x75, 0x55, 0x7b, 0x66, 0x36, 0x09, 0x22, 0x51, 0x84, 0x90, 0x90, 0x08,
	0x52, 0xe0, 0x84, 0x80, 0x0b, 0x07, 0x24, 0x14, 0x11, 0x89, 0x43, 0x88, 0xe0, 0xc0, 0x81, 0x13,
	0xe4, 0x86, 0x10, 0x12, 0x07, 0x84, 0x40, 0x5c, 0x38, 0x23, 0x4e, 0x1c, 0x50, 0xbd, 0xea, 0x9e,
	0x3f, 0x9e, 0x31, 0xd9, 0x05, 0x22, 0xc4, 0x5e, 0x56, 0xd3, 0x55, 0xef, 0xbd, 0x5f, 0xbd, 0xfa,
	0xd5, 0x7b, 0xbf, 0x2a, 0xa3, 0x85, 0x06, 0x0f, 0x58, 0xad, 0xc1, 0x23, 0x8f, 0xc5, 0xa5, 0x56,
	0x2c, 0x94, 0xc0, 0x93, 0xf0, 0x5f, 0x71, 0xb5, 0xdd, 0x6e, 0x97, 0x0e, 0x58, 0x20, 0x5c, 0xee,
	0xb1, 0x4e, 0xc9, 0x15, 0xe1, 0x85, 0xa6, 0x08, 0x68, 0xd4, 0xbc, 0x60, 0x3e, 0xc6, 0xb4, 0xa5,
	0x44, 0x7c, 0x01, 0x26, 0x5f, 0x90, 0x2c, 0xa4, 0x91, 0xe2, 0xae, 0x71, 0x61, 0xbf, 0x3f, 0x81,
	0x1e, 0xbe, 0xca, 0x03, 0x76, 0x15, 0xfc, 0x6e, 0x0b, 0x8f, 0x37, 0xb8, 0x4b, 0x15, 0x17, 0xd1,
	0x1e, 0x0f, 0xd9, 0x9a, 0x88, 0x3c, 0xae, 0x7f, 0xe0, 0x2f, 0x5a, 0xe8, 0x54, 0xc8, 0xa3, 0x5a,
	0x40, 0xa5, 0xaa, 0x85, 0x30, 0x8d, 0x79, 0x35, 0xc5, 0x43, 0xb6, 0x34, 0x49, 0xac, 0xe5, 0x5c,
	0xf5, 0xc6, 0xef, 0xff, 0xfa, 0x87, 0x9f, 0x59, 0x1b, 0xa8, 0xe0, 0xac, 0x5f, 0x5d, 0xa7, 0x8a,
	0xe9, 0x21, 0x7c, 0x56, 0xbb, 0x26, 0x61, 0x22, 0x15, 0xa9, 0x33, 0x92, 0x99, 0x11, 0xda, 0x50,
	0x2c, 0x26, 0xca, 0xe7, 0x92, 0xe8, 0x69, 0x25, 0x7b, 0x6e, 0x7b, 0x68, 0xc8, 0x59, 0x0c, 0x79,
	0xb4, 0x45, 0xa5, 0xca, 0x3e, 0x6b, 0x2c, 0xf8, 0x6d, 0x0d, 0x81, 0x76, 0xc6, 0x41, 0x98, 0x02,
	0x08, 0xdb, 0x00, 0xe1, 0xda, 0x30, 0x84, 0x73, 0xe3, 0x21, 0xd4, 0x59, 0x43, 0xc4, 0x6c, 0x10,
	0xc3, 0x7d, 0xdb, 0xc3, 0x63, 0xce, 0x62, 0x48, 0x3b, 0x87, 0x41, 0xd8, 0xdf, 0x9a, 0x40, 0xff,
	0xd3, 0xcf, 0x57, 0xc5, 0x75, 0x99, 0x94, 0xc3, 0x99, 0x7a, 0x03, 0x9d, 0xec, 0x25, 0x8a, 0xc2,
	0xf8, 0x3d, 0xa6, 0xc9, 0x18, 0x8d, 0x4d, 0x53, 0x65, 0x68, 0xc8, 0x59, 0x48, 0xd3, 0xd4, 0x87,
	0x81, 0xbf, 0x80, 0x4e, 0xf6, 0x72, 0x34, 0x18, 0xfd, 0xae, 0x33, 0xd4, 0x8b, 0x3e, 0x26, 0x43,
	0x95, 0xe1, 0x31, 0x67, 0x21, 0xcd, 0x50, 0x3f, 0xbe, 0xfd, 0xf1, 0x04, 0xb2, 0xfb, 0xf9, 0xb9,
	0x1e, 0x09, 0x8f, 0xad, 0xf9, 0x34, 0x6a, 0xb2, 0xe1, 0x24, 0xbd, 0x67, 0xa1, 0x62, 0x2f, 0x4b,
	0x5c, 0xcf, 0xaa, 0xb9, 0x30, 0x6d, 0x30, 0x57, 0xb7, 0x01, 0xed, 0xe7, 0x86, 0xd1, 0x3e, 0xae,
	0xbd, 0x9f, 0x93, 0x04, 0x8c, 0x7a, 0xa8, 0x8d, 0xf1, 0x98, 0x94, 0x2d, 0x02, 0x84, 0xe1, 0x71,
	0xe7, 0x54, 0x9a, 0xb7, 0x43, 0xf0, 0xf0, 0xbb, 0x1a, 0x55, 0x96, 0xbd, 0x51, 0x54, 0x26, 0x87,
	0xbb, 0x80, 0x6a, 0x7b, 0x18, 0xd5, 0x72, 0x8a, 0xea, 0x30, 0x9e, 0xd1, 0x24, 0x9e, 0x1c, 0x06,
	0x94, 0x66, 0xf2, 0x54, 0x9a, 0xc9, 0x43, 0x88, 0xec, 0xdf, 0x59, 0xe8, 0xfe, 0x7e, 0x3a, 0x77,
	0xf9, 0x9d, 0x81, 0x1c, 0x52, 0x34, 0xab, 0x53, 0x08, 0x65, 0x41, 0xf2, 0x3b, 0x6c, 0xa9, 0x00,
	0xf8, 0x3e, 0x0b, 0xf8, 0x9e, 0xc2, 0xa7, 0xb7, 0x79, 0xc4, 0xc3, 0x24, 0x24, 0x7a, 0x02, 0xd1,
	0x13, 0x08, 0x8f, 0x48, 0xbd, 0xab, 0x98, 0x2c, 0xd9, 0x4b, 0xb0, 0xe7, 0x01, 0x8d, 0x9b, 0x90,
	0x2e, 0x1a, 0x91, 0x65, 0x18, 0x39, 0xef, 0x14, 0x42, 0x1e, 0xe9, 0x41, 0x1d, 0x0b, 0xd7, 0xd1,
	0xac, 0xce, 0x47, 0x3f, 0xc4, 0x0c, 0x84, 0x78, 0x06, 0x42, 0x5c, 0xc1, 0xa7, 0xb7, 0x69, 0xe7,
	0x88, 0x10, 0xc4, 0x7e, 0x00, 0x42, 0xc8, 0x90, 0x06, 0xc1, 0x68, 0x0c, 0xda, 0xc9, 0x62, 0xd8,
	0x7f, 0x9e, 0x44, 0x8f, 0xf4, 0x97, 0xb8, 0x26, 0x22, 0xc5, 0x22, 0x25, 0x1d, 0xd6, 0x64, 0x9d,
	0x6d, 0xaa, 0x5c, 0xbf, 0xbf, 0xe0, 0x2e, 0x9a, 0x8c, 0xf5, 0xe7, 0xa5, 0x1c, 0xb1, 0x96, 0xa7,
	0xab, 0x2e, 0xa0, 0x78, 0x15, 0x2d, 0x38, 0xac, 0x99, 0x04, 0x34, 0xde, 0xe8, 0xb4, 0x62, 0x26,
	0xa5, 0x9e, 0x79, 0x79, 0xcf, 0x67, 0x24, 0x36, 0x9f, 0x09, 0xeb, 0x7d, 0x27, 0x6d, 0x9f, 0xbb,
	0x3e, 0x69, 0xf3, 0x20, 0xd0, 0x9b, 0x94, 0x68, 0x2a, 0x2b, 0x41, 0x24, 0xa3, 0xb1, 0xeb, 0x97,
	0x6c, 0x9c, 0x3a, 0x22, 0x7d, 0x4f, 0x8e, 0x89, 0x88, 0xdf, 0xb7, 0x50, 0x2e, 0x14, 0x9e, 0xe1,
	0xc0, 0x5c, 0xf9, 0x92, 0xa9, 0x9e, 0xa5, 0xbb, 0xc2, 0x5d, 0xda, 0x16, 0x1e, 0xab, 0x36, 0x00,
	0xed, 0x6b, 0xb8, 0x72, 0xdb, 0x67, 0x11, 0x91, 0xbe, 0x48, 0x02, 0x2f, 0x8d, 0xcc, 0xa3, 0x26,
	0x91, 0x4a, 0xb4, 0x9e, 0x25, 0xbb, 0x4a, 0xb4, 0x52, 0x0e, 0x8b, 0x88, 0x11, 0x9f, 0x2b, 0x22,
	0xe2, 0x74, 0x16, 0x69, 0x88, 0x98, 0xd0, 0x20, 0x78, 0xd6, 0x9e, 0x73, 0x58, 0x4b, 0xc4, 0x4a,
	0x9b, 0x69, 0x4c, 0xe5, 0x82, 0x7d, 0xf5, 0xba, 0xb3, 0xbb, 0x57, 0xdb, 0xbc, 0xbe, 0x67, 0x3b,
	0x00, 0x13, 0x73, 0x34, 0x03, 0xb9, 0xae, 0x19, 0x7e, 0x2d, 0x9d, 0x20, 0xd6, 0xf2, 0x6c, 0xf5,
	0x2a, 0x60, 0x78, 0x0e, 0x9f, 0xbb, 0x1e, 0xb9, 0x41, 0xe2, 0xa5, 0xbc, 0x0c, 0x69, 0xd4, 0x4d,
	0x37, 0xad, 0x47, 0x57, 0x88, 0x5d, 0x2a, 0x5a, 0x96, 0x3d, 0x57, 0x35, 0xdf, 0x5c, 0xbd, 0xc0,
	0x8e, 0x2a, 0x4f, 0x5c, 0xba, 0xe8, 0x14, 0x60, 0xb6, 0x19, 0xc0, 0x0c, 0x99, 0x9f, 0x35, 0xc0,
	0xbd, 0x94, 0x87, 0x48, 0xeb, 0x10, 0xe9, 0x19, 0x7c, 0xf6, 0xa8, 0x48, 0xd9, 0x41, 0xed, 0x07,
	0x9a, 0xad, 0xc0, 0xa7, 0xc1, 0x38, 0x08, 0xe6, 0xc2, 0x77, 0xec, 0xa0, 0x19, 0xa9, 0x68, 0xac,
	0x6a, 0xa2, 0xd1, 0x90, 0x4c, 0x2d, 0x4d, 0x00, 0x13, 0x2f, 0x40, 0x9c, 0xf3, 0xf8, 0xcc, 0xae,
	0x1e, 0x1b, 0xc8, 0x27, 0x55, 0x26, 0x24, 0x30, 0xd3, 0x98, 0xe8, 0x28, 0x4e, 0x01, 0x9c, 0xec,
	0xc0, 0x07, 0xfc, 0x02, 0x9a, 0x0a, 0x58, 0xd4, 0x54, 0xfe, 0xd2, 0xf1, 0xa1, 0xa3, 0xf3, 0xd8,
	0xa6, 0x68, 0x93, 0x06, 0x8d, 0xc9, 0x72, 0x46, 0xe7, 0xf3, 0x84, 0x47, 0x4a, 0x00, 0x5e, 0xf0,
	0xd8, 0x67, 0x4d, 0x39, 0x5f, 0xbe, 0x68, 0xfe, 0x39, 0xa9, 0x33, 0xfb, 0x61, 0x94, 0xd3, 0x5b,
	0x8e, 0x67, 0x50, 0xbe, 0xb2, 0xb5, 0xa5, 0xb7, 0x65, 0x77, 0xfe, 0x18, 0x9e, 0x45, 0xd3, 0xbd,
	0x6d, 0x9a, 0xb7, 0xec, 0x1f, 0xe7, 0xd1, 0xb9, 0x51, 0xfa, 0x6c, 0x71, 0xc5, 0x62, 0x1a, 0x1c,
	0x22, 0xfe, 0x1e, 0x3a, 0x11, 0x98, 0x01, 0xa8, 0x8c, 0x33, 0xd5, 0x55, 0x00, 0x7a, 0x19, 0x2d,
	0xa4, 0xf3, 0x07, 0xa8, 0xff, 0xd0, 0x6e, 0x9f, 0x2d, 0x90, 0x81, 0xd4, 0x92, 0x48, 0x15, 0xf3,
	0xa8, 0x59, 0x72, 0x32, 0x57, 0xf8, 0x3b, 0xc3, 0x9c, 0x7e, 0xe2, 0x48, 0x4e, 0x8f, 0x05, 0x65,
	0x58, 0xfd, 0x22, 0x00, 0xb9, 0xf5, 0x2f, 0x60, 0xf5, 0x38, 0x16, 0x7f, 0x1a, 0x7b, 0xfe, 0xd2,
	0xa1, 0x3d, 0x7f, 0x0e, 0xbc, 0xad, 0xde, 0xd3, 0x9e, 0x17, 0x2d, 0x6b, 0x74, 0xdb, 0xf1, 0x0b,
	0x63, 0xcf, 0x5c, 0x19, 0xfc, 0xaf, 0xdc, 0xcb, 0x99, 0x1b, 0x3e, 0x5f, 0xce, 0xb8, 0xf3, 0x75,
	0x09, 0xbc, 0x3e, 0x76, 0x0f, 0xe7, 0x6b, 0xe8, 0x30, 0xfd, 0xdc, 0x42, 0xa8, 0x23, 0xe2, 0x1a,
	0x8f, 0x6a, 0xfb, 0xac, 0xbb, 0x34, 0x0d, 0x3e, 0xbf, 0x6f, 0x81, 0xd3, 0xef, 0x5a, 0xf8, 0xdb,
	0x96, 0xd9, 0xce, 0x5e, 0x66, 0x43, 0x16, 0x8a, 0xb8, 0x4b, 0xda, 0x8c, 0x44, 0xcc, 0xd4, 0x4c,
	0x16, 0xc9, 0x24, 0x66, 0xfa, 0x8b, 0x27, 0x22, 0x65, 0xf6, 0x34, 0x22, 0x22, 0x89, 0x89, 0x68,
	0x47, 0xa4, 0x15, 0x0b, 0xad, 0x08, 0x4a, 0x64, 0x4f, 0xc3, 0xa2, 0x41, 0x20, 0xda, 0x92, 0x24,
	0x52, 0x1b, 0x8a, 0x7a, 0x23, 0x91, 0x2e, 0x55, 0x66, 0xc5, 0x29, 0x09, 0x0c, 0x37, 0x75, 0xf3,
	0x48, 0x23, 0x29, 0x41, 0xe8, 0x81, 0xe0, 0x9e, 0x36, 0xd2, 0x92, 0x57, 0x8f, 0x8a, 0x24, 0x96,
	0x2c, 0x38, 0x60, 0x12, 0x96, 0x93, 0xef, 0x88, 0xf8, 0x7a, 0x74, 0x83, 0x75, 0xf1, 0xc7, 0x16,
	0x2a, 0xe8, 0xc5, 0x88, 0x44, 0xc1, 0x6a, 0xd0, 0x7f, 0xe0, 0x6a, 0xa6, 0x3b, 0x22, 0xde, 0x49,
	0xd4, 0x0d, 0xd6, 0xbd, 0xbb, 0xea, 0xf1, 0xb5, 0x29, 0xb4, 0x38, 0x74, 0x50, 0xd3, 0x4a, 0xa1,
	0xd0, 0x42, 0x38, 0xa0, 0xe1, 0x8d, 0x6e, 0xd1, 0xc7, 0xa6, 0x50, 0x7e, 0x74, 0xe4, 0x7c, 0x1f,
	0xa9, 0xf6, 0xab, 0x0f, 0x40, 0xee, 0x16, 0xed, 0x85, 0xc1, 0x29, 0x20, 0x60, 0x36, 0x8f, 0x39,
	0xf3, 0xe1, 0x21, 0x3b, 0xfc, 0x0a, 0x2a, 0x0c, 0x6a, 0xcd, 0xe3, 0x10, 0xef, 0xcc, 0x48, 0xbc,
	0x31, 0x6a, 0xb9, 0xba, 0x08, 0x91, 0x66, 0xed, 0x82, 0x19, 0xcc, 0x62, 0x20, 0xda, 0x97, 0xb4,
	0x31, 0x5a, 0x18, 0xd5, 0x62, 0x39, 0x88, 0x71, 0x7e, 0x24, 0xc6, 0x51, 0x8a, 0xb3, 0xbf, 0xa4,
	0x41, 0xfd, 0x95, 0x85, 0xbb, 0x8f, 0x1f, 0x52, 0x82, 0xd7, 0x50, 0x0e, 0xf4, 0xce, 0x24, 0x84,
	0x79, 0x70, 0x24, 0xcc, 0x90, 0x12, 0xab, 0x2e, 0x80, 0xef, 0x82, 0x3d, 0x0d, 0x92, 0x47, 0x8f,
	0x6d, 0x1e, 0x73, 0xc0, 0x81, 0xd6, 0xe3, 0x6e, 0x5a, 0x46, 0x6b, 0x20, 0x25, 0x6a, 0xa1, 0x2e,
	0xa3, 0x50, 0x73, 0x0b, 0xe5, 0x95, 0x7b, 0xd1, 0x11, 0xd5, 0xff, 0x86, 0x30, 0xa7, 0xec, 0x93,
	0xd9, 0x24, 0x02, 0x1e, 0x09, 0x78, 0xdc, 0x3c, 0xe6, 0x60, 0x77, 0xc4, 0x18, 0x7f, 0xc9, 0x42,
	0xa7, 0x7a, 0x00, 0xd2, 0xca, 0x9f, 0x42, 0x38, 0x01, 0x10, 0x4a, 0xf7, 0x56, 0xf6, 0xab, 0x0f,
	0x02, 0x88, 0x25, 0xfb, 0x54, 0x0f, 0x44, 0xd6, 0x60, 0x32, 0x18, 0xbd, 0x05, 0x0f, 0x3a, 0x58,
	0xbd, 0xf5, 0x1b, 0x6d, 0xf7, 0x3c, 0xba, 0x5c, 0x69, 0xb5, 0x82, 0xae, 0x3e, 0x45, 0xfa, 0xc8,
	0x48, 0x10, 0x16, 0xc6, 0x35, 0x1c, 0xa8, 0x06, 0x0f, 0x74, 0xe1, 0x02, 0x5f, 0xfa, 0x98, 0xe8,
	0xca, 0x2b, 0x4b, 0x45, 0xbc, 0xc5, 0x43, 0xae, 0x48, 0xbd, 0xdb, 0x9f, 0x5e, 0x9d, 0x45, 0x85,
	0x24, 0xd2, 0x24, 0x6f, 0x70, 0x16, 0x78, 0xf6, 0x5f, 0x72, 0xe8, 0x74, 0x7f, 0x11, 0x9b, 0x54,
	0xfa, 0x15, 0x57, 0xcf, 0xdb, 0x69, 0x81, 0x73, 0x5c, 0x47, 0x79, 0xad, 0x65, 0x61, 0x5b, 0x2d,
	0x28, 0xfd, 0xd7, 0x60, 0x29, 0x15, 0x94, 0xaf, 0x76, 0x95, 0xd1, 0xbb, 0xe7, 0xb4, 0x6e, 0x0c,
	0x53, 0x51, 0x0b, 0x7a, 0x56, 0x34, 0x0c, 0x04, 0x5d, 0x1b, 0x40, 0x37, 0xfa, 0x54, 0x9a, 0x06,
	0x30, 0xfd, 0xe4, 0xc5, 0xac, 0x03, 0x9c, 0x08, 0x69, 0x07, 0xec, 0x7f, 0x68, 0xa1, 0xff, 0x12,
	0x07, 0x2c, 0xd6, 0xa6, 0x9e, 0x91, 0xcd, 0x2d, 0x11, 0x70, 0xb7, 0x0b, 0x67, 0x70, 0xae, 0xfc,
	0x7f, 0x23, 0xc9, 0x1e, 0xc1, 0x59, 0xda, 0xc9, 0xec, 0xf5, 0xa4, 0x5b, 0x60, 0x9d, 0x21, 0xc5,
	0x9f, 0xb9, 0xed, 0x53, 0x95, 0xb5, 0xd9, 0x6b, 0x8e, 0x43, 0x3c, 0x41, 0xda, 0x5c, 0xf9, 0x29,
	0x46, 0xa5, 0x47, 0x69, 0x3c, 0x2c, 0xec, 0xb3, 0x45, 0x43, 0x9d, 0x59, 0x14, 0xa3, 0xde, 0xf1,
	0x8f, 0x2c, 0xb4, 0xe0, 0x8a, 0x20, 0x60, 0xae, 0xaa, 0xb1, 0x8e, 0xaa, 0x51, 0xa5, 0x62, 0x09,
	0x27, 0x2c, 0x5f, 0xfd, 0x8a, 0x29, 0xa3, 0xef, 0x58, 0xf8, 0x95, 0xeb, 0x0d, 0xa2, 0xe2, 0x84,
	0xad, 0x10, 0xd6, 0x51, 0x2c, 0xf2, 0xf4, 0x6d, 0x4a, 0xa9, 0x98, 0xd7, 0x13, 0xe8, 0x37, 0x91,
	0x47, 0x1a, 0x01, 0x6d, 0x4a, 0x9d, 0x31, 0x68, 0x3b, 0x54, 0xfa, 0xcc, 0x33, 0x9d, 0x53, 0x43,
	0x6a, 0x0a, 0xbd, 0x9d, 0x4a, 0xc0, 0xed, 0xc8, 0x04, 0xd3, 0x1e, 0x74, 0x62, 0x83, 0x00, 0x04,
	0xe0, 0xe9, 0x35, 0xf3, 0x79, 0x9c, 0xff, 0x72, 0x4e, 0x87, 0x76, 0xee, 0x4b, 0x2d, 0x37, 0x3a,
	0xaa, 0xa2, 0x41, 0xda, 0x6f, 0x59, 0x68, 0x71, 0x4c, 0xc2, 0xf0, 0x19, 0x94, 0xdb, 0xbd, 0x71,
	0xfd, 0xd6, 0xfc, 0xb1, 0x62, 0xf1, 0x4f, 0x1f, 0xfd, 0xe2, 0x23, 0xeb, 0xe4, 0xee, 0x3e, 0x6f,
	0x91, 0xde, 0xe2, 0x4d, 0xbe, 0xf0, 0x3a, 0x9a, 0xdb, 0xac, 0xec, 0x6e, 0xd6, 0xf6, 0x9c, 0x17,
	0x6e, 0xae, 0x55, 0xf6, 0x36, 0xd6, 0xe7, 0xad, 0xe2, 0x45, 0x98, 0xff, 0xa8, 0xde, 0x17, 0xbd,
	0xdc, 0x48, 0x17, 0x77, 0x8f, 0x80, 0xa1, 0xa6, 0xa8, 0x68, 0x1c, 0xf6, 0x62, 0xff, 0x31, 0x8f,
	0x1e, 0xea, 0x6f, 0xe8, 0xba, 0x68, 0x47, 0x81, 0xa0, 0xde, 0x30, 0xf9, 0x1a, 0x03, 0xe4, 0x1b,
	0x7e, 0x08, 0xe8, 0x93, 0xef, 0xb1, 0x4f, 0x26, 0x9f, 0x97, 0x3a, 0x3f, 0x92, 0x80, 0x1f, 0x1e,
	0x49, 0xc0, 0x13, 0x40, 0xc0, 0xd5, 0x11, 0x02, 0x8e, 0xc5, 0xfb, 0x6f, 0x20, 0xe1, 0x3b, 0x13,
	0x68, 0x31, 0x91, 0x4c, 0x13, 0x90, 0xc5, 0x11, 0x0d, 0x6a, 0x52, 0x89, 0x98, 0x49, 0x28, 0x94,
	0xf9, 0xea, 0x2f, 0x0d, 0x0d, 0x3f, 0xb6, 0xf0, 0x4f, 0xad, 0x1e, 0x0f, 0x03, 0x21, 0xf6, 0x75,
	0x97, 0xd5, 0xaa, 0xc7, 0x63, 0x0d, 0x1e, 0x31, 0x8f, 0x64, 0xe6, 0xe9, 0x95, 0x14, 0x7c, 0x80,
	0xc6, 0x34, 0xe0, 0x52, 0xb1, 0x95, 0xe5, 0x11, 0x28, 0xe9, 0xb3, 0x70, 0x05, 0xf8, 0x2b, 0x1a,
	0x0d, 0x16, 0x83, 0xb7, 0x88, 0xb5, 0xb3, 0xd5, 0x88, 0xbe, 0x4b, 0xe3, 0x2d, 0x95, 0x01, 0xe9,
	0xfa, 0xeb, 0x0c, 0xc0, 0x90, 0x24, 0x0a, 0xa0, 0x7d, 0xf9, 0xac, 0x3f, 0xdf, 0xf5, 0x99, 0xbb,
	0x2f, 0x21, 0x17, 0x21, 0x97, 0x75, 0xe6, 0xd3, 0x03, 0xad, 0xc0, 0xf5, 0xde, 0x19, 0x3a, 0x2f,
	0x24, 0x92, 0x6d, 0xa4, 0xb3, 0x77, 0xc1, 0x39, 0xfe, 0xc9, 0xd8, 0xb3, 0x38, 0x0d, 0x49, 0x78,
	0xd7, 0x24, 0xe1, 0xcb, 0x16, 0x7e, 0xed, 0xde, 0xce, 0x62, 0xb6, 0xdc, 0x4f, 0xfd, 0x3c, 0xe2,
	0xb7, 0x2c, 0x84, 0x5c, 0x3f, 0x89, 0xf6, 0x07, 0x5f, 0x24, 0xea, 0x00, 0xfb, 0x15, 0xbc, 0x76,
	0x33, 0x09, 0xeb, 0xfa, 0x12, 0xd0, 0x48, 0x45, 0x6a, 0x4b, 0xdf, 0xf7, 0xf4, 0x6c, 0x43, 0x9a,
	0x71, 0x50, 0xb9, 0x24, 0x1e, 0x3f, 0xe0, 0xfa, 0xb7, 0x56, 0xe3, 0xa5, 0xa2, 0x35, 0x61, 0xa3,
	0x35, 0xb0, 0xd1, 0x11, 0xca, 0x53, 0x4f, 0x96, 0x2f, 0x97, 0xaf, 0x5c, 0x71, 0xa6, 0xc1, 0x0f,
	0x3c, 0x28, 0xfc, 0xea, 0x9f, 0xaa, 0x09, 0xce, 0x98, 0x9a, 0xf0, 0x0c, 0xcc, 0xbf, 0x32, 0xbe,
	0x26, 0x64, 0x49, 0x06, 0xb8, 0xcb, 0xfa, 0x20, 0x88, 0x44, 0x0d, 0x32, 0xec, 0x3c, 0x5e, 0x47,
	0x78, 0x7d, 0xe7, 0xf6, 0xcd, 0xad, 0x9d, 0xca, 0xfa, 0x80, 0xdf, 0x89, 0xe2, 0x0a, 0xf8, 0x3d,
	0x9b, 0x1d, 0xc1, 0xbf, 0xef, 0xdb, 0xfe, 0xed, 0xc4, 0x60, 0x83, 0xdb, 0x55, 0x54, 0x0d, 0xd7,
	0x98, 0xef, 0x59, 0x68, 0x36, 0x66, 0x52, 0x04, 0x07, 0xac, 0x16, 0xf0, 0x68, 0x5f, 0x42, 0x9b,
	0xcb, 0x57, 0xdf, 0x36, 0xb4, 0x79, 0x03, 0xdf, 0xe9, 0xb1, 0x46, 0xfb, 0xa4, 0x60, 0x6c, 0xea,
	0x4a, 0x57, 0x77, 0x50, 0x22, 0x15, 0x55, 0x84, 0x47, 0x0d, 0x11, 0x87, 0x46, 0xf0, 0xe9, 0x73,
	0xa3, 0x3d, 0x11, 0xa5, 0x8f, 0xb2, 0x92, 0x2b, 0x84, 0x37, 0x48, 0x83, 0x06, 0x32, 0x75, 0x01,
	0x06, 0xe6, 0xa2, 0xc9, 0xcc, 0x44, 0xae, 0x24, 0x0b, 0x1a, 0xbd, 0x17, 0x96, 0x98, 0xa9, 0x24,
	0x8e, 0x98, 0x57, 0x72, 0x66, 0x52, 0x64, 0x5b, 0x1a, 0x18, 0x7e, 0x6f, 0x2c, 0xcb, 0x27, 0x00,
	0x6e, 0x13, 0xd0, 0x52, 0xfc, 0xf4, 0x91, 0x68, 0x69, 0x20, 0x05, 0x69, 0x52, 0xe5, 0xb3, 0x78,
	0x1c, 0x37, 0xff, 0xe1, 0x66, 0xf2, 0xc1, 0x71, 0x34, 0x3f, 0xa8, 0x56, 0x41, 0x51, 0x73, 0x94,
	0xd3, 0xad, 0x2c, 0x15, 0xb5, 0xf6, 0x27, 0x37, 0xf0, 0xde, 0xfd, 0xf4, 0x7f, 0xf7, 0xe8, 0x3e,
	0x23, 0x14, 0x3a, 0xa1, 0xde, 0x48, 0x2d, 0x79, 0x40, 0xd7, 0x64, 0x5c, 0x2b, 0xd9, 0x39, 0x6d,
	0xad, 0xb5, 0xa2, 0x9e, 0x83, 0x63, 0x94, 0xcf, 0x68, 0x93, 0x6a, 0xf6, 0xb3, 0x77, 0x57, 0xae,
	0xab, 0x2b, 0x10, 0xf2, 0x2c, 0x2e, 0xf6, 0xa8, 0x34, 0x12, 0xcc, 0xce, 0x67, 0x63, 0x9b, 0xc7,
	0x9c, 0x5e, 0x1c, 0x7c, 0x07, 0xe5, 0xf4, 0x2e, 0xa6, 0x7a, 0x7a, 0x74, 0x79, 0x23, 0x34, 0xeb,
	0x5d, 0x98, 0xcb, 0xcf, 0x27, 0x52, 0x11, 0x3d, 0x7e, 0x48, 0xad, 0x41, 0xfd, 0x31, 0x3b, 0x6f,
	0x0e, 0x45, 0xc8, 0x14, 0xf5, 0xa8, 0xa2, 0x25, 0x3b, 0xa7, 0xa7, 0x83, 0x36, 0x56, 0x54, 0xad,
	0x3e, 0x05, 0x92, 0xf0, 0x12, 0x3a, 0x07, 0x0d, 0x45, 0x89, 0x5e, 0x23, 0xc9, 0x28, 0x9f, 0x36,
	0x93, 0x74, 0x1d, 0xa5, 0xe2, 0x94, 0x41, 0x52, 0xcd, 0xa3, 0x29, 0xc3, 0x07, 0xfb, 0xc3, 0x3c,
	0x9a, 0x1b, 0xd8, 0xb2, 0xb8, 0x29, 0xb1, 0x8f, 0x26, 0x5b, 0x54, 0xf9, 0x9a, 0xfd, 0xc7, 0x97,
	0xa7, 0xab, 0x0e, 0xc0, 0xdd, 0xc2, 0x8f, 0x57, 0x48, 0x33, 0x10, 0xf5, 0xc1, 0xd7, 0x40, 0x35,
	0xd0, 0xc7, 0x20, 0x06, 0x04, 0xd6, 0xc6, 0x25, 0x7b, 0xfe, 0x9a, 0x9e, 0xdc, 0x7f, 0x57, 0x91,
	0xe5, 0xe9, 0x97, 0xed, 0x47, 0x4b, 0xac, 0xc3, 0xec, 0x57, 0x1d, 0x13, 0x00, 0xff, 0x40, 0x17,
	0xbb, 0x9e, 0x7a, 0x5d, 0x9a, 0x24, 0xc7, 0x97, 0x0b, 0xe5, 0xe2, 0x38, 0x3d, 0x9d, 0x2a, 0x56,
	0x09, 0x58, 0x42, 0xbc, 0xb5, 0x77, 0x58, 0xf9, 0x66, 0x07, 0x86, 0xb6, 0x5a, 0x01, 0x37, 0x77,
	0x52, 0xbd, 0x83, 0x87, 0x93, 0xd0, 0x03, 0x48, 0x68, 0xdc, 0x4c, 0x42, 0x2d, 0xb2, 0x4b, 0x36,
	0x3c, 0x10, 0x13, 0x13, 0x8b, 0xf4, 0x82, 0xc9, 0x52, 0x39, 0xf7, 0xf2, 0xeb, 0x6f, 0xbe, 0xea,
	0x0c, 0x40, 0xc4, 0x71, 0x96, 0xb8, 0xf4, 0xfe, 0x71, 0xff, 0x98, 0x3b, 0x1a, 0x20, 0xad, 0x00,
	0xd2, 0xff, 0xc7, 0x0f, 0x8f, 0xdb, 0x9a, 0x43, 0xe2, 0xdc, 0x4e, 0xb7, 0xa5, 0x3c, 0xf3, 0xba,
	0xad, 0xf7, 0xd5, 0x5e, 0x25, 0xaf, 0xbf, 0xf9, 0xa6, 0x93, 0x46, 0xc2, 0xbf, 0xb6, 0xd0, 0x03,
	0xe9, 0x0d, 0xba, 0x16, 0x89, 0xa8, 0x96, 0x3e, 0xcb, 0x82, 0x38, 0x91, 0x20, 0x4b, 0xf2, 0xd5,
	0x6f, 0x9a, 0x12, 0xf5, 0x75, 0x0b, 0x7f, 0xd5, 0xda, 0xd2, 0x5d, 0xbd, 0x2e, 0x94, 0x6f, 0x9e,
	0x5f, 0xb2, 0x57, 0xdc, 0x3e, 0xb5, 0x22, 0x11, 0x3d, 0x3e, 0xfc, 0x75, 0xd9, 0x63, 0x07, 0xdc,
	0x65, 0x72, 0x85, 0x44, 0x34, 0x64, 0x1e, 0x69, 0xf1, 0x96, 0xfe, 0x21, 0x85, 0xbb, 0xcf, 0x94,
	0x3c, 0x5f, 0x22, 0x37, 0x77, 0xf6, 0x36, 0x56, 0x4d, 0xdf, 0xe6, 0x52, 0x17, 0xd7, 0x2e, 0xf1,
	0xf4, 0x5d, 0x2f, 0x16, 0x89, 0xf1, 0xd9, 0xef, 0xe6, 0xf0, 0x28, 0x0c, 0x4b, 0x75, 0x69, 0x6c,
	0xf4, 0xca, 0xa9, 0x14, 0xfe, 0x4d, 0x11, 0xa5, 0x2f, 0xc4, 0x57, 0xa1, 0x55, 0xb4, 0xd0, 0x4c,
	0x43, 0x04, 0x81, 0x68, 0xa7, 0xe5, 0x36, 0x0f, 0x6b, 0x49, 0xff, 0xc6, 0x82, 0xab, 0xbb, 0xe9,
	0x6b, 0x58, 0x37, 0xac, 0xeb, 0x06, 0x04, 0x05, 0x52, 0x2b, 0x10, 0x62, 0x8c, 0xa0, 0xa3, 0x91,
	0x98, 0xb9, 0x49, 0x2c, 0xf9, 0x01, 0x23, 0x1e, 0x8f, 0x99, 0xab, 0x44, 0xdc, 0x25, 0x01, 0x97,
	0x8a, 0x47, 0x4d, 0xf3, 0x32, 0x50, 0x30, 0xb3, 0x4d, 0xdd, 0xfc, 0x86, 0x85, 0x72, 0x1d, 0x8f,
	0x1d, 0x80, 0x20, 0x98, 0x1b, 0xc3, 0x35, 0x7d, 0x02, 0x4a, 0x2f, 0xad, 0xb3, 0x83, 0x2a, 0x03,
	0x18, 0x35, 0x7c, 0xa3, 0x0a, 0xba, 0x43, 0xc4, 0xa4, 0xed, 0xb3, 0x88, 0x30, 0x57, 0x24, 0x91,
	0x62, 0xf0, 0x40, 0x61, 0xb2, 0x46, 0xea, 0x22, 0x89, 0x3c, 0x1a, 0x73, 0xad, 0x33, 0x7d, 0x4d,
	0x25, 0x0f, 0xa4, 0x41, 0x1f, 0x99, 0x79, 0xd6, 0x48, 0x0b, 0xeb, 0xec, 0x5a, 0x2c, 0xa4, 0x24,
	0xeb, 0x26, 0xe3, 0x0e, 0xc0, 0xb1, 0x3f, 0xb0, 0x50, 0x4e, 0x47, 0xc5, 0x17, 0xd0, 0xe4, 0xcd,
	0x8d, 0x17, 0x37, 0x9c, 0xf9, 0x63, 0xc5, 0x33, 0xd0, 0xdc, 0x1e, 0xbc, 0xc9, 0x0e, 0x74, 0x97,
	0x07, 0xa3, 0x91, 0x80, 0x25, 0x7c, 0x09, 0x4d, 0x55, 0xb6, 0x6e, 0x57, 0x3e, 0xbf, 0x3b, 0x6f,
	0x15, 0x1f, 0x01, 0x8b, 0x87, 0x2a, 0x41, 0x9b, 0x76, 0xe5, 0xd1, 0x26, 0xeb, 0x68, 0x72, 0x6b,
	0x67, 0xad, 0xb2, 0x35, 0x3f, 0x51, 0x7c, 0x1a, 0x2c, 0x9e, 0x58, 0x67, 0xd2, 0x65, 0x91, 0x51,
	0x08, 0xa9, 0xf0, 0xeb, 0x4a, 0xc5, 0x42, 0x49, 0x44, 0x44, 0x5a, 0x7e, 0x57, 0x72, 0x97, 0x06,
	0xa9, 0x2b, 0xfd, 0x2d, 0xe8, 0x96, 0xea, 0x53, 0x90, 0xba, 0x27, 0xfe, 0x16, 0x00, 0x00, 0xff,
	0xff, 0xd5, 0x8a, 0x74, 0x02, 0x57, 0x1d, 0x00, 0x00,
}
