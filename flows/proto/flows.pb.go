// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flows.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	flows.proto

It has these top-level messages:
	FlowReference
	FlowContext
	FlowRunnerArgs
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "www.velocidex.com/golang/velociraptor/proto"
import proto3 "www.velocidex.com/golang/velociraptor/crypto/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowContext_State int32

const (
	FlowContext_RUNNING    FlowContext_State = 0
	FlowContext_TERMINATED FlowContext_State = 1
	FlowContext_ERROR      FlowContext_State = 3
	// A well known flow will not queue any messages and always
	// forward messages to the worker:
	FlowContext_WELL_KNOWN FlowContext_State = 2
)

var FlowContext_State_name = map[int32]string{
	0: "RUNNING",
	1: "TERMINATED",
	3: "ERROR",
	2: "WELL_KNOWN",
}
var FlowContext_State_value = map[string]int32{
	"RUNNING":    0,
	"TERMINATED": 1,
	"ERROR":      3,
	"WELL_KNOWN": 2,
}

func (x FlowContext_State) String() string {
	return proto1.EnumName(FlowContext_State_name, int32(x))
}
func (FlowContext_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type FlowReference struct {
	FlowId   string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *FlowReference) Reset()                    { *m = FlowReference{} }
func (m *FlowReference) String() string            { return proto1.CompactTextString(m) }
func (*FlowReference) ProtoMessage()               {}
func (*FlowReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlowReference) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *FlowReference) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// The flow context.
// Next field: 17
type FlowContext struct {
	Backtrace            string                  `protobuf:"bytes,1,opt,name=backtrace" json:"backtrace,omitempty"`
	ClientResources      *proto3.ClientResources `protobuf:"bytes,2,opt,name=client_resources,json=clientResources" json:"client_resources,omitempty"`
	CreateTime           uint64                  `protobuf:"varint,3,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	Creator              string                  `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	CurrentState         string                  `protobuf:"bytes,5,opt,name=current_state,json=currentState" json:"current_state,omitempty"`
	KillTimestamp        uint64                  `protobuf:"varint,6,opt,name=kill_timestamp,json=killTimestamp" json:"kill_timestamp,omitempty"`
	NetworkBytesSent     uint64                  `protobuf:"varint,7,opt,name=network_bytes_sent,json=networkBytesSent" json:"network_bytes_sent,omitempty"`
	NextOutboundId       uint64                  `protobuf:"varint,8,opt,name=next_outbound_id,json=nextOutboundId" json:"next_outbound_id,omitempty"`
	NextProcessedRequest uint64                  `protobuf:"varint,9,opt,name=next_processed_request,json=nextProcessedRequest" json:"next_processed_request,omitempty"`
	//  repeated OutputPluginState output_plugins_states = 10;
	OutstandingRequests uint64 `protobuf:"varint,11,opt,name=outstanding_requests,json=outstandingRequests" json:"outstanding_requests,omitempty"`
	// DEPRECATED
	//  uint64 remaining_cpu_quota = 12;
	SessionId    string            `protobuf:"bytes,13,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	State        FlowContext_State `protobuf:"varint,14,opt,name=state,enum=proto.FlowContext_State" json:"state,omitempty"`
	Status       string            `protobuf:"bytes,15,opt,name=status" json:"status,omitempty"`
	UserNotified bool              `protobuf:"varint,16,opt,name=user_notified,json=userNotified" json:"user_notified,omitempty"`
}

func (m *FlowContext) Reset()                    { *m = FlowContext{} }
func (m *FlowContext) String() string            { return proto1.CompactTextString(m) }
func (*FlowContext) ProtoMessage()               {}
func (*FlowContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FlowContext) GetBacktrace() string {
	if m != nil {
		return m.Backtrace
	}
	return ""
}

func (m *FlowContext) GetClientResources() *proto3.ClientResources {
	if m != nil {
		return m.ClientResources
	}
	return nil
}

func (m *FlowContext) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *FlowContext) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *FlowContext) GetCurrentState() string {
	if m != nil {
		return m.CurrentState
	}
	return ""
}

func (m *FlowContext) GetKillTimestamp() uint64 {
	if m != nil {
		return m.KillTimestamp
	}
	return 0
}

func (m *FlowContext) GetNetworkBytesSent() uint64 {
	if m != nil {
		return m.NetworkBytesSent
	}
	return 0
}

func (m *FlowContext) GetNextOutboundId() uint64 {
	if m != nil {
		return m.NextOutboundId
	}
	return 0
}

func (m *FlowContext) GetNextProcessedRequest() uint64 {
	if m != nil {
		return m.NextProcessedRequest
	}
	return 0
}

func (m *FlowContext) GetOutstandingRequests() uint64 {
	if m != nil {
		return m.OutstandingRequests
	}
	return 0
}

func (m *FlowContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FlowContext) GetState() FlowContext_State {
	if m != nil {
		return m.State
	}
	return FlowContext_RUNNING
}

func (m *FlowContext) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FlowContext) GetUserNotified() bool {
	if m != nil {
		return m.UserNotified
	}
	return false
}

// Next field: 23
type FlowRunnerArgs struct {
	Priority          proto3.GrrMessage_Priority `protobuf:"varint,1,opt,name=priority,enum=proto.GrrMessage_Priority" json:"priority,omitempty"`
	NotifyToUser      bool                       `protobuf:"varint,2,opt,name=notify_to_user,json=notifyToUser" json:"notify_to_user,omitempty"`
	SendReplies       bool                       `protobuf:"varint,3,opt,name=send_replies,json=sendReplies" json:"send_replies,omitempty"`
	ClientId          string                     `protobuf:"bytes,5,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Queue             string                     `protobuf:"bytes,6,opt,name=queue" json:"queue,omitempty"`
	EventId           string                     `protobuf:"bytes,7,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CpuLimit          uint64                     `protobuf:"varint,9,opt,name=cpu_limit,json=cpuLimit" json:"cpu_limit,omitempty"`
	NetworkBytesLimit uint64                     `protobuf:"varint,13,opt,name=network_bytes_limit,json=networkBytesLimit" json:"network_bytes_limit,omitempty"`
	//
	// RequestState request_state = 10 [(sem_type) = {
	// description: "The request state of the parent flow.",
	// label: HIDDEN,
	// }];
	FlowName                 string         `protobuf:"bytes,11,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	BaseSessionId            string         `protobuf:"bytes,12,opt,name=base_session_id,json=baseSessionId" json:"base_session_id,omitempty"`
	StartTime                uint64         `protobuf:"varint,15,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	LogsCollectionUrn        string         `protobuf:"bytes,17,opt,name=logs_collection_urn,json=logsCollectionUrn" json:"logs_collection_urn,omitempty"`
	WriteIntermediateResults bool           `protobuf:"varint,18,opt,name=write_intermediate_results,json=writeIntermediateResults" json:"write_intermediate_results,omitempty"`
	RequireFastpoll          bool           `protobuf:"varint,19,opt,name=require_fastpoll,json=requireFastpoll" json:"require_fastpoll,omitempty"`
	OriginalFlow             *FlowReference `protobuf:"bytes,22,opt,name=original_flow,json=originalFlow" json:"original_flow,omitempty"`
}

func (m *FlowRunnerArgs) Reset()                    { *m = FlowRunnerArgs{} }
func (m *FlowRunnerArgs) String() string            { return proto1.CompactTextString(m) }
func (*FlowRunnerArgs) ProtoMessage()               {}
func (*FlowRunnerArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FlowRunnerArgs) GetPriority() proto3.GrrMessage_Priority {
	if m != nil {
		return m.Priority
	}
	return proto3.GrrMessage_LOW_PRIORITY
}

func (m *FlowRunnerArgs) GetNotifyToUser() bool {
	if m != nil {
		return m.NotifyToUser
	}
	return false
}

func (m *FlowRunnerArgs) GetSendReplies() bool {
	if m != nil {
		return m.SendReplies
	}
	return false
}

func (m *FlowRunnerArgs) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *FlowRunnerArgs) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *FlowRunnerArgs) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *FlowRunnerArgs) GetCpuLimit() uint64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetNetworkBytesLimit() uint64 {
	if m != nil {
		return m.NetworkBytesLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetFlowName() string {
	if m != nil {
		return m.FlowName
	}
	return ""
}

func (m *FlowRunnerArgs) GetBaseSessionId() string {
	if m != nil {
		return m.BaseSessionId
	}
	return ""
}

func (m *FlowRunnerArgs) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FlowRunnerArgs) GetLogsCollectionUrn() string {
	if m != nil {
		return m.LogsCollectionUrn
	}
	return ""
}

func (m *FlowRunnerArgs) GetWriteIntermediateResults() bool {
	if m != nil {
		return m.WriteIntermediateResults
	}
	return false
}

func (m *FlowRunnerArgs) GetRequireFastpoll() bool {
	if m != nil {
		return m.RequireFastpoll
	}
	return false
}

func (m *FlowRunnerArgs) GetOriginalFlow() *FlowReference {
	if m != nil {
		return m.OriginalFlow
	}
	return nil
}

func init() {
	proto1.RegisterType((*FlowReference)(nil), "proto.FlowReference")
	proto1.RegisterType((*FlowContext)(nil), "proto.FlowContext")
	proto1.RegisterType((*FlowRunnerArgs)(nil), "proto.FlowRunnerArgs")
	proto1.RegisterEnum("proto.FlowContext_State", FlowContext_State_name, FlowContext_State_value)
}

func init() { proto1.RegisterFile("flows.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x8e, 0x1c, 0x49,
	0x11, 0xa6, 0x66, 0x77, 0x7e, 0x3a, 0x7b, 0xa6, 0xa7, 0x9d, 0x63, 0x59, 0x25, 0x0b, 0xa1, 0xd4,
	0xb0, 0x62, 0x67, 0x61, 0xa8, 0x59, 0x3c, 0xd6, 0xb2, 0x2c, 0xac, 0x60, 0x7a, 0x7e, 0xac, 0xd6,
	0xda, 0xed, 0xa5, 0x66, 0xbc, 0x2b, 0x10, 0xa2, 0x94, 0x5d, 0x15, 0xdd, 0x93, 0xeb, 0xac, 0xcc,
	0xda, 0xcc, 0x2c, 0xb7, 0x5b, 0x3c, 0x01, 0x4f, 0xc0, 0x95, 0x1b, 0x37, 0x24, 0x84, 0xb8, 0x71,
	0xe0, 0xc0, 0x93, 0xc0, 0x85, 0x87, 0xe0, 0x80, 0x22, 0xaa, 0xaa, 0xdd, 0xb6, 0x8c, 0xb4, 0xa7,
	0xee, 0x8c, 0xf8, 0x32, 0xbe, 0x2f, 0x23, 0x23, 0x22, 0x8b, 0xf5, 0x67, 0xda, 0x2e, 0x7c, 0x52,
	0x39, 0x1b, 0x2c, 0xdf, 0xa4, 0x9f, 0xfb, 0x9f, 0x2c, 0x16, 0x8b, 0xe4, 0x05, 0x68, 0x9b, 0xab,
	0x02, 0x5e, 0x26, 0xb9, 0x2d, 0x4f, 0xe6, 0x56, 0x4b, 0x33, 0x3f, 0x69, 0x8c, 0x4e, 0x56, 0xc1,
	0xba, 0x13, 0x02, 0x9f, 0x78, 0x28, 0xa5, 0x09, 0x2a, 0x6f, 0x42, 0xdc, 0xff, 0xf4, 0x9b, 0xed,
	0xcd, 0xdd, 0xb2, 0x0a, 0xb6, 0x0d, 0xf1, 0x95, 0x9d, 0xb6, 0x0a, 0x0e, 0xff, 0x1a, 0xb1, 0xbd,
	0x2b, 0x6d, 0x17, 0x29, 0xcc, 0xc0, 0x81, 0xc9, 0x81, 0x3f, 0x62, 0xdb, 0x28, 0x31, 0x53, 0x45,
	0x1c, 0x89, 0xe8, 0xa8, 0x37, 0x4a, 0xfe, 0xf5, 0xdf, 0x7f, 0xff, 0x33, 0x3a, 0xe2, 0xdf, 0xbb,
	0xb9, 0x05, 0xe1, 0xc1, 0x7b, 0x65, 0x8d, 0x50, 0x85, 0xb0, 0x33, 0x11, 0x6e, 0x41, 0xb8, 0x6e,
	0x67, 0x21, 0x70, 0x5f, 0x92, 0x6e, 0xe1, 0xcf, 0xb8, 0xe0, 0xbf, 0x62, 0xbd, 0x5c, 0x2b, 0x30,
	0x01, 0x43, 0x6d, 0x50, 0xa8, 0x9f, 0x51, 0xa8, 0x8f, 0x58, 0xef, 0x9c, 0x1c, 0xcf, 0xd2, 0x09,
	0xff, 0x00, 0xa3, 0x36, 0x38, 0x0c, 0xfa, 0x96, 0x88, 0xc2, 0x49, 0x23, 0xac, 0x49, 0xd2, 0x9d,
	0x06, 0x36, 0x2e, 0x0e, 0xff, 0xb1, 0xc9, 0xfa, 0xa8, 0xfa, 0xdc, 0x9a, 0x00, 0x2f, 0x03, 0xff,
	0x36, 0xeb, 0x4d, 0x65, 0xfe, 0x3c, 0x38, 0x99, 0x43, 0xa3, 0x3a, 0x7d, 0x65, 0xe0, 0x67, 0x6c,
	0xd8, 0x0a, 0x71, 0xe0, 0x6d, 0xed, 0x72, 0xf0, 0xa4, 0xa7, 0xff, 0xe0, 0x5e, 0x93, 0x85, 0xa4,
	0x91, 0x93, 0x76, 0xde, 0x74, 0x3f, 0x7f, 0xdd, 0xc0, 0x1f, 0xb2, 0x7e, 0xee, 0x40, 0x06, 0xc8,
	0x82, 0x2a, 0x21, 0x7e, 0x47, 0x44, 0x47, 0xef, 0x8e, 0x0e, 0xe8, 0x34, 0x7b, 0xac, 0x9f, 0x5e,
	0x5c, 0x5d, 0xc8, 0x00, 0xe8, 0x4a, 0x59, 0x83, 0xbb, 0x51, 0x25, 0xf0, 0x98, 0x6d, 0xd3, 0xca,
	0xba, 0xf8, 0x5d, 0x12, 0xd5, 0x2d, 0xf9, 0x77, 0xd9, 0x5e, 0x5e, 0x3b, 0x87, 0x9a, 0x7c, 0x90,
	0x01, 0xe2, 0x4d, 0xf2, 0xef, 0xb6, 0xc6, 0x6b, 0xb4, 0xf1, 0x4f, 0xd8, 0xe0, 0xb9, 0xd2, 0x9a,
	0x28, 0x7d, 0x90, 0x65, 0x15, 0x6f, 0xfd, 0x7f, 0xde, 0x3d, 0x84, 0xde, 0x74, 0x48, 0x7e, 0xcc,
	0xb8, 0x81, 0xb0, 0xb0, 0xee, 0x79, 0x36, 0x5d, 0x06, 0xf0, 0x99, 0x07, 0x13, 0xe2, 0x6d, 0xdc,
	0x9f, 0x0e, 0x5b, 0xcf, 0x08, 0x1d, 0xd7, 0x60, 0x02, 0x3f, 0x62, 0x43, 0x03, 0x2f, 0x43, 0x66,
	0xeb, 0x30, 0xb5, 0xb5, 0x29, 0xf0, 0xc6, 0x76, 0x08, 0x3b, 0x40, 0xfb, 0xd3, 0xd6, 0x3c, 0x2e,
	0xf8, 0x43, 0x76, 0x8f, 0x90, 0x95, 0xb3, 0x39, 0x78, 0x0f, 0x45, 0xe6, 0xe0, 0xeb, 0x1a, 0x7c,
	0x88, 0x7b, 0x84, 0xbf, 0x8b, 0xde, 0xcf, 0x3b, 0x67, 0xda, 0xf8, 0xf8, 0x8f, 0xd8, 0x5d, 0x5b,
	0x07, 0x1f, 0xa4, 0x29, 0x94, 0x99, 0x77, 0x5b, 0x7c, 0xdc, 0xa7, 0x3d, 0x07, 0x6b, 0xbe, 0x76,
	0x87, 0xe7, 0x1f, 0x32, 0xd6, 0xd6, 0x1a, 0x8a, 0xd9, 0xa3, 0xf2, 0xb9, 0x43, 0x07, 0xef, 0xb3,
	0xde, 0x75, 0xe3, 0x19, 0x5f, 0xa4, 0xbd, 0x16, 0x34, 0x2e, 0x78, 0xc2, 0x36, 0x9b, 0x5c, 0x0e,
	0x44, 0x74, 0x34, 0x78, 0x10, 0xb7, 0x77, 0xbb, 0x56, 0x27, 0x09, 0xe5, 0x35, 0x6d, 0x60, 0xfc,
	0x1e, 0xdb, 0xc2, 0x3f, 0xb5, 0x8f, 0xf7, 0x29, 0xf9, 0xed, 0x0a, 0xef, 0xa6, 0xf6, 0xe0, 0x32,
	0x63, 0x83, 0x9a, 0x29, 0x28, 0xe2, 0xa1, 0x88, 0x8e, 0x76, 0xd2, 0x5d, 0x34, 0x4e, 0x5a, 0xdb,
	0xe1, 0xcf, 0xd9, 0x66, 0x73, 0x49, 0x7d, 0xb6, 0x9d, 0x3e, 0x9b, 0x4c, 0xc6, 0x93, 0x47, 0xc3,
	0x6f, 0xf1, 0x01, 0x63, 0x37, 0x97, 0xe9, 0x93, 0xf1, 0xe4, 0xec, 0xe6, 0xf2, 0x62, 0x18, 0xf1,
	0x1e, 0xdb, 0xbc, 0x4c, 0xd3, 0xa7, 0xe9, 0xf0, 0x1d, 0x74, 0x7d, 0x79, 0xf9, 0xf8, 0x71, 0xf6,
	0xd9, 0xe4, 0xe9, 0x97, 0x93, 0xe1, 0xc6, 0xe1, 0x9f, 0x06, 0x6c, 0x40, 0x8d, 0x57, 0x1b, 0x03,
	0xee, 0xcc, 0xcd, 0x3d, 0x9f, 0xb2, 0x9d, 0xca, 0x29, 0xeb, 0x54, 0x58, 0x52, 0x11, 0x0f, 0x1e,
	0xdc, 0x6f, 0xcf, 0xf0, 0xc8, 0xb9, 0x27, 0xe0, 0xbd, 0x9c, 0x43, 0xf2, 0x79, 0x8b, 0x18, 0x7d,
	0x9f, 0x92, 0xf1, 0x1e, 0x17, 0xd8, 0x40, 0xdd, 0x3e, 0x51, 0x7b, 0xec, 0x1a, 0xeb, 0x44, 0xb8,
	0x55, 0xbe, 0x69, 0xc8, 0x38, 0x4a, 0x57, 0x71, 0xb9, 0x67, 0x03, 0x3a, 0xd7, 0x32, 0x0b, 0x36,
	0xc3, 0x13, 0x51, 0x27, 0xec, 0x8c, 0x9e, 0x50, 0xb4, 0x47, 0xfc, 0xe4, 0xfa, 0xd6, 0xd6, 0xba,
	0x10, 0x52, 0x34, 0xc7, 0xcf, 0x65, 0xc0, 0x76, 0x9f, 0x62, 0xe7, 0x9b, 0x20, 0x82, 0xa5, 0x0e,
	0x55, 0x46, 0x05, 0x85, 0x85, 0x9c, 0x1c, 0xde, 0xa5, 0x94, 0x2c, 0x85, 0x0c, 0xe2, 0xdc, 0x96,
	0x95, 0x06, 0xc4, 0xa7, 0xbb, 0x0d, 0xc9, 0x8d, 0x7d, 0xe6, 0xc1, 0x71, 0xc3, 0x76, 0x3d, 0x18,
	0x2c, 0x95, 0x4a, 0x2b, 0xf0, 0xd4, 0x3e, 0x3b, 0xa3, 0xcf, 0x88, 0xf2, 0x92, 0x9f, 0xb6, 0x94,
	0x08, 0x11, 0x2d, 0x44, 0x60, 0xf7, 0x76, 0x6c, 0x95, 0xc4, 0x9e, 0x68, 0x66, 0x81, 0x75, 0x28,
	0x2c, 0x89, 0x37, 0x0e, 0x77, 0xaf, 0x11, 0x9f, 0x36, 0xf8, 0xb4, 0x8f, 0xbb, 0xdb, 0x05, 0xff,
	0x62, 0x7d, 0xf2, 0x50, 0x67, 0x8d, 0x7e, 0x42, 0x64, 0xa7, 0xeb, 0x93, 0xe7, 0xbd, 0x37, 0x27,
	0x4f, 0x9b, 0x30, 0x61, 0x2b, 0x70, 0x32, 0x80, 0xc7, 0xa1, 0x13, 0x6f, 0xbc, 0x1a, 0x3b, 0x7c,
	0xcc, 0x36, 0xbf, 0xae, 0xa1, 0x06, 0xea, 0xc3, 0xde, 0xe8, 0x94, 0x62, 0xfe, 0x90, 0x6d, 0xa5,
	0x17, 0x57, 0x18, 0xf0, 0x3b, 0x18, 0x90, 0x00, 0xa8, 0xbc, 0xf6, 0xd0, 0x5e, 0x04, 0xb4, 0xf7,
	0xb0, 0xf1, 0x20, 0xba, 0x4a, 0x9b, 0x08, 0xfc, 0x97, 0x6c, 0x07, 0x5e, 0xb4, 0x0a, 0xb7, 0x29,
	0xda, 0x47, 0x14, 0xed, 0x43, 0x7e, 0x7c, 0x26, 0xb4, 0x9d, 0xcf, 0x95, 0x99, 0x0b, 0x42, 0xa0,
	0x36, 0x8c, 0xa3, 0xbc, 0xaf, 0xd1, 0x38, 0xab, 0x5d, 0xb8, 0x05, 0x87, 0x20, 0x8f, 0xf2, 0xb6,
	0x09, 0x35, 0x2e, 0xf8, 0x6f, 0x59, 0x2f, 0xaf, 0xea, 0x4c, 0xab, 0x52, 0xb5, 0xdd, 0x38, 0x3a,
	0xa3, 0x98, 0x3f, 0xe5, 0x0f, 0xcf, 0x04, 0x99, 0x85, 0x35, 0xa4, 0xa7, 0x3d, 0x75, 0x5e, 0xd5,
	0xc2, 0x43, 0x6e, 0x4d, 0xe1, 0x9b, 0xc2, 0x99, 0x2e, 0x5f, 0xab, 0x9b, 0x8f, 0xff, 0xf8, 0x71,
	0xba, 0x93, 0x57, 0xf5, 0x63, 0xdc, 0xcb, 0x15, 0x3b, 0x78, 0x7d, 0xa4, 0x34, 0x4c, 0x7b, 0xc4,
	0xd4, 0xe6, 0x97, 0x9f, 0xbc, 0xc1, 0x14, 0x6c, 0x90, 0x5a, 0x04, 0x27, 0x67, 0x33, 0x95, 0xbf,
	0x95, 0x24, 0xbd, 0xb3, 0x3e, 0x8e, 0x1a, 0xaa, 0x5f, 0xb3, 0x1e, 0xbd, 0x41, 0x46, 0x96, 0x40,
	0x43, 0xa2, 0x37, 0xfa, 0x94, 0x08, 0x7e, 0xcc, 0x4f, 0x31, 0xc9, 0x68, 0xef, 0xde, 0x9f, 0x5c,
	0x4b, 0xef, 0x85, 0xc2, 0xd2, 0x2b, 0xc1, 0x04, 0x4c, 0x51, 0x97, 0x72, 0xbc, 0x06, 0x57, 0x37,
	0x97, 0x88, 0xeb, 0x89, 0x2c, 0x81, 0xff, 0x8e, 0xed, 0x4f, 0xa5, 0x87, 0x6c, 0x6d, 0xba, 0xec,
	0x12, 0xc3, 0x35, 0x31, 0x3c, 0x59, 0x5d, 0xe7, 0xd9, 0x1b, 0xef, 0xdd, 0xfa, 0x65, 0x62, 0x58,
	0x03, 0x2e, 0x11, 0xe3, 0x19, 0xd6, 0xa3, 0xf0, 0x15, 0xe4, 0x34, 0x18, 0xc4, 0x02, 0x44, 0x29,
	0x9f, 0x83, 0xb0, 0x06, 0x90, 0x77, 0x0f, 0xb9, 0xae, 0x57, 0x33, 0xea, 0xf7, 0x11, 0x63, 0x3e,
	0x48, 0x17, 0x9a, 0x77, 0x64, 0x9f, 0x72, 0xf7, 0x15, 0x11, 0x17, 0xaf, 0xcd, 0x73, 0x7e, 0x7d,
	0x61, 0x29, 0x72, 0x3b, 0x68, 0xd7, 0xca, 0xb3, 0x36, 0x41, 0xe9, 0x66, 0x8d, 0xc8, 0x44, 0x1c,
	0x8d, 0xcb, 0xa6, 0x69, 0x56, 0xea, 0x94, 0x47, 0x81, 0x42, 0xfa, 0xa5, 0xc9, 0x9d, 0x35, 0xb6,
	0xf6, 0x7a, 0x99, 0x7c, 0x80, 0xc9, 0xee, 0x11, 0x3b, 0xbd, 0x4e, 0x25, 0x3b, 0xc0, 0x1a, 0xca,
	0x72, 0xab, 0x35, 0xe4, 0xd8, 0xb6, 0x59, 0xed, 0x4c, 0x7c, 0x67, 0x3d, 0xdd, 0xab, 0x64, 0xfc,
	0x00, 0x93, 0x81, 0x70, 0xf1, 0x0a, 0x8e, 0xe9, 0xd5, 0x76, 0x8e, 0x3f, 0x6f, 0x14, 0x7a, 0x7a,
	0x07, 0xa1, 0xe7, 0x2b, 0xe4, 0x33, 0x67, 0xf8, 0x5f, 0x22, 0x76, 0x7f, 0xe1, 0x54, 0x80, 0x4c,
	0x99, 0x00, 0xae, 0x84, 0x42, 0xe1, 0x7b, 0xea, 0xc0, 0xd7, 0x3a, 0xf8, 0x98, 0xd3, 0x4c, 0xf0,
	0x44, 0x5b, 0x72, 0x35, 0x9e, 0x89, 0xe0, 0x6a, 0x38, 0x16, 0x52, 0x6b, 0x91, 0xdf, 0x2a, 0xdd,
	0x7d, 0x0b, 0x34, 0x70, 0xe1, 0x20, 0x07, 0xf5, 0x02, 0xf3, 0xad, 0xc2, 0x2d, 0x8d, 0x0e, 0x9c,
	0x1c, 0x4b, 0xb1, 0x50, 0x5a, 0xe3, 0xb4, 0x42, 0xa6, 0x00, 0xa6, 0x1b, 0x21, 0xb8, 0xf7, 0x7d,
	0x2f, 0x0a, 0x98, 0xc9, 0x5a, 0x87, 0xb5, 0x33, 0x60, 0x4e, 0x62, 0x92, 0x35, 0x5e, 0x53, 0x95,
	0x36, 0x2c, 0xfc, 0x3f, 0x11, 0x1b, 0xe2, 0x63, 0xa5, 0x1c, 0x64, 0x33, 0xe9, 0x43, 0x65, 0xb5,
	0x8e, 0x0f, 0x48, 0xe9, 0xdf, 0x23, 0x92, 0xfa, 0xb7, 0x88, 0xff, 0x39, 0xba, 0xc1, 0xbb, 0x78,
	0x21, 0x75, 0x0d, 0x98, 0xf9, 0x4a, 0xe2, 0xd3, 0xd7, 0x31, 0xb7, 0xad, 0x56, 0xd4, 0x0e, 0x2b,
	0xf3, 0x5c, 0x6a, 0xdd, 0x4c, 0xa0, 0x63, 0x21, 0x0d, 0xf5, 0x42, 0xa7, 0x89, 0x94, 0xe7, 0x12,
	0xc7, 0xc6, 0xda, 0xbe, 0x60, 0x05, 0xa0, 0x30, 0xd1, 0xd1, 0x0b, 0x39, 0x0b, 0xe0, 0xda, 0xaa,
	0xe8, 0x8a, 0xbd, 0x6c, 0x1f, 0x07, 0x81, 0xe3, 0xd6, 0x0b, 0x4f, 0x03, 0xd5, 0xbc, 0x1f, 0x44,
	0x69, 0x0b, 0x1c, 0xce, 0x54, 0x2c, 0x1e, 0x02, 0x76, 0x47, 0x12, 0x47, 0xbf, 0x88, 0xd2, 0xfd,
	0xf6, 0x58, 0x57, 0x6d, 0x58, 0xfe, 0x87, 0x88, 0xed, 0x59, 0xa7, 0xe6, 0xca, 0x48, 0x9d, 0x61,
	0xba, 0xe2, 0x7b, 0xf4, 0x89, 0x74, 0x77, 0xed, 0x19, 0x5d, 0x7d, 0x24, 0x8e, 0x7e, 0x43, 0x87,
	0xff, 0x82, 0xa7, 0x78, 0x4f, 0xab, 0xca, 0x54, 0x5e, 0x48, 0x91, 0xdb, 0x6a, 0x89, 0xbd, 0x29,
	0x8d, 0xa5, 0x39, 0x85, 0x9e, 0x63, 0x6c, 0x0b, 0x1f, 0xac, 0x03, 0x21, 0x5f, 0x7d, 0xde, 0x75,
	0x29, 0xea, 0x68, 0xc5, 0x2d, 0x38, 0x6a, 0x9a, 0xdd, 0xce, 0x82, 0xa4, 0xd3, 0x2d, 0x12, 0x70,
	0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x47, 0x57, 0xd8, 0x3a, 0x0b, 0x00, 0x00,
}
