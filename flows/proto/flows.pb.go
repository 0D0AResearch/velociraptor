// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flows.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	flows.proto

It has these top-level messages:
	FlowReference
	FlowContext
	FlowRunnerArgs
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "www.velocidex.com/golang/velociraptor/proto"
import proto3 "www.velocidex.com/golang/velociraptor/crypto/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowContext_State int32

const (
	FlowContext_RUNNING    FlowContext_State = 0
	FlowContext_TERMINATED FlowContext_State = 1
	FlowContext_ERROR      FlowContext_State = 3
	// A well known flow will not queue any messages and always
	// forward messages to the worker:
	FlowContext_WELL_KNOWN FlowContext_State = 2
)

var FlowContext_State_name = map[int32]string{
	0: "RUNNING",
	1: "TERMINATED",
	3: "ERROR",
	2: "WELL_KNOWN",
}
var FlowContext_State_value = map[string]int32{
	"RUNNING":    0,
	"TERMINATED": 1,
	"ERROR":      3,
	"WELL_KNOWN": 2,
}

func (x FlowContext_State) Enum() *FlowContext_State {
	p := new(FlowContext_State)
	*p = x
	return p
}
func (x FlowContext_State) String() string {
	return proto1.EnumName(FlowContext_State_name, int32(x))
}
func (x *FlowContext_State) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(FlowContext_State_value, data, "FlowContext_State")
	if err != nil {
		return err
	}
	*x = FlowContext_State(value)
	return nil
}
func (FlowContext_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type FlowReference struct {
	FlowId           *string `protobuf:"bytes,1,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	ClientId         *string `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FlowReference) Reset()                    { *m = FlowReference{} }
func (m *FlowReference) String() string            { return proto1.CompactTextString(m) }
func (*FlowReference) ProtoMessage()               {}
func (*FlowReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlowReference) GetFlowId() string {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return ""
}

func (m *FlowReference) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

// The flow context.
// Next field: 17
type FlowContext struct {
	Backtrace            *string                 `protobuf:"bytes,1,opt,name=backtrace" json:"backtrace,omitempty"`
	ClientResources      *proto3.ClientResources `protobuf:"bytes,2,opt,name=client_resources,json=clientResources" json:"client_resources,omitempty"`
	CreateTime           *uint64                 `protobuf:"varint,3,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	Creator              *string                 `protobuf:"bytes,4,opt,name=creator" json:"creator,omitempty"`
	CurrentState         *string                 `protobuf:"bytes,5,opt,name=current_state,json=currentState" json:"current_state,omitempty"`
	KillTimestamp        *uint64                 `protobuf:"varint,6,opt,name=kill_timestamp,json=killTimestamp" json:"kill_timestamp,omitempty"`
	NetworkBytesSent     *uint64                 `protobuf:"varint,7,opt,name=network_bytes_sent,json=networkBytesSent" json:"network_bytes_sent,omitempty"`
	NextOutboundId       *uint64                 `protobuf:"varint,8,opt,name=next_outbound_id,json=nextOutboundId,def=1" json:"next_outbound_id,omitempty"`
	NextProcessedRequest *uint64                 `protobuf:"varint,9,opt,name=next_processed_request,json=nextProcessedRequest,def=1" json:"next_processed_request,omitempty"`
	//  repeated OutputPluginState output_plugins_states = 10;
	OutstandingRequests *uint64 `protobuf:"varint,11,opt,name=outstanding_requests,json=outstandingRequests" json:"outstanding_requests,omitempty"`
	// DEPRECATED
	// optional uint64 remaining_cpu_quota = 12;
	SessionId        *string            `protobuf:"bytes,13,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	State            *FlowContext_State `protobuf:"varint,14,opt,name=state,enum=proto.FlowContext_State" json:"state,omitempty"`
	Status           *string            `protobuf:"bytes,15,opt,name=status" json:"status,omitempty"`
	UserNotified     *bool              `protobuf:"varint,16,opt,name=user_notified,json=userNotified" json:"user_notified,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *FlowContext) Reset()                    { *m = FlowContext{} }
func (m *FlowContext) String() string            { return proto1.CompactTextString(m) }
func (*FlowContext) ProtoMessage()               {}
func (*FlowContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_FlowContext_NextOutboundId uint64 = 1
const Default_FlowContext_NextProcessedRequest uint64 = 1

func (m *FlowContext) GetBacktrace() string {
	if m != nil && m.Backtrace != nil {
		return *m.Backtrace
	}
	return ""
}

func (m *FlowContext) GetClientResources() *proto3.ClientResources {
	if m != nil {
		return m.ClientResources
	}
	return nil
}

func (m *FlowContext) GetCreateTime() uint64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *FlowContext) GetCreator() string {
	if m != nil && m.Creator != nil {
		return *m.Creator
	}
	return ""
}

func (m *FlowContext) GetCurrentState() string {
	if m != nil && m.CurrentState != nil {
		return *m.CurrentState
	}
	return ""
}

func (m *FlowContext) GetKillTimestamp() uint64 {
	if m != nil && m.KillTimestamp != nil {
		return *m.KillTimestamp
	}
	return 0
}

func (m *FlowContext) GetNetworkBytesSent() uint64 {
	if m != nil && m.NetworkBytesSent != nil {
		return *m.NetworkBytesSent
	}
	return 0
}

func (m *FlowContext) GetNextOutboundId() uint64 {
	if m != nil && m.NextOutboundId != nil {
		return *m.NextOutboundId
	}
	return Default_FlowContext_NextOutboundId
}

func (m *FlowContext) GetNextProcessedRequest() uint64 {
	if m != nil && m.NextProcessedRequest != nil {
		return *m.NextProcessedRequest
	}
	return Default_FlowContext_NextProcessedRequest
}

func (m *FlowContext) GetOutstandingRequests() uint64 {
	if m != nil && m.OutstandingRequests != nil {
		return *m.OutstandingRequests
	}
	return 0
}

func (m *FlowContext) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *FlowContext) GetState() FlowContext_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return FlowContext_RUNNING
}

func (m *FlowContext) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *FlowContext) GetUserNotified() bool {
	if m != nil && m.UserNotified != nil {
		return *m.UserNotified
	}
	return false
}

// Next field: 23
type FlowRunnerArgs struct {
	Priority          *proto3.GrrMessage_Priority `protobuf:"varint,1,opt,name=priority,enum=proto.GrrMessage_Priority,def=1" json:"priority,omitempty"`
	NotifyToUser      *bool                       `protobuf:"varint,2,opt,name=notify_to_user,json=notifyToUser,def=1" json:"notify_to_user,omitempty"`
	SendReplies       *bool                       `protobuf:"varint,3,opt,name=send_replies,json=sendReplies,def=1" json:"send_replies,omitempty"`
	ClientId          *string                     `protobuf:"bytes,5,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Queue             *string                     `protobuf:"bytes,6,opt,name=queue,def=F" json:"queue,omitempty"`
	EventId           *string                     `protobuf:"bytes,7,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CpuLimit          *uint64                     `protobuf:"varint,9,opt,name=cpu_limit,json=cpuLimit,def=7200" json:"cpu_limit,omitempty"`
	NetworkBytesLimit *uint64                     `protobuf:"varint,13,opt,name=network_bytes_limit,json=networkBytesLimit" json:"network_bytes_limit,omitempty"`
	//
	// optional RequestState request_state = 10 [(sem_type) = {
	// description: "The request state of the parent flow.",
	// label: HIDDEN,
	// }];
	FlowName                 *string        `protobuf:"bytes,11,opt,name=flow_name,json=flowName" json:"flow_name,omitempty"`
	BaseSessionId            *string        `protobuf:"bytes,12,opt,name=base_session_id,json=baseSessionId" json:"base_session_id,omitempty"`
	StartTime                *uint64        `protobuf:"varint,15,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	LogsCollectionUrn        *string        `protobuf:"bytes,17,opt,name=logs_collection_urn,json=logsCollectionUrn" json:"logs_collection_urn,omitempty"`
	WriteIntermediateResults *bool          `protobuf:"varint,18,opt,name=write_intermediate_results,json=writeIntermediateResults,def=0" json:"write_intermediate_results,omitempty"`
	RequireFastpoll          *bool          `protobuf:"varint,19,opt,name=require_fastpoll,json=requireFastpoll,def=1" json:"require_fastpoll,omitempty"`
	OriginalFlow             *FlowReference `protobuf:"bytes,22,opt,name=original_flow,json=originalFlow" json:"original_flow,omitempty"`
	XXX_unrecognized         []byte         `json:"-"`
}

func (m *FlowRunnerArgs) Reset()                    { *m = FlowRunnerArgs{} }
func (m *FlowRunnerArgs) String() string            { return proto1.CompactTextString(m) }
func (*FlowRunnerArgs) ProtoMessage()               {}
func (*FlowRunnerArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_FlowRunnerArgs_Priority proto3.GrrMessage_Priority = proto3.GrrMessage_MEDIUM_PRIORITY
const Default_FlowRunnerArgs_NotifyToUser bool = true
const Default_FlowRunnerArgs_SendReplies bool = true
const Default_FlowRunnerArgs_Queue string = "F"
const Default_FlowRunnerArgs_CpuLimit uint64 = 7200
const Default_FlowRunnerArgs_WriteIntermediateResults bool = false
const Default_FlowRunnerArgs_RequireFastpoll bool = true

func (m *FlowRunnerArgs) GetPriority() proto3.GrrMessage_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Default_FlowRunnerArgs_Priority
}

func (m *FlowRunnerArgs) GetNotifyToUser() bool {
	if m != nil && m.NotifyToUser != nil {
		return *m.NotifyToUser
	}
	return Default_FlowRunnerArgs_NotifyToUser
}

func (m *FlowRunnerArgs) GetSendReplies() bool {
	if m != nil && m.SendReplies != nil {
		return *m.SendReplies
	}
	return Default_FlowRunnerArgs_SendReplies
}

func (m *FlowRunnerArgs) GetClientId() string {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return ""
}

func (m *FlowRunnerArgs) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return Default_FlowRunnerArgs_Queue
}

func (m *FlowRunnerArgs) GetEventId() string {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return ""
}

func (m *FlowRunnerArgs) GetCpuLimit() uint64 {
	if m != nil && m.CpuLimit != nil {
		return *m.CpuLimit
	}
	return Default_FlowRunnerArgs_CpuLimit
}

func (m *FlowRunnerArgs) GetNetworkBytesLimit() uint64 {
	if m != nil && m.NetworkBytesLimit != nil {
		return *m.NetworkBytesLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

func (m *FlowRunnerArgs) GetBaseSessionId() string {
	if m != nil && m.BaseSessionId != nil {
		return *m.BaseSessionId
	}
	return ""
}

func (m *FlowRunnerArgs) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *FlowRunnerArgs) GetLogsCollectionUrn() string {
	if m != nil && m.LogsCollectionUrn != nil {
		return *m.LogsCollectionUrn
	}
	return ""
}

func (m *FlowRunnerArgs) GetWriteIntermediateResults() bool {
	if m != nil && m.WriteIntermediateResults != nil {
		return *m.WriteIntermediateResults
	}
	return Default_FlowRunnerArgs_WriteIntermediateResults
}

func (m *FlowRunnerArgs) GetRequireFastpoll() bool {
	if m != nil && m.RequireFastpoll != nil {
		return *m.RequireFastpoll
	}
	return Default_FlowRunnerArgs_RequireFastpoll
}

func (m *FlowRunnerArgs) GetOriginalFlow() *FlowReference {
	if m != nil {
		return m.OriginalFlow
	}
	return nil
}

func init() {
	proto1.RegisterType((*FlowReference)(nil), "proto.FlowReference")
	proto1.RegisterType((*FlowContext)(nil), "proto.FlowContext")
	proto1.RegisterType((*FlowRunnerArgs)(nil), "proto.FlowRunnerArgs")
	proto1.RegisterEnum("proto.FlowContext_State", FlowContext_State_name, FlowContext_State_value)
}

func init() { proto1.RegisterFile("flows.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0x1b, 0xc7,
	0x15, 0xee, 0x2a, 0x96, 0x25, 0x0e, 0x25, 0x8a, 0x1e, 0x19, 0xc6, 0xc2, 0x28, 0x8a, 0x81, 0x1a,
	0x34, 0x4a, 0x22, 0x50, 0x8a, 0x1d, 0xc4, 0xad, 0xd0, 0xb4, 0x10, 0xf5, 0x63, 0x10, 0xb1, 0x68,
	0x77, 0x25, 0x25, 0x48, 0x51, 0x60, 0x31, 0xda, 0x3d, 0xa4, 0x26, 0x9e, 0x9d, 0xd9, 0xcc, 0xcc,
	0x9a, 0x26, 0xfa, 0x04, 0x7d, 0x82, 0xbe, 0x45, 0x6f, 0x72, 0x53, 0xf4, 0xba, 0xe8, 0x03, 0xf4,
	0x11, 0xda, 0xdb, 0x3e, 0x42, 0x2f, 0x8a, 0x73, 0x76, 0x97, 0xa2, 0x05, 0x17, 0xc8, 0x15, 0x39,
	0x73, 0xce, 0x9c, 0xef, 0x9b, 0xf3, 0xf3, 0xcd, 0xb2, 0xee, 0x44, 0xdb, 0x99, 0x1f, 0x94, 0xce,
	0x06, 0xcb, 0x57, 0xe9, 0xe7, 0xf1, 0xe1, 0x6c, 0x36, 0x1b, 0xbc, 0x01, 0x6d, 0x33, 0x95, 0xc3,
	0xdb, 0x41, 0x66, 0x8b, 0xfd, 0xa9, 0xd5, 0xd2, 0x4c, 0xf7, 0xeb, 0x4d, 0x27, 0xcb, 0x60, 0xdd,
	0x3e, 0x39, 0xef, 0x7b, 0x28, 0xa4, 0x09, 0x2a, 0xab, 0x43, 0x3c, 0xfe, 0xf2, 0xc7, 0x9d, 0xcd,
	0xdc, 0xbc, 0x0c, 0xb6, 0x09, 0xf1, 0x9d, 0xbd, 0x6e, 0x18, 0xec, 0xfc, 0x10, 0xb1, 0xcd, 0x33,
	0x6d, 0x67, 0x09, 0x4c, 0xc0, 0x81, 0xc9, 0x80, 0x3f, 0x67, 0x6b, 0x48, 0x31, 0x55, 0x79, 0x1c,
	0x89, 0x68, 0xb7, 0x33, 0x1c, 0xfc, 0xeb, 0xbf, 0xff, 0xfe, 0x7b, 0xb4, 0xcb, 0x7f, 0x71, 0x79,
	0x03, 0xc2, 0x83, 0xf7, 0xca, 0x1a, 0xa1, 0x72, 0x61, 0x27, 0x22, 0xdc, 0x80, 0x70, 0xed, 0xc9,
	0x5c, 0xe0, 0xb9, 0x41, 0x72, 0x1f, 0x7f, 0x46, 0x39, 0xff, 0x96, 0x75, 0x32, 0xad, 0xc0, 0x04,
	0x0c, 0xb5, 0x42, 0xa1, 0x7e, 0x4d, 0xa1, 0xbe, 0x60, 0x9d, 0x63, 0x32, 0x5c, 0x25, 0x63, 0xfe,
	0x31, 0x46, 0xad, 0xfd, 0x30, 0xe8, 0x7b, 0x22, 0x0a, 0x27, 0x8d, 0xb0, 0x66, 0x90, 0xac, 0xd7,
	0x6e, 0xa3, 0x7c, 0xe7, 0x1f, 0xab, 0xac, 0x8b, 0xac, 0x8f, 0xad, 0x09, 0xf0, 0x36, 0xf0, 0x9f,
	0xb2, 0xce, 0xb5, 0xcc, 0x5e, 0x07, 0x27, 0x33, 0xa8, 0x59, 0x27, 0xb7, 0x1b, 0xfc, 0x88, 0xf5,
	0x1b, 0x22, 0x0e, 0xbc, 0xad, 0x5c, 0x06, 0x9e, 0xf8, 0x74, 0x9f, 0x3c, 0xaa, 0xb3, 0x30, 0xa8,
	0xe9, 0x24, 0xad, 0x35, 0xd9, 0xca, 0xde, 0xdd, 0xe0, 0x9f, 0xb3, 0x6e, 0xe6, 0x40, 0x06, 0x48,
	0x83, 0x2a, 0x20, 0xfe, 0x40, 0x44, 0xbb, 0xf7, 0x86, 0xdb, 0x74, 0x9b, 0x4d, 0xd6, 0x4d, 0x4e,
	0xce, 0x4e, 0x64, 0x00, 0x34, 0x25, 0xac, 0xf6, 0xbb, 0x54, 0x05, 0xf0, 0x98, 0xad, 0xd1, 0xca,
	0xba, 0xf8, 0x1e, 0x91, 0x6a, 0x97, 0xfc, 0xe7, 0x6c, 0x33, 0xab, 0x9c, 0x43, 0x4e, 0x3e, 0xc8,
	0x00, 0xf1, 0x2a, 0xd9, 0x37, 0x9a, 0xcd, 0x0b, 0xdc, 0xe3, 0x87, 0xac, 0xf7, 0x5a, 0x69, 0x4d,
	0x90, 0x3e, 0xc8, 0xa2, 0x8c, 0xef, 0xff, 0x7f, 0xdc, 0x4d, 0x74, 0xbd, 0x6c, 0x3d, 0xf9, 0x1e,
	0xe3, 0x06, 0xc2, 0xcc, 0xba, 0xd7, 0xe9, 0xf5, 0x3c, 0x80, 0x4f, 0x3d, 0x98, 0x10, 0xaf, 0xe1,
	0xf9, 0xa4, 0xdf, 0x58, 0x86, 0x68, 0xb8, 0x00, 0x13, 0xf8, 0xa7, 0xac, 0x6f, 0xe0, 0x6d, 0x48,
	0x6d, 0x15, 0xae, 0x6d, 0x65, 0x72, 0xac, 0xd8, 0x3a, 0xfa, 0x1e, 0x46, 0x9f, 0x25, 0x3d, 0x34,
	0xbd, 0x6c, 0x2c, 0xa3, 0x9c, 0x3f, 0x63, 0x8f, 0xc8, 0xb9, 0x74, 0x36, 0x03, 0xef, 0x21, 0x4f,
	0x1d, 0x7c, 0x5f, 0x81, 0x0f, 0x71, 0xa7, 0x3d, 0xf2, 0x10, 0x1d, 0x5e, 0xb5, 0xf6, 0xa4, 0x36,
	0xf3, 0xcf, 0xd8, 0x43, 0x5b, 0x05, 0x1f, 0xa4, 0xc9, 0x95, 0x99, 0xb6, 0xa7, 0x7c, 0xdc, 0x25,
	0x56, 0xdb, 0x4b, 0xb6, 0xe6, 0x84, 0xe7, 0x07, 0x8c, 0x35, 0x1d, 0x87, 0x94, 0x36, 0xa9, 0x89,
	0x1e, 0xd0, 0xf5, 0xbb, 0xac, 0x73, 0x51, 0x5b, 0x46, 0x27, 0x49, 0xa7, 0x71, 0x1a, 0xe5, 0x7c,
	0xc0, 0x56, 0xeb, 0x8c, 0xf6, 0x44, 0xb4, 0xdb, 0x7b, 0x12, 0x37, 0x15, 0x5e, 0xea, 0x96, 0x01,
	0x65, 0x37, 0xa9, 0xdd, 0xf8, 0x23, 0x76, 0x1f, 0xff, 0x54, 0x3e, 0xde, 0xa2, 0x12, 0x34, 0x2b,
	0xac, 0x50, 0xe5, 0xc1, 0xa5, 0xc6, 0x06, 0x35, 0x51, 0x90, 0xc7, 0x7d, 0x11, 0xed, 0xae, 0x27,
	0x1b, 0xb8, 0x39, 0x6e, 0xf6, 0x76, 0x7e, 0xcb, 0x56, 0xeb, 0x52, 0x75, 0xd9, 0x5a, 0x72, 0x35,
	0x1e, 0x8f, 0xc6, 0xcf, 0xfb, 0x3f, 0xe1, 0x3d, 0xc6, 0x2e, 0x4f, 0x93, 0xf3, 0xd1, 0xf8, 0xe8,
	0xf2, 0xf4, 0xa4, 0x1f, 0xf1, 0x0e, 0x5b, 0x3d, 0x4d, 0x92, 0x97, 0x49, 0xff, 0x03, 0x34, 0x7d,
	0x73, 0xfa, 0xe2, 0x45, 0xfa, 0xd5, 0xf8, 0xe5, 0x37, 0xe3, 0xfe, 0xca, 0xce, 0x3f, 0x7b, 0xac,
	0x47, 0xe3, 0x57, 0x19, 0x03, 0xee, 0xc8, 0x4d, 0x3d, 0xf7, 0x6c, 0xbd, 0x74, 0xca, 0x3a, 0x15,
	0xe6, 0xd4, 0xca, 0xbd, 0x27, 0x8f, 0x9b, 0x3b, 0x3c, 0x77, 0xee, 0x1c, 0xbc, 0x97, 0x53, 0x18,
	0xbc, 0x6a, 0x3c, 0x0e, 0xb7, 0xce, 0x4f, 0x4f, 0x46, 0x57, 0xe7, 0xe9, 0xab, 0x64, 0xf4, 0x32,
	0x19, 0x5d, 0x7e, 0x3b, 0xfc, 0x84, 0xb2, 0xf3, 0x21, 0x17, 0x38, 0x57, 0x6d, 0x20, 0x51, 0x79,
	0x1c, 0x26, 0xeb, 0x44, 0xb8, 0x51, 0xbe, 0x9e, 0xd3, 0x38, 0x4a, 0x16, 0x40, 0x7c, 0xce, 0x7a,
	0x74, 0xd1, 0x79, 0x1a, 0x6c, 0x8a, 0x57, 0xa4, 0x01, 0x59, 0x3f, 0xbc, 0x17, 0x5c, 0x05, 0xc3,
	0x73, 0x8a, 0xf9, 0x9c, 0xef, 0x5f, 0xdc, 0xd8, 0x4a, 0xe7, 0x42, 0x8a, 0x3a, 0x2b, 0x99, 0x0c,
	0xa8, 0x05, 0xd7, 0x28, 0x0b, 0x26, 0x88, 0x60, 0x69, 0x7c, 0x95, 0x51, 0x41, 0x61, 0x97, 0x0f,
	0x76, 0x1e, 0x52, 0xa6, 0xe6, 0x42, 0x06, 0x71, 0x6c, 0x8b, 0x52, 0x03, 0xfa, 0x27, 0x1b, 0x35,
	0xd4, 0xa5, 0xbd, 0xf2, 0xe0, 0x78, 0x60, 0x1b, 0x1e, 0x0c, 0x36, 0x51, 0xa9, 0x15, 0x78, 0x9a,
	0xad, 0x16, 0xf8, 0x2b, 0x02, 0x3e, 0xe5, 0x4f, 0x1b, 0x60, 0x74, 0x14, 0x8d, 0xa3, 0xc0, 0x01,
	0x6f, 0x31, 0x4b, 0x89, 0x63, 0x53, 0xcb, 0x85, 0x75, 0x48, 0x6f, 0x10, 0xaf, 0xec, 0x6c, 0x5c,
	0xa0, 0x7f, 0x52, 0xfb, 0x27, 0x5d, 0x3c, 0xdd, 0x2c, 0xf8, 0xd7, 0xcb, 0xe2, 0x44, 0xc3, 0x37,
	0xfc, 0x15, 0x81, 0x3d, 0x5d, 0x16, 0xa7, 0x0f, 0xef, 0x8a, 0x53, 0x93, 0x3c, 0x61, 0x4b, 0x70,
	0x32, 0x80, 0x47, 0x5d, 0x8a, 0x57, 0x6e, 0x95, 0x89, 0x8f, 0xd8, 0xea, 0xf7, 0x15, 0x54, 0x40,
	0xa3, 0xda, 0x39, 0x8c, 0xce, 0x86, 0x07, 0x14, 0xf6, 0x13, 0x76, 0x3f, 0x39, 0x39, 0xc3, 0x98,
	0x3f, 0xc3, 0x98, 0xe4, 0x83, 0xe4, 0x2b, 0x0f, 0x4d, 0x5d, 0xa0, 0x29, 0xcb, 0x4a, 0x52, 0x47,
	0xe0, 0xbf, 0x63, 0xeb, 0xf0, 0xa6, 0x61, 0xb8, 0x46, 0x0c, 0xbf, 0xa0, 0x50, 0x07, 0x7c, 0xef,
	0x48, 0x68, 0x3b, 0x9d, 0x2a, 0x33, 0x15, 0xe4, 0x81, 0xdc, 0x30, 0x88, 0xf2, 0xbe, 0xc2, 0xcd,
	0x49, 0xe5, 0xc2, 0x0d, 0x38, 0x74, 0xf2, 0x18, 0x70, 0x8d, 0xbc, 0x46, 0x39, 0x97, 0xac, 0x93,
	0x95, 0x55, 0xaa, 0x55, 0xa1, 0xda, 0x69, 0xbd, 0xf7, 0xec, 0xc9, 0xc1, 0xc1, 0xf0, 0x37, 0x14,
	0xf9, 0x97, 0xfc, 0xf3, 0x23, 0x41, 0x46, 0x61, 0x0d, 0x51, 0x6a, 0xee, 0x9e, 0x95, 0x95, 0xf0,
	0x90, 0x59, 0x93, 0xfb, 0xba, 0x95, 0xae, 0xe7, 0x77, 0x3a, 0x29, 0x2b, 0xab, 0x17, 0x78, 0x90,
	0x2b, 0xb6, 0xfd, 0xae, 0xf0, 0xd4, 0x60, 0x9b, 0xa4, 0x5c, 0x4d, 0x8a, 0xf9, 0xfe, 0x1d, 0x98,
	0x60, 0x83, 0xd4, 0x22, 0x38, 0x39, 0x99, 0xa8, 0xec, 0xfd, 0x08, 0x0f, 0x96, 0x45, 0xab, 0x86,
	0xfa, 0x3d, 0xeb, 0xd0, 0x4b, 0x65, 0x64, 0x01, 0x24, 0x22, 0x9d, 0xe1, 0x97, 0x04, 0xf0, 0x8c,
	0x3f, 0xc5, 0x24, 0xe3, 0x7e, 0xfb, 0x4a, 0x65, 0x5a, 0x7a, 0x2f, 0x14, 0xf6, 0x60, 0x01, 0x26,
	0x60, 0x96, 0xda, 0x94, 0x63, 0x19, 0x5c, 0x55, 0xd7, 0x11, 0xd7, 0x63, 0x59, 0x00, 0xff, 0x23,
	0xdb, 0xba, 0x96, 0x1e, 0xd2, 0x25, 0xf5, 0xd9, 0x20, 0x84, 0x0b, 0x42, 0x38, 0x5f, 0x94, 0xf3,
	0xe8, 0xce, 0xab, 0xb8, 0x5c, 0x4c, 0x0c, 0x6b, 0xc0, 0x0d, 0xc4, 0x68, 0x82, 0x2d, 0x29, 0x7c,
	0x09, 0x19, 0x09, 0x87, 0x98, 0x81, 0x28, 0xe4, 0x6b, 0x10, 0xd6, 0x00, 0xe2, 0x6e, 0x22, 0xd6,
	0xc5, 0x42, 0xc3, 0xfe, 0x14, 0x31, 0xe6, 0x83, 0x74, 0xa1, 0x7e, 0x6d, 0xb6, 0x28, 0x77, 0xdf,
	0x11, 0x70, 0xfe, 0x8e, 0xea, 0xf3, 0x8b, 0x13, 0x4b, 0x91, 0x1b, 0x2d, 0x5e, 0xea, 0xd0, 0xca,
	0x04, 0xa5, 0xeb, 0x35, 0x7a, 0x0e, 0xc4, 0xee, 0xa8, 0xa8, 0xe7, 0x66, 0xc1, 0x4e, 0x79, 0x24,
	0x28, 0xa4, 0x9f, 0x9b, 0xcc, 0x59, 0x63, 0x2b, 0xaf, 0xe7, 0x83, 0x8f, 0x31, 0xd9, 0x1d, 0x42,
	0xa7, 0x37, 0xac, 0x60, 0xdb, 0xd8, 0x46, 0x69, 0x66, 0xb5, 0x86, 0x0c, 0xe7, 0x37, 0xad, 0x9c,
	0x89, 0x1f, 0x2c, 0xa7, 0x7b, 0x91, 0x8c, 0x4f, 0x31, 0x19, 0xe8, 0x2e, 0x6e, 0xdd, 0x31, 0xbd,
	0xda, 0x4e, 0xf1, 0xe7, 0x6e, 0xa3, 0x3f, 0x40, 0xd7, 0xe3, 0x85, 0xe7, 0x95, 0x33, 0xfc, 0xaf,
	0x11, 0x7b, 0x3c, 0x73, 0x2a, 0x40, 0xaa, 0x4c, 0x00, 0x57, 0x40, 0xae, 0xf0, 0xd5, 0x75, 0xe0,
	0x2b, 0x1d, 0x7c, 0xcc, 0x49, 0x1c, 0x56, 0x27, 0x52, 0x7b, 0x18, 0x7a, 0x42, 0x2f, 0xb8, 0x1a,
	0x4d, 0x04, 0xca, 0xc5, 0x9e, 0x90, 0x5a, 0x8b, 0xec, 0x46, 0xe9, 0xf6, 0xc3, 0xa1, 0x3e, 0x25,
	0x1c, 0x64, 0xa0, 0xde, 0x60, 0xda, 0x55, 0xb8, 0x21, 0x11, 0x41, 0x0d, 0x99, 0x8b, 0x99, 0xd2,
	0x1a, 0xd5, 0x0b, 0x01, 0x03, 0x98, 0x56, 0x4c, 0xf0, 0xec, 0x47, 0x5e, 0xe4, 0x30, 0x91, 0x95,
	0x0e, 0x4b, 0x57, 0xc1, 0xd4, 0xc4, 0xc4, 0x6e, 0xb4, 0x44, 0x2e, 0xa9, 0x51, 0xf8, 0x7f, 0x22,
	0xd6, 0xc7, 0x37, 0x4d, 0x39, 0x48, 0x27, 0xd2, 0x87, 0xd2, 0x6a, 0x1d, 0x6f, 0x2f, 0xa9, 0xd9,
	0xdf, 0x22, 0x22, 0xfc, 0x43, 0xc4, 0xff, 0x12, 0x5d, 0x62, 0x61, 0xde, 0x48, 0x5d, 0x01, 0x96,
	0xa1, 0x94, 0xf8, 0x4e, 0xb6, 0xf8, 0xcd, 0xd0, 0xe5, 0x95, 0xc3, 0x36, 0x3d, 0x96, 0x5a, 0xd7,
	0x8a, 0xb4, 0x27, 0xa4, 0xa1, 0xc1, 0x68, 0x99, 0x11, 0xff, 0x4c, 0xa2, 0x86, 0x2c, 0x9d, 0x0b,
	0x56, 0x00, 0xd2, 0x13, 0x2d, 0x09, 0x21, 0x27, 0x01, 0x5c, 0xd3, 0x22, 0x6d, 0xe7, 0x17, 0xcd,
	0x4b, 0x22, 0x50, 0x84, 0xbd, 0xf0, 0x24, 0xb0, 0xe6, 0xa3, 0x20, 0x0a, 0x9b, 0xa3, 0x64, 0x53,
	0xe7, 0x78, 0x08, 0x38, 0x2a, 0x78, 0xef, 0xad, 0xe6, 0x6a, 0x67, 0x4d, 0x50, 0xfe, 0xe7, 0x88,
	0x6d, 0x5a, 0xa7, 0xa6, 0xca, 0x48, 0x9d, 0x62, 0xca, 0xe2, 0x47, 0xf4, 0x4d, 0xf5, 0x70, 0xe9,
	0xc5, 0x5d, 0x7c, 0x55, 0x0e, 0xff, 0x40, 0x57, 0xff, 0x9a, 0x27, 0x58, 0xab, 0x45, 0x93, 0x2a,
	0x2f, 0xa4, 0xc8, 0x6c, 0x39, 0xc7, 0x31, 0x95, 0xc6, 0x92, 0x6a, 0xa1, 0x65, 0x0f, 0x27, 0xc4,
	0x07, 0xeb, 0x40, 0xc8, 0xdb, 0xef, 0xc1, 0x36, 0x41, 0x2d, 0xac, 0xb8, 0x01, 0x47, 0xf3, 0xb3,
	0xd1, 0xee, 0x20, 0xe8, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x64, 0x9e, 0x91, 0x63, 0x0b,
	0x00, 0x00,
}
