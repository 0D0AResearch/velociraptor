// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flows.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import proto2 "www.velocidex.com/golang/velociraptor/actions/proto"
import proto1 "www.velocidex.com/golang/velociraptor/crypto/proto"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowContext_State int32

const (
	FlowContext_UNSET      FlowContext_State = 0
	FlowContext_RUNNING    FlowContext_State = 1
	FlowContext_TERMINATED FlowContext_State = 2
	FlowContext_ERROR      FlowContext_State = 3
)

var FlowContext_State_name = map[int32]string{
	0: "UNSET",
	1: "RUNNING",
	2: "TERMINATED",
	3: "ERROR",
}
var FlowContext_State_value = map[string]int32{
	"UNSET":      0,
	"RUNNING":    1,
	"TERMINATED": 2,
	"ERROR":      3,
}

func (x FlowContext_State) String() string {
	return proto.EnumName(FlowContext_State_name, int32(x))
}
func (FlowContext_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{1, 0}
}

type StartFlowRequest struct {
	RunnerArgs           *FlowRunnerArgs `protobuf:"bytes,1,opt,name=runner_args,json=runnerArgs,proto3" json:"runner_args,omitempty"`
	Args                 *any.Any        `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StartFlowRequest) Reset()         { *m = StartFlowRequest{} }
func (m *StartFlowRequest) String() string { return proto.CompactTextString(m) }
func (*StartFlowRequest) ProtoMessage()    {}
func (*StartFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{0}
}
func (m *StartFlowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartFlowRequest.Unmarshal(m, b)
}
func (m *StartFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartFlowRequest.Marshal(b, m, deterministic)
}
func (dst *StartFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartFlowRequest.Merge(dst, src)
}
func (m *StartFlowRequest) XXX_Size() int {
	return xxx_messageInfo_StartFlowRequest.Size(m)
}
func (m *StartFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartFlowRequest proto.InternalMessageInfo

func (m *StartFlowRequest) GetRunnerArgs() *FlowRunnerArgs {
	if m != nil {
		return m.RunnerArgs
	}
	return nil
}

func (m *StartFlowRequest) GetArgs() *any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

// The flow context.
// Next field: 19
type FlowContext struct {
	Backtrace            string                  `protobuf:"bytes,1,opt,name=backtrace,proto3" json:"backtrace,omitempty"`
	ClientResources      *proto1.ClientResources `protobuf:"bytes,2,opt,name=client_resources,json=clientResources,proto3" json:"client_resources,omitempty"`
	CreateTime           uint64                  `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Creator              string                  `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	CurrentState         string                  `protobuf:"bytes,5,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	KillTimestamp        uint64                  `protobuf:"varint,6,opt,name=kill_timestamp,json=killTimestamp,proto3" json:"kill_timestamp,omitempty"`
	NetworkBytesSent     uint64                  `protobuf:"varint,7,opt,name=network_bytes_sent,json=networkBytesSent,proto3" json:"network_bytes_sent,omitempty"`
	NextOutboundId       uint64                  `protobuf:"varint,8,opt,name=next_outbound_id,json=nextOutboundId,proto3" json:"next_outbound_id,omitempty"`
	NextProcessedRequest uint64                  `protobuf:"varint,9,opt,name=next_processed_request,json=nextProcessedRequest,proto3" json:"next_processed_request,omitempty"`
	//  repeated OutputPluginState output_plugins_states = 10;
	OutstandingRequests  uint64               `protobuf:"varint,11,opt,name=outstanding_requests,json=outstandingRequests,proto3" json:"outstanding_requests,omitempty"`
	TotalResults         uint64               `protobuf:"varint,18,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	UploadedFiles        []string             `protobuf:"bytes,19,rep,name=uploaded_files,json=uploadedFiles,proto3" json:"uploaded_files,omitempty"`
	Logs                 []*proto1.LogMessage `protobuf:"bytes,20,rep,name=logs,proto3" json:"logs,omitempty"`
	SessionId            string               `protobuf:"bytes,13,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	State                FlowContext_State    `protobuf:"varint,14,opt,name=state,proto3,enum=proto.FlowContext_State" json:"state,omitempty"`
	Status               string               `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	UserNotified         bool                 `protobuf:"varint,16,opt,name=user_notified,json=userNotified,proto3" json:"user_notified,omitempty"`
	ActiveTime           uint64               `protobuf:"varint,17,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlowContext) Reset()         { *m = FlowContext{} }
func (m *FlowContext) String() string { return proto.CompactTextString(m) }
func (*FlowContext) ProtoMessage()    {}
func (*FlowContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{1}
}
func (m *FlowContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowContext.Unmarshal(m, b)
}
func (m *FlowContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowContext.Marshal(b, m, deterministic)
}
func (dst *FlowContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowContext.Merge(dst, src)
}
func (m *FlowContext) XXX_Size() int {
	return xxx_messageInfo_FlowContext.Size(m)
}
func (m *FlowContext) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowContext.DiscardUnknown(m)
}

var xxx_messageInfo_FlowContext proto.InternalMessageInfo

func (m *FlowContext) GetBacktrace() string {
	if m != nil {
		return m.Backtrace
	}
	return ""
}

func (m *FlowContext) GetClientResources() *proto1.ClientResources {
	if m != nil {
		return m.ClientResources
	}
	return nil
}

func (m *FlowContext) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *FlowContext) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *FlowContext) GetCurrentState() string {
	if m != nil {
		return m.CurrentState
	}
	return ""
}

func (m *FlowContext) GetKillTimestamp() uint64 {
	if m != nil {
		return m.KillTimestamp
	}
	return 0
}

func (m *FlowContext) GetNetworkBytesSent() uint64 {
	if m != nil {
		return m.NetworkBytesSent
	}
	return 0
}

func (m *FlowContext) GetNextOutboundId() uint64 {
	if m != nil {
		return m.NextOutboundId
	}
	return 0
}

func (m *FlowContext) GetNextProcessedRequest() uint64 {
	if m != nil {
		return m.NextProcessedRequest
	}
	return 0
}

func (m *FlowContext) GetOutstandingRequests() uint64 {
	if m != nil {
		return m.OutstandingRequests
	}
	return 0
}

func (m *FlowContext) GetTotalResults() uint64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

func (m *FlowContext) GetUploadedFiles() []string {
	if m != nil {
		return m.UploadedFiles
	}
	return nil
}

func (m *FlowContext) GetLogs() []*proto1.LogMessage {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *FlowContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FlowContext) GetState() FlowContext_State {
	if m != nil {
		return m.State
	}
	return FlowContext_UNSET
}

func (m *FlowContext) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FlowContext) GetUserNotified() bool {
	if m != nil {
		return m.UserNotified
	}
	return false
}

func (m *FlowContext) GetActiveTime() uint64 {
	if m != nil {
		return m.ActiveTime
	}
	return 0
}

// Next field: 23
type FlowRunnerArgs struct {
	NotifyToUser         bool     `protobuf:"varint,2,opt,name=notify_to_user,json=notifyToUser,proto3" json:"notify_to_user,omitempty"`
	ClientId             string   `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Queue                string   `protobuf:"bytes,6,opt,name=queue,proto3" json:"queue,omitempty"`
	EventId              string   `protobuf:"bytes,7,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CpuLimit             uint64   `protobuf:"varint,9,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
	NetworkBytesLimit    uint64   `protobuf:"varint,13,opt,name=network_bytes_limit,json=networkBytesLimit,proto3" json:"network_bytes_limit,omitempty"`
	FlowName             string   `protobuf:"bytes,11,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	StartTime            uint64   `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	RequireFastpoll      bool     `protobuf:"varint,19,opt,name=require_fastpoll,json=requireFastpoll,proto3" json:"require_fastpoll,omitempty"`
	Args                 *any.Any `protobuf:"bytes,24,opt,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowRunnerArgs) Reset()         { *m = FlowRunnerArgs{} }
func (m *FlowRunnerArgs) String() string { return proto.CompactTextString(m) }
func (*FlowRunnerArgs) ProtoMessage()    {}
func (*FlowRunnerArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{2}
}
func (m *FlowRunnerArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowRunnerArgs.Unmarshal(m, b)
}
func (m *FlowRunnerArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowRunnerArgs.Marshal(b, m, deterministic)
}
func (dst *FlowRunnerArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRunnerArgs.Merge(dst, src)
}
func (m *FlowRunnerArgs) XXX_Size() int {
	return xxx_messageInfo_FlowRunnerArgs.Size(m)
}
func (m *FlowRunnerArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRunnerArgs.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRunnerArgs proto.InternalMessageInfo

func (m *FlowRunnerArgs) GetNotifyToUser() bool {
	if m != nil {
		return m.NotifyToUser
	}
	return false
}

func (m *FlowRunnerArgs) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *FlowRunnerArgs) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *FlowRunnerArgs) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *FlowRunnerArgs) GetCpuLimit() uint64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetNetworkBytesLimit() uint64 {
	if m != nil {
		return m.NetworkBytesLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetFlowName() string {
	if m != nil {
		return m.FlowName
	}
	return ""
}

func (m *FlowRunnerArgs) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FlowRunnerArgs) GetRequireFastpoll() bool {
	if m != nil {
		return m.RequireFastpoll
	}
	return false
}

func (m *FlowRunnerArgs) GetArgs() *any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

// This is a short lived protobuf to hold various flow state
// information only valid between the start and end of the flow. It is
// used to keep state over multiple client round trips.
type VelociraptorFlowState struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload              *any.Any `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VelociraptorFlowState) Reset()         { *m = VelociraptorFlowState{} }
func (m *VelociraptorFlowState) String() string { return proto.CompactTextString(m) }
func (*VelociraptorFlowState) ProtoMessage()    {}
func (*VelociraptorFlowState) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{3}
}
func (m *VelociraptorFlowState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VelociraptorFlowState.Unmarshal(m, b)
}
func (m *VelociraptorFlowState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VelociraptorFlowState.Marshal(b, m, deterministic)
}
func (dst *VelociraptorFlowState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VelociraptorFlowState.Merge(dst, src)
}
func (m *VelociraptorFlowState) XXX_Size() int {
	return xxx_messageInfo_VelociraptorFlowState.Size(m)
}
func (m *VelociraptorFlowState) XXX_DiscardUnknown() {
	xxx_messageInfo_VelociraptorFlowState.DiscardUnknown(m)
}

var xxx_messageInfo_VelociraptorFlowState proto.InternalMessageInfo

func (m *VelociraptorFlowState) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VelociraptorFlowState) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type FlowDescriptor struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName         string   `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Category             string   `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Doc                  string   `protobuf:"bytes,4,opt,name=doc,proto3" json:"doc,omitempty"`
	ArgsType             string   `protobuf:"bytes,5,opt,name=args_type,json=argsType,proto3" json:"args_type,omitempty"`
	DefaultArgs          *any.Any `protobuf:"bytes,6,opt,name=default_args,json=defaultArgs,proto3" json:"default_args,omitempty"`
	Behaviours           string   `protobuf:"bytes,7,opt,name=behaviours,proto3" json:"behaviours,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowDescriptor) Reset()         { *m = FlowDescriptor{} }
func (m *FlowDescriptor) String() string { return proto.CompactTextString(m) }
func (*FlowDescriptor) ProtoMessage()    {}
func (*FlowDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{4}
}
func (m *FlowDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowDescriptor.Unmarshal(m, b)
}
func (m *FlowDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowDescriptor.Marshal(b, m, deterministic)
}
func (dst *FlowDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowDescriptor.Merge(dst, src)
}
func (m *FlowDescriptor) XXX_Size() int {
	return xxx_messageInfo_FlowDescriptor.Size(m)
}
func (m *FlowDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_FlowDescriptor proto.InternalMessageInfo

func (m *FlowDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlowDescriptor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *FlowDescriptor) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *FlowDescriptor) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *FlowDescriptor) GetArgsType() string {
	if m != nil {
		return m.ArgsType
	}
	return ""
}

func (m *FlowDescriptor) GetDefaultArgs() *any.Any {
	if m != nil {
		return m.DefaultArgs
	}
	return nil
}

func (m *FlowDescriptor) GetBehaviours() string {
	if m != nil {
		return m.Behaviours
	}
	return ""
}

// Interrogate flow discovers information about the client.
type VInterrogateArgs struct {
	// If set a light weight version of the flow is run.
	Lightweight bool `protobuf:"varint,1,opt,name=lightweight,proto3" json:"lightweight,omitempty"`
	// Additional VQL queries to run.
	Queries              []*proto2.VQLRequest `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VInterrogateArgs) Reset()         { *m = VInterrogateArgs{} }
func (m *VInterrogateArgs) String() string { return proto.CompactTextString(m) }
func (*VInterrogateArgs) ProtoMessage()    {}
func (*VInterrogateArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_0d78caa44e9beb4c, []int{5}
}
func (m *VInterrogateArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VInterrogateArgs.Unmarshal(m, b)
}
func (m *VInterrogateArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VInterrogateArgs.Marshal(b, m, deterministic)
}
func (dst *VInterrogateArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VInterrogateArgs.Merge(dst, src)
}
func (m *VInterrogateArgs) XXX_Size() int {
	return xxx_messageInfo_VInterrogateArgs.Size(m)
}
func (m *VInterrogateArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VInterrogateArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VInterrogateArgs proto.InternalMessageInfo

func (m *VInterrogateArgs) GetLightweight() bool {
	if m != nil {
		return m.Lightweight
	}
	return false
}

func (m *VInterrogateArgs) GetQueries() []*proto2.VQLRequest {
	if m != nil {
		return m.Queries
	}
	return nil
}

func init() {
	proto.RegisterType((*StartFlowRequest)(nil), "proto.StartFlowRequest")
	proto.RegisterType((*FlowContext)(nil), "proto.FlowContext")
	proto.RegisterType((*FlowRunnerArgs)(nil), "proto.FlowRunnerArgs")
	proto.RegisterType((*VelociraptorFlowState)(nil), "proto.VelociraptorFlowState")
	proto.RegisterType((*FlowDescriptor)(nil), "proto.FlowDescriptor")
	proto.RegisterType((*VInterrogateArgs)(nil), "proto.VInterrogateArgs")
	proto.RegisterEnum("proto.FlowContext_State", FlowContext_State_name, FlowContext_State_value)
}

func init() { proto.RegisterFile("flows.proto", fileDescriptor_flows_0d78caa44e9beb4c) }

var fileDescriptor_flows_0d78caa44e9beb4c = []byte{
	// 1819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0xc7,
	0xf5, 0xff, 0x53, 0x9f, 0xe4, 0x50, 0x92, 0xe9, 0x91, 0xec, 0xff, 0x5a, 0x09, 0x9a, 0x09, 0x5b,
	0xc0, 0x0a, 0xa0, 0xae, 0x6c, 0x46, 0x4d, 0x0c, 0x05, 0xb1, 0x2b, 0xea, 0x23, 0x55, 0x21, 0x2b,
	0xf5, 0x48, 0x56, 0x0b, 0x38, 0x05, 0x31, 0xdc, 0x1d, 0x92, 0x53, 0xef, 0xee, 0x50, 0x33, 0xb3,
	0xa2, 0x89, 0xb6, 0xd7, 0x01, 0xfa, 0x00, 0x7d, 0x87, 0xde, 0xf4, 0x01, 0x72, 0x57, 0xa0, 0xb7,
	0x7d, 0x89, 0xf6, 0xae, 0x40, 0x5f, 0xa0, 0xe8, 0x45, 0x71, 0xce, 0xcc, 0x5a, 0x54, 0xd1, 0x18,
	0x8d, 0x2f, 0x2c, 0xee, 0x9c, 0xdf, 0xf9, 0x9c, 0xdf, 0x39, 0x73, 0x48, 0x73, 0x90, 0xe9, 0x89,
	0x8d, 0xc7, 0x46, 0x3b, 0x4d, 0x17, 0xf1, 0xcf, 0xe6, 0x83, 0xa1, 0xd6, 0xc3, 0x4c, 0xee, 0xe0,
	0x57, 0xbf, 0x1c, 0xec, 0x88, 0x62, 0xea, 0x11, 0x9b, 0x7b, 0x93, 0xc9, 0x24, 0xbe, 0x96, 0x99,
	0x4e, 0x54, 0x2a, 0xdf, 0xc4, 0x89, 0xce, 0x77, 0x86, 0x3a, 0x13, 0xc5, 0x70, 0xc7, 0x1f, 0x1a,
	0x31, 0x76, 0xda, 0x78, 0xcd, 0x1d, 0x2b, 0x73, 0x51, 0x38, 0x95, 0x04, 0xdd, 0x67, 0xdf, 0x45,
	0x17, 0xc2, 0xea, 0xe5, 0xd2, 0x89, 0x54, 0x38, 0x11, 0x0c, 0x7c, 0xfe, 0xbf, 0x19, 0x10, 0x89,
	0x53, 0xba, 0xb0, 0xc1, 0xd0, 0xf5, 0x55, 0xf6, 0xdd, 0xd4, 0x13, 0x33, 0x1d, 0x3b, 0x1d, 0xb4,
	0x7f, 0xa5, 0xfb, 0xa1, 0x38, 0xed, 0xaf, 0x6b, 0xa4, 0x75, 0xee, 0x84, 0x71, 0xc7, 0x99, 0x9e,
	0x70, 0x79, 0x55, 0x4a, 0xeb, 0xe8, 0x27, 0xa4, 0x69, 0xca, 0xa2, 0x90, 0xa6, 0x27, 0xcc, 0xd0,
	0x46, 0x35, 0x56, 0xdb, 0x6a, 0x76, 0xee, 0x79, 0x8d, 0x18, 0x81, 0x28, 0xdd, 0x37, 0x43, 0xcb,
	0x89, 0x79, 0xfb, 0x9b, 0x7e, 0x46, 0x16, 0x50, 0x61, 0x1e, 0x15, 0x36, 0x62, 0x5f, 0xf1, 0xb8,
	0xaa, 0x78, 0xbc, 0x5f, 0x4c, 0xbb, 0x77, 0xff, 0xfa, 0xaf, 0xbf, 0xfd, 0xb9, 0xd6, 0xa4, 0x0d,
	0xb0, 0xc3, 0xd0, 0x04, 0x2a, 0xb5, 0xff, 0xb9, 0x4c, 0x9a, 0x70, 0x76, 0xa0, 0x0b, 0x27, 0xdf,
	0x38, 0xfa, 0x3e, 0x69, 0xf4, 0x45, 0xf2, 0xda, 0x19, 0x91, 0x48, 0x0c, 0xa1, 0xc1, 0x6f, 0x0e,
	0xe8, 0x3e, 0x69, 0x25, 0x99, 0x92, 0x85, 0xeb, 0x19, 0x69, 0x75, 0x69, 0x12, 0x69, 0xa3, 0x39,
	0x74, 0x7b, 0x3f, 0xc4, 0x79, 0x80, 0x62, 0x5e, 0x49, 0xf9, 0x9d, 0xe4, 0xf6, 0x01, 0xdd, 0x25,
	0xcd, 0xc4, 0x48, 0xe1, 0x64, 0xcf, 0xa9, 0x5c, 0x62, 0xd0, 0x0b, 0xdd, 0x75, 0x0c, 0x6f, 0x95,
	0x34, 0xf9, 0xe1, 0xf1, 0xa1, 0x70, 0x12, 0x44, 0x9c, 0x78, 0xdc, 0x85, 0xca, 0x25, 0x8d, 0xc8,
	0x32, 0x7e, 0x69, 0x13, 0x2d, 0x60, 0x50, 0xd5, 0x27, 0xfd, 0x3e, 0x59, 0x4d, 0x4a, 0x63, 0x20,
	0x26, 0xeb, 0x84, 0x93, 0xd1, 0x22, 0xca, 0x57, 0xc2, 0xe1, 0x39, 0x9c, 0xd1, 0x3d, 0xb2, 0xf6,
	0x5a, 0x65, 0x19, 0xba, 0xb4, 0x4e, 0xe4, 0xe3, 0x68, 0xe9, 0xdb, 0xfd, 0xae, 0x02, 0xf4, 0xa2,
	0x42, 0xd2, 0x6d, 0x42, 0x0b, 0xe9, 0x26, 0xda, 0xbc, 0xee, 0xf5, 0xa7, 0x4e, 0xda, 0x9e, 0x95,
	0x85, 0x8b, 0x96, 0x41, 0x9f, 0xb7, 0x82, 0xa4, 0x0b, 0x82, 0x73, 0x59, 0x38, 0xba, 0x45, 0x5a,
	0x85, 0x7c, 0xe3, 0x7a, 0xba, 0x74, 0x7d, 0x5d, 0x16, 0x69, 0x4f, 0xa5, 0x51, 0x1d, 0xb1, 0x6b,
	0x70, 0xfe, 0x65, 0x38, 0x3e, 0x49, 0xe9, 0x2e, 0xb9, 0x8f, 0xc8, 0xb1, 0xd1, 0x89, 0xb4, 0x56,
	0xa6, 0x3d, 0xe3, 0x89, 0x10, 0x35, 0x10, 0xbf, 0x01, 0xd2, 0x9f, 0x55, 0xc2, 0x8a, 0x24, 0x8f,
	0xc9, 0x86, 0x2e, 0x9d, 0x75, 0xa2, 0x48, 0x55, 0x31, 0xac, 0x54, 0x6c, 0xd4, 0x44, 0x9d, 0xf5,
	0x19, 0x59, 0xd0, 0xb0, 0x74, 0x44, 0x56, 0x9d, 0x76, 0x22, 0x83, 0x3b, 0x2b, 0x33, 0x67, 0x23,
	0x8a, 0xb9, 0x1f, 0x60, 0xee, 0x9f, 0xd3, 0xcf, 0x2e, 0x46, 0x92, 0x21, 0x80, 0x15, 0x65, 0xde,
	0x97, 0x86, 0xe9, 0x01, 0x0b, 0x50, 0xa6, 0x0a, 0xe6, 0x46, 0x92, 0x41, 0x07, 0x3d, 0xb4, 0xe1,
	0x94, 0x25, 0x3a, 0xcb, 0x24, 0x36, 0x06, 0x5f, 0x41, 0x45, 0xee, 0xd1, 0xf4, 0x2b, 0xb2, 0x56,
	0x8e, 0x33, 0x2d, 0x52, 0x99, 0xf6, 0x06, 0x2a, 0x93, 0x36, 0x5a, 0x67, 0xf3, 0x5b, 0x8d, 0xee,
	0x8f, 0xd0, 0xd5, 0x0e, 0xfd, 0xe1, 0x3e, 0xcb, 0x94, 0x75, 0xe0, 0x00, 0xc5, 0xac, 0x42, 0x33,
	0x61, 0xd9, 0x58, 0x18, 0x94, 0x54, 0xfe, 0x62, 0xbe, 0x5a, 0x89, 0x8f, 0x01, 0x4c, 0x9f, 0x91,
	0x85, 0x4c, 0x0f, 0x6d, 0xb4, 0xc1, 0xe6, 0xb7, 0x9a, 0x9d, 0xbb, 0x81, 0x70, 0xa7, 0x7a, 0xf8,
	0x5c, 0x5a, 0x2b, 0x86, 0xb2, 0x1b, 0xa1, 0x1b, 0x4a, 0x57, 0x4f, 0x83, 0x13, 0x80, 0xc7, 0x9b,
	0xb5, 0x39, 0x8e, 0x8a, 0xf4, 0x11, 0x21, 0x56, 0x5a, 0xab, 0x74, 0x01, 0xb7, 0xb2, 0x0a, 0x3c,
	0xa9, 0x1a, 0x83, 0x34, 0xce, 0xbd, 0xe4, 0xe4, 0x90, 0x37, 0x02, 0xe8, 0x24, 0xa5, 0x31, 0x59,
	0xf4, 0xa4, 0x5a, 0x63, 0xb5, 0xad, 0xb5, 0x4e, 0x34, 0xd3, 0x8c, 0xa1, 0x61, 0x62, 0x24, 0x18,
	0xf7, 0x30, 0x7a, 0x9f, 0x2c, 0xc1, 0x8f, 0xd2, 0x46, 0x77, 0x90, 0x85, 0xe1, 0x0b, 0x48, 0x5a,
	0x5a, 0x69, 0x7a, 0x85, 0x76, 0x6a, 0xa0, 0x64, 0x1a, 0xb5, 0x58, 0x6d, 0xab, 0xce, 0x57, 0xe0,
	0xf0, 0x2c, 0x9c, 0x41, 0x67, 0xc0, 0xb8, 0xb9, 0x0e, 0x9d, 0x71, 0xf7, 0x1d, 0x9d, 0xe1, 0x71,
	0xc0, 0xd1, 0xf6, 0x1e, 0x59, 0xf4, 0x1c, 0x6f, 0x90, 0xc5, 0x97, 0x67, 0xe7, 0x47, 0x17, 0xad,
	0xff, 0xa3, 0x4d, 0xb2, 0xcc, 0x5f, 0x9e, 0x9d, 0x9d, 0x9c, 0x7d, 0xd1, 0xaa, 0xd1, 0x35, 0x42,
	0x2e, 0x8e, 0xf8, 0xf3, 0x93, 0xb3, 0xfd, 0x8b, 0xa3, 0xc3, 0xd6, 0x1c, 0xe0, 0x8e, 0x38, 0xff,
	0x92, 0xb7, 0xe6, 0xdb, 0xbf, 0x6f, 0x90, 0xb5, 0xdb, 0x83, 0x85, 0x4e, 0xc9, 0x1a, 0x06, 0x39,
	0xed, 0x39, 0xdd, 0x83, 0xf0, 0xb0, 0xbf, 0xeb, 0xdd, 0x73, 0x8c, 0xe3, 0x39, 0xdd, 0x39, 0x1f,
	0xe9, 0x32, 0x4b, 0x99, 0x60, 0x3e, 0x97, 0x44, 0x00, 0x0f, 0x58, 0x5f, 0x32, 0x68, 0x0b, 0xe6,
	0x34, 0xde, 0x9f, 0x2a, 0x94, 0x53, 0xd0, 0x9e, 0x71, 0x7b, 0x03, 0xf3, 0x9b, 0x32, 0xe1, 0xd8,
	0x81, 0xce, 0xc7, 0x99, 0x04, 0x7c, 0x67, 0xc1, 0x99, 0x52, 0xf2, 0x15, 0xef, 0xea, 0x42, 0xbf,
	0xb4, 0xd2, 0xd0, 0x9f, 0x93, 0x46, 0x18, 0x2e, 0x2a, 0xf5, 0x5d, 0xdc, 0xdd, 0x43, 0xaf, 0xbb,
	0xa4, 0xe1, 0xc7, 0xca, 0x4b, 0x7e, 0x46, 0x7f, 0x00, 0x74, 0xf5, 0x38, 0xa6, 0x52, 0xe6, 0x46,
	0xca, 0x22, 0x5d, 0x98, 0x1e, 0x4b, 0x23, 0x9c, 0xb4, 0x4c, 0x17, 0x78, 0xe7, 0x75, 0x0f, 0x3a,
	0x49, 0xe9, 0x4f, 0xc9, 0xe2, 0x55, 0x29, 0x4b, 0x89, 0x4d, 0xdf, 0xe8, 0xee, 0xa2, 0xd1, 0x98,
	0x2c, 0xf1, 0xc3, 0x63, 0xb0, 0xf8, 0x3d, 0xb0, 0x88, 0x00, 0x08, 0xbf, 0xb4, 0x92, 0x0d, 0xb4,
	0xb9, 0xa1, 0xe1, 0x66, 0x6d, 0xae, 0x53, 0x3b, 0xe6, 0xde, 0x04, 0xe5, 0xa4, 0x2e, 0xaf, 0x43,
	0x8c, 0xcb, 0x68, 0xee, 0x53, 0x34, 0xf7, 0x98, 0x6e, 0xef, 0x03, 0xdf, 0x86, 0xaa, 0x18, 0x32,
	0x44, 0x40, 0x74, 0x60, 0x48, 0x59, 0x5b, 0xc2, 0xe1, 0xa0, 0x34, 0x6e, 0x24, 0xcd, 0x0d, 0x29,
	0x97, 0x11, 0x76, 0x92, 0xd2, 0x3e, 0x69, 0x24, 0xe3, 0xb2, 0x97, 0xa9, 0x5c, 0x85, 0xe6, 0xef,
	0x1e, 0xa1, 0xd1, 0x67, 0x74, 0x17, 0x3a, 0x26, 0x57, 0x8e, 0x69, 0xdf, 0x88, 0x21, 0xf1, 0x64,
	0x5c, 0x32, 0x2b, 0x13, 0x5d, 0xa4, 0x16, 0x02, 0x4e, 0x59, 0x7f, 0x7a, 0x53, 0x89, 0x78, 0xb3,
	0x56, 0xeb, 0x2c, 0x7c, 0xda, 0x79, 0xf4, 0x88, 0xd7, 0x93, 0x71, 0x79, 0x0a, 0xfa, 0xd4, 0x91,
	0xf5, 0xdb, 0x53, 0xcc, 0x7b, 0x5b, 0x45, 0x6f, 0x87, 0xe8, 0xed, 0x29, 0xdd, 0xf9, 0x0f, 0x6f,
	0x7e, 0x2a, 0x38, 0x23, 0x06, 0x03, 0x95, 0x7c, 0x8b, 0xa3, 0xfa, 0xe3, 0x47, 0xfe, 0x1f, 0xbf,
	0x3b, 0x3b, 0x0c, 0xbd, 0xd7, 0x57, 0xa4, 0x81, 0x8f, 0x6f, 0x21, 0x72, 0x89, 0x23, 0xaa, 0xd1,
	0x7d, 0x8a, 0xbe, 0x9e, 0xd0, 0x8f, 0xa1, 0xea, 0x70, 0x5e, 0xf5, 0x7c, 0x92, 0x09, 0x6b, 0x99,
	0x02, 0x8a, 0xe4, 0xb2, 0x70, 0x50, 0xb2, 0xea, 0x0e, 0xe0, 0x5e, 0x4c, 0x19, 0xae, 0x15, 0x0e,
	0xce, 0x44, 0x2e, 0xe9, 0xef, 0x6a, 0x84, 0x58, 0x78, 0x44, 0x7d, 0xbf, 0xdc, 0xc1, 0x54, 0x5e,
	0xa3, 0x79, 0x79, 0xab, 0x5f, 0xe8, 0xf9, 0xa1, 0x06, 0xba, 0xb2, 0x30, 0x6a, 0x67, 0x48, 0x53,
	0x16, 0x4e, 0x65, 0xfe, 0x1b, 0x90, 0x31, 0xdb, 0x3a, 0xc9, 0xc7, 0x99, 0x92, 0xf6, 0xc6, 0xb7,
	0xb2, 0xe0, 0x9b, 0x09, 0x3b, 0x2d, 0x12, 0xa3, 0x0b, 0x5d, 0xda, 0x6c, 0x1a, 0x7f, 0x04, 0xb9,
	0xf3, 0x06, 0xba, 0xc7, 0x07, 0xea, 0x1f, 0x35, 0xd2, 0x82, 0x61, 0xac, 0x8c, 0xec, 0x0d, 0x84,
	0x75, 0x63, 0x9d, 0x65, 0xd1, 0x3a, 0xb6, 0xce, 0x9f, 0x6a, 0x18, 0xd3, 0x37, 0x35, 0xfa, 0xc7,
	0xda, 0x05, 0x78, 0xba, 0x16, 0x59, 0x29, 0xc1, 0xee, 0x58, 0xc0, 0x68, 0xaf, 0x9a, 0x26, 0xdc,
	0x6d, 0x5a, 0x1a, 0xc8, 0xfd, 0x40, 0x64, 0x99, 0x67, 0xfd, 0x36, 0x13, 0x05, 0x16, 0x3e, 0x95,
	0x03, 0x01, 0xf3, 0x77, 0xa2, 0xb2, 0x8c, 0x25, 0x02, 0x98, 0x3a, 0xa3, 0xe7, 0x34, 0x93, 0x85,
	0x93, 0x86, 0x55, 0xee, 0x99, 0x18, 0x38, 0x69, 0x42, 0xce, 0x55, 0x39, 0x73, 0x3f, 0x2b, 0x63,
	0x06, 0x2d, 0x67, 0x99, 0xc5, 0x6e, 0x2e, 0x1e, 0x3a, 0x96, 0xeb, 0x14, 0xda, 0x14, 0x4b, 0x61,
	0xa5, 0x83, 0xfa, 0x7b, 0x22, 0x61, 0xa7, 0xde, 0x09, 0xb9, 0x1d, 0x07, 0xdb, 0xf4, 0xab, 0xb0,
	0x74, 0x44, 0xef, 0x58, 0x3a, 0x3a, 0x98, 0xf7, 0x36, 0x7d, 0x08, 0x57, 0x1d, 0x5e, 0xaa, 0x99,
	0xda, 0x4f, 0x84, 0x65, 0x58, 0x40, 0x99, 0xb2, 0x89, 0x72, 0x23, 0x3f, 0xa9, 0x71, 0x2b, 0x79,
	0x45, 0xee, 0x5d, 0xce, 0xec, 0x51, 0x30, 0xa3, 0xfc, 0x90, 0xa3, 0x64, 0xc1, 0x4d, 0xc7, 0xd5,
	0x66, 0x82, 0xbf, 0x69, 0x4c, 0x96, 0xc7, 0x62, 0x0a, 0x2f, 0x45, 0xd8, 0x45, 0xfe, 0x6b, 0x34,
	0xbc, 0x02, 0xb5, 0xff, 0x32, 0xef, 0xa7, 0xde, 0xa1, 0xb4, 0x89, 0x51, 0x60, 0x1f, 0x56, 0x28,
	0xa4, 0x28, 0x9a, 0xed, 0x3e, 0xc4, 0xb8, 0x3f, 0xa4, 0x1f, 0xe0, 0xb2, 0x84, 0x1c, 0x15, 0xf0,
	0xf8, 0x0d, 0x95, 0x75, 0xd2, 0xc8, 0x14, 0x5e, 0xc5, 0x2f, 0x38, 0x8f, 0x39, 0x2a, 0xd1, 0x1f,
	0x93, 0xd5, 0x81, 0x51, 0xb2, 0x48, 0xb3, 0xa9, 0x27, 0xfa, 0x1c, 0x5a, 0x79, 0x0f, 0xad, 0xdc,
	0xa3, 0xeb, 0xc7, 0x41, 0xe8, 0xb3, 0x06, 0x44, 0xcc, 0x57, 0x2a, 0x0d, 0x64, 0x72, 0x87, 0xd4,
	0x13, 0xe1, 0xe4, 0x50, 0x9b, 0x29, 0x2e, 0x44, 0x8d, 0xee, 0x7d, 0x54, 0x6e, 0x51, 0x0c, 0x94,
	0x55, 0xc2, 0x98, 0xbf, 0xc5, 0xd1, 0x5d, 0x32, 0x9f, 0xea, 0xc4, 0x6f, 0x43, 0xdd, 0x36, 0xc2,
	0xdf, 0xa7, 0x9b, 0x08, 0x4f, 0x75, 0x52, 0x42, 0x0b, 0xf9, 0xd1, 0x6c, 0x1d, 0xf0, 0x29, 0xe6,
	0x00, 0xa7, 0x4f, 0x49, 0x03, 0x0a, 0xdc, 0xc3, 0x22, 0xfa, 0x19, 0xfb, 0x21, 0xea, 0xbe, 0x47,
	0x1f, 0xa0, 0xae, 0x30, 0x43, 0xd4, 0xb5, 0x0c, 0x20, 0x21, 0xda, 0x3a, 0xe8, 0x5c, 0x40, 0xad,
	0x7f, 0x41, 0x56, 0x02, 0x0b, 0xfd, 0x92, 0xba, 0xf4, 0x8e, 0xeb, 0xff, 0x00, 0x0d, 0x3f, 0xa0,
	0xff, 0x7f, 0x18, 0x78, 0x3b, 0xb8, 0xe5, 0x20, 0xe6, 0xcd, 0x60, 0x0a, 0x1f, 0x9e, 0x27, 0x84,
	0xf4, 0xe5, 0x48, 0x5c, 0x2b, 0x5d, 0x1a, 0x1b, 0x46, 0x6b, 0xf5, 0xa0, 0xb7, 0x30, 0xb4, 0x1b,
	0x71, 0xcc, 0x67, 0xb0, 0xed, 0x6f, 0xe6, 0x48, 0xeb, 0xf2, 0x04, 0xa8, 0x6f, 0xf4, 0x50, 0x38,
	0x89, 0xe6, 0x06, 0xa4, 0x99, 0xa9, 0xe1, 0xc8, 0x4d, 0x24, 0xfc, 0x8f, 0x17, 0x5b, 0x7f, 0x3b,
	0xe7, 0x3e, 0x39, 0xf0, 0x1b, 0x0c, 0xd3, 0x45, 0x36, 0x65, 0x60, 0xbb, 0x5a, 0x67, 0x99, 0x2a,
	0x06, 0xda, 0xe4, 0xbe, 0x72, 0x03, 0xa3, 0xf3, 0x99, 0x0e, 0x8b, 0x43, 0x2f, 0xcc, 0x1a, 0xa6,
	0x7f, 0xa8, 0x91, 0xe5, 0xab, 0x52, 0x1a, 0x85, 0x9b, 0xf0, 0xec, 0x62, 0x72, 0xf9, 0xe2, 0x34,
	0xac, 0x60, 0xdd, 0xdf, 0xa0, 0xdf, 0x6b, 0xba, 0xb7, 0x9f, 0xa6, 0x0a, 0x4c, 0x8b, 0x8c, 0x25,
	0xa5, 0x75, 0x3a, 0x67, 0x97, 0x2f, 0x4e, 0x59, 0xd0, 0x0f, 0x53, 0xae, 0x1a, 0x00, 0xea, 0x6d,
	0x46, 0x4a, 0x17, 0x71, 0xe7, 0xc9, 0xab, 0x5f, 0xb7, 0x81, 0x2c, 0xed, 0x3d, 0xd6, 0xfe, 0x89,
	0xb6, 0x0e, 0x6e, 0xa6, 0xbd, 0xcd, 0xda, 0x97, 0x2f, 0x4e, 0xe1, 0xc8, 0x4a, 0x4c, 0xe8, 0xf8,
	0x2a, 0x0d, 0x71, 0x43, 0x22, 0x5b, 0x1f, 0xb5, 0x7f, 0xfb, 0x4b, 0x5e, 0xc5, 0xb7, 0x47, 0xff,
	0xfe, 0x35, 0x5b, 0x23, 0x2b, 0xb3, 0x9d, 0xd5, 0x5f, 0xc2, 0x60, 0x3f, 0xfe, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xdd, 0xb4, 0x12, 0xd7, 0xbc, 0x0d, 0x00, 0x00,
}
