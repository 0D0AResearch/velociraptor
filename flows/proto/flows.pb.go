// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flows.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import proto1 "www.velocidex.com/golang/velociraptor/actions/proto"
import proto2 "www.velocidex.com/golang/velociraptor/crypto/proto"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowContext_State int32

const (
	FlowContext_UNSET      FlowContext_State = 0
	FlowContext_RUNNING    FlowContext_State = 1
	FlowContext_TERMINATED FlowContext_State = 2
	FlowContext_ERROR      FlowContext_State = 3
)

var FlowContext_State_name = map[int32]string{
	0: "UNSET",
	1: "RUNNING",
	2: "TERMINATED",
	3: "ERROR",
}
var FlowContext_State_value = map[string]int32{
	"UNSET":      0,
	"RUNNING":    1,
	"TERMINATED": 2,
	"ERROR":      3,
}

func (x FlowContext_State) String() string {
	return proto.EnumName(FlowContext_State_name, int32(x))
}
func (FlowContext_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{2, 0}
}

type FlowReference struct {
	FlowId               string   `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowReference) Reset()         { *m = FlowReference{} }
func (m *FlowReference) String() string { return proto.CompactTextString(m) }
func (*FlowReference) ProtoMessage()    {}
func (*FlowReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{0}
}
func (m *FlowReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowReference.Unmarshal(m, b)
}
func (m *FlowReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowReference.Marshal(b, m, deterministic)
}
func (dst *FlowReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowReference.Merge(dst, src)
}
func (m *FlowReference) XXX_Size() int {
	return xxx_messageInfo_FlowReference.Size(m)
}
func (m *FlowReference) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowReference.DiscardUnknown(m)
}

var xxx_messageInfo_FlowReference proto.InternalMessageInfo

func (m *FlowReference) GetFlowId() string {
	if m != nil {
		return m.FlowId
	}
	return ""
}

func (m *FlowReference) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type StartFlowRequest struct {
	ClientId             string                   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Interrogate          *VInterrogateArgs        `protobuf:"bytes,2,opt,name=interrogate,proto3" json:"interrogate,omitempty"`
	Collect              *proto1.VQLCollectorArgs `protobuf:"bytes,3,opt,name=collect,proto3" json:"collect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StartFlowRequest) Reset()         { *m = StartFlowRequest{} }
func (m *StartFlowRequest) String() string { return proto.CompactTextString(m) }
func (*StartFlowRequest) ProtoMessage()    {}
func (*StartFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{1}
}
func (m *StartFlowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartFlowRequest.Unmarshal(m, b)
}
func (m *StartFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartFlowRequest.Marshal(b, m, deterministic)
}
func (dst *StartFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartFlowRequest.Merge(dst, src)
}
func (m *StartFlowRequest) XXX_Size() int {
	return xxx_messageInfo_StartFlowRequest.Size(m)
}
func (m *StartFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartFlowRequest proto.InternalMessageInfo

func (m *StartFlowRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *StartFlowRequest) GetInterrogate() *VInterrogateArgs {
	if m != nil {
		return m.Interrogate
	}
	return nil
}

func (m *StartFlowRequest) GetCollect() *proto1.VQLCollectorArgs {
	if m != nil {
		return m.Collect
	}
	return nil
}

// The flow context.
// Next field: 17
type FlowContext struct {
	Backtrace            string                  `protobuf:"bytes,1,opt,name=backtrace,proto3" json:"backtrace,omitempty"`
	ClientResources      *proto2.ClientResources `protobuf:"bytes,2,opt,name=client_resources,json=clientResources,proto3" json:"client_resources,omitempty"`
	CreateTime           uint64                  `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Creator              string                  `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	CurrentState         string                  `protobuf:"bytes,5,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	KillTimestamp        uint64                  `protobuf:"varint,6,opt,name=kill_timestamp,json=killTimestamp,proto3" json:"kill_timestamp,omitempty"`
	NetworkBytesSent     uint64                  `protobuf:"varint,7,opt,name=network_bytes_sent,json=networkBytesSent,proto3" json:"network_bytes_sent,omitempty"`
	NextOutboundId       uint64                  `protobuf:"varint,8,opt,name=next_outbound_id,json=nextOutboundId,proto3" json:"next_outbound_id,omitempty"`
	NextProcessedRequest uint64                  `protobuf:"varint,9,opt,name=next_processed_request,json=nextProcessedRequest,proto3" json:"next_processed_request,omitempty"`
	//  repeated OutputPluginState output_plugins_states = 10;
	OutstandingRequests uint64 `protobuf:"varint,11,opt,name=outstanding_requests,json=outstandingRequests,proto3" json:"outstanding_requests,omitempty"`
	// DEPRECATED
	//  uint64 remaining_cpu_quota = 12;
	SessionId            string            `protobuf:"bytes,13,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	State                FlowContext_State `protobuf:"varint,14,opt,name=state,proto3,enum=proto.FlowContext_State" json:"state,omitempty"`
	Status               string            `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	UserNotified         bool              `protobuf:"varint,16,opt,name=user_notified,json=userNotified,proto3" json:"user_notified,omitempty"`
	ActiveTime           uint64            `protobuf:"varint,17,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FlowContext) Reset()         { *m = FlowContext{} }
func (m *FlowContext) String() string { return proto.CompactTextString(m) }
func (*FlowContext) ProtoMessage()    {}
func (*FlowContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{2}
}
func (m *FlowContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowContext.Unmarshal(m, b)
}
func (m *FlowContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowContext.Marshal(b, m, deterministic)
}
func (dst *FlowContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowContext.Merge(dst, src)
}
func (m *FlowContext) XXX_Size() int {
	return xxx_messageInfo_FlowContext.Size(m)
}
func (m *FlowContext) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowContext.DiscardUnknown(m)
}

var xxx_messageInfo_FlowContext proto.InternalMessageInfo

func (m *FlowContext) GetBacktrace() string {
	if m != nil {
		return m.Backtrace
	}
	return ""
}

func (m *FlowContext) GetClientResources() *proto2.ClientResources {
	if m != nil {
		return m.ClientResources
	}
	return nil
}

func (m *FlowContext) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *FlowContext) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *FlowContext) GetCurrentState() string {
	if m != nil {
		return m.CurrentState
	}
	return ""
}

func (m *FlowContext) GetKillTimestamp() uint64 {
	if m != nil {
		return m.KillTimestamp
	}
	return 0
}

func (m *FlowContext) GetNetworkBytesSent() uint64 {
	if m != nil {
		return m.NetworkBytesSent
	}
	return 0
}

func (m *FlowContext) GetNextOutboundId() uint64 {
	if m != nil {
		return m.NextOutboundId
	}
	return 0
}

func (m *FlowContext) GetNextProcessedRequest() uint64 {
	if m != nil {
		return m.NextProcessedRequest
	}
	return 0
}

func (m *FlowContext) GetOutstandingRequests() uint64 {
	if m != nil {
		return m.OutstandingRequests
	}
	return 0
}

func (m *FlowContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FlowContext) GetState() FlowContext_State {
	if m != nil {
		return m.State
	}
	return FlowContext_UNSET
}

func (m *FlowContext) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FlowContext) GetUserNotified() bool {
	if m != nil {
		return m.UserNotified
	}
	return false
}

func (m *FlowContext) GetActiveTime() uint64 {
	if m != nil {
		return m.ActiveTime
	}
	return 0
}

// Next field: 23
type FlowRunnerArgs struct {
	Priority          proto2.GrrMessage_Priority `protobuf:"varint,1,opt,name=priority,proto3,enum=proto.GrrMessage_Priority" json:"priority,omitempty"`
	NotifyToUser      bool                       `protobuf:"varint,2,opt,name=notify_to_user,json=notifyToUser,proto3" json:"notify_to_user,omitempty"`
	SendReplies       bool                       `protobuf:"varint,3,opt,name=send_replies,json=sendReplies,proto3" json:"send_replies,omitempty"`
	ClientId          string                     `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Queue             string                     `protobuf:"bytes,6,opt,name=queue,proto3" json:"queue,omitempty"`
	EventId           string                     `protobuf:"bytes,7,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CpuLimit          uint64                     `protobuf:"varint,9,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
	NetworkBytesLimit uint64                     `protobuf:"varint,13,opt,name=network_bytes_limit,json=networkBytesLimit,proto3" json:"network_bytes_limit,omitempty"`
	//
	// RequestState request_state = 10 [(sem_type) = {
	// description: "The request state of the parent flow.",
	// label: HIDDEN,
	// }];
	FlowName                 string            `protobuf:"bytes,11,opt,name=flow_name,json=flowName,proto3" json:"flow_name,omitempty"`
	BaseSessionId            string            `protobuf:"bytes,12,opt,name=base_session_id,json=baseSessionId,proto3" json:"base_session_id,omitempty"`
	StartTime                uint64            `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	LogsCollectionUrn        string            `protobuf:"bytes,17,opt,name=logs_collection_urn,json=logsCollectionUrn,proto3" json:"logs_collection_urn,omitempty"`
	WriteIntermediateResults bool              `protobuf:"varint,18,opt,name=write_intermediate_results,json=writeIntermediateResults,proto3" json:"write_intermediate_results,omitempty"`
	RequireFastpoll          bool              `protobuf:"varint,19,opt,name=require_fastpoll,json=requireFastpoll,proto3" json:"require_fastpoll,omitempty"`
	OriginalFlow             *FlowReference    `protobuf:"bytes,22,opt,name=original_flow,json=originalFlow,proto3" json:"original_flow,omitempty"`
	Args                     *StartFlowRequest `protobuf:"bytes,23,opt,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}          `json:"-"`
	XXX_unrecognized         []byte            `json:"-"`
	XXX_sizecache            int32             `json:"-"`
}

func (m *FlowRunnerArgs) Reset()         { *m = FlowRunnerArgs{} }
func (m *FlowRunnerArgs) String() string { return proto.CompactTextString(m) }
func (*FlowRunnerArgs) ProtoMessage()    {}
func (*FlowRunnerArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{3}
}
func (m *FlowRunnerArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowRunnerArgs.Unmarshal(m, b)
}
func (m *FlowRunnerArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowRunnerArgs.Marshal(b, m, deterministic)
}
func (dst *FlowRunnerArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRunnerArgs.Merge(dst, src)
}
func (m *FlowRunnerArgs) XXX_Size() int {
	return xxx_messageInfo_FlowRunnerArgs.Size(m)
}
func (m *FlowRunnerArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRunnerArgs.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRunnerArgs proto.InternalMessageInfo

func (m *FlowRunnerArgs) GetPriority() proto2.GrrMessage_Priority {
	if m != nil {
		return m.Priority
	}
	return proto2.GrrMessage_LOW_PRIORITY
}

func (m *FlowRunnerArgs) GetNotifyToUser() bool {
	if m != nil {
		return m.NotifyToUser
	}
	return false
}

func (m *FlowRunnerArgs) GetSendReplies() bool {
	if m != nil {
		return m.SendReplies
	}
	return false
}

func (m *FlowRunnerArgs) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *FlowRunnerArgs) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *FlowRunnerArgs) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *FlowRunnerArgs) GetCpuLimit() uint64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetNetworkBytesLimit() uint64 {
	if m != nil {
		return m.NetworkBytesLimit
	}
	return 0
}

func (m *FlowRunnerArgs) GetFlowName() string {
	if m != nil {
		return m.FlowName
	}
	return ""
}

func (m *FlowRunnerArgs) GetBaseSessionId() string {
	if m != nil {
		return m.BaseSessionId
	}
	return ""
}

func (m *FlowRunnerArgs) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FlowRunnerArgs) GetLogsCollectionUrn() string {
	if m != nil {
		return m.LogsCollectionUrn
	}
	return ""
}

func (m *FlowRunnerArgs) GetWriteIntermediateResults() bool {
	if m != nil {
		return m.WriteIntermediateResults
	}
	return false
}

func (m *FlowRunnerArgs) GetRequireFastpoll() bool {
	if m != nil {
		return m.RequireFastpoll
	}
	return false
}

func (m *FlowRunnerArgs) GetOriginalFlow() *FlowReference {
	if m != nil {
		return m.OriginalFlow
	}
	return nil
}

func (m *FlowRunnerArgs) GetArgs() *StartFlowRequest {
	if m != nil {
		return m.Args
	}
	return nil
}

// This is a short lived protobuf to hold various flow state
// information only valid between the start and end of the flow. It is
// used to keep state over multiple client round trips.
type VelociraptorFlowState struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload              *any.Any `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VelociraptorFlowState) Reset()         { *m = VelociraptorFlowState{} }
func (m *VelociraptorFlowState) String() string { return proto.CompactTextString(m) }
func (*VelociraptorFlowState) ProtoMessage()    {}
func (*VelociraptorFlowState) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{4}
}
func (m *VelociraptorFlowState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VelociraptorFlowState.Unmarshal(m, b)
}
func (m *VelociraptorFlowState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VelociraptorFlowState.Marshal(b, m, deterministic)
}
func (dst *VelociraptorFlowState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VelociraptorFlowState.Merge(dst, src)
}
func (m *VelociraptorFlowState) XXX_Size() int {
	return xxx_messageInfo_VelociraptorFlowState.Size(m)
}
func (m *VelociraptorFlowState) XXX_DiscardUnknown() {
	xxx_messageInfo_VelociraptorFlowState.DiscardUnknown(m)
}

var xxx_messageInfo_VelociraptorFlowState proto.InternalMessageInfo

func (m *VelociraptorFlowState) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VelociraptorFlowState) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Interrogate flow discovers information about the client.
type VInterrogateArgs struct {
	// If set a light weight version of the flow is run.
	Lightweight bool `protobuf:"varint,1,opt,name=lightweight,proto3" json:"lightweight,omitempty"`
	// Additional VQL queries to run.
	Queries              []*proto1.VQLRequest `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VInterrogateArgs) Reset()         { *m = VInterrogateArgs{} }
func (m *VInterrogateArgs) String() string { return proto.CompactTextString(m) }
func (*VInterrogateArgs) ProtoMessage()    {}
func (*VInterrogateArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_flows_a92421790e92957f, []int{5}
}
func (m *VInterrogateArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VInterrogateArgs.Unmarshal(m, b)
}
func (m *VInterrogateArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VInterrogateArgs.Marshal(b, m, deterministic)
}
func (dst *VInterrogateArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VInterrogateArgs.Merge(dst, src)
}
func (m *VInterrogateArgs) XXX_Size() int {
	return xxx_messageInfo_VInterrogateArgs.Size(m)
}
func (m *VInterrogateArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VInterrogateArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VInterrogateArgs proto.InternalMessageInfo

func (m *VInterrogateArgs) GetLightweight() bool {
	if m != nil {
		return m.Lightweight
	}
	return false
}

func (m *VInterrogateArgs) GetQueries() []*proto1.VQLRequest {
	if m != nil {
		return m.Queries
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowReference)(nil), "proto.FlowReference")
	proto.RegisterType((*StartFlowRequest)(nil), "proto.StartFlowRequest")
	proto.RegisterType((*FlowContext)(nil), "proto.FlowContext")
	proto.RegisterType((*FlowRunnerArgs)(nil), "proto.FlowRunnerArgs")
	proto.RegisterType((*VelociraptorFlowState)(nil), "proto.VelociraptorFlowState")
	proto.RegisterType((*VInterrogateArgs)(nil), "proto.VInterrogateArgs")
	proto.RegisterEnum("proto.FlowContext_State", FlowContext_State_name, FlowContext_State_value)
}

func init() { proto.RegisterFile("flows.proto", fileDescriptor_flows_a92421790e92957f) }

var fileDescriptor_flows_a92421790e92957f = []byte{
	// 1846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x5f, 0x6f, 0x1c, 0x49,
	0x11, 0x67, 0x9d, 0x38, 0xf6, 0xf6, 0xfa, 0xcf, 0xa6, 0x13, 0x72, 0x43, 0x40, 0xa8, 0x65, 0x4e,
	0xc4, 0xe1, 0xcc, 0xf8, 0xb0, 0xa3, 0x10, 0x72, 0x04, 0xf0, 0xfa, 0x4f, 0xb4, 0x22, 0xf1, 0x5d,
	0x66, 0x6d, 0x4b, 0xc0, 0x89, 0x55, 0xef, 0x4c, 0xed, 0x6e, 0x5f, 0x66, 0xbb, 0xd7, 0xdd, 0x3d,
	0xde, 0xac, 0x90, 0x78, 0x43, 0x88, 0x4f, 0xc0, 0x2b, 0xe2, 0x03, 0x20, 0x21, 0xc4, 0x1b, 0x8f,
	0x7c, 0x12, 0x78, 0x41, 0xbc, 0xf1, 0xce, 0x03, 0xaa, 0x9a, 0x1e, 0x7b, 0x6c, 0x1d, 0x88, 0x7b,
	0x89, 0x33, 0xdd, 0x55, 0xf5, 0xab, 0xfe, 0x75, 0xd5, 0xaf, 0x6b, 0x59, 0x6b, 0x98, 0x9b, 0x99,
	0x8b, 0xa7, 0xd6, 0x78, 0xc3, 0x17, 0xe9, 0xcf, 0xc3, 0xaf, 0x8c, 0x8c, 0x19, 0xe5, 0xb0, 0x4d,
	0x5f, 0x83, 0x62, 0xb8, 0x2d, 0xf5, 0xbc, 0xb4, 0x78, 0xf8, 0x7c, 0x36, 0x9b, 0xc5, 0x17, 0x90,
	0x9b, 0x54, 0x65, 0xf0, 0x2e, 0x4e, 0xcd, 0x64, 0x7b, 0x64, 0x72, 0xa9, 0x47, 0xdb, 0xe5, 0xa2,
	0x95, 0x53, 0x6f, 0x6c, 0xe9, 0xb9, 0xed, 0x60, 0x22, 0xb5, 0x57, 0x69, 0xf0, 0xfd, 0xe1, 0x17,
	0xf1, 0xc5, 0xb4, 0xfa, 0x13, 0xf0, 0x32, 0x93, 0x5e, 0x86, 0x00, 0x2f, 0xfe, 0xbf, 0x00, 0x32,
	0xf5, 0xca, 0x68, 0x17, 0x02, 0x5d, 0x9c, 0xe7, 0x5f, 0xcc, 0x3d, 0xb5, 0xf3, 0xa9, 0x37, 0xc1,
	0xfb, 0x33, 0x33, 0x08, 0xe4, 0x6c, 0xfc, 0xa9, 0xc1, 0x56, 0x8f, 0x72, 0x33, 0x4b, 0x60, 0x08,
	0x16, 0x74, 0x0a, 0xfc, 0x25, 0x5b, 0xa2, 0x34, 0x55, 0x16, 0x35, 0x44, 0x63, 0xb3, 0xd9, 0x89,
	0xff, 0xf6, 0xef, 0xbf, 0xff, 0xb5, 0xb1, 0xc9, 0xbf, 0x79, 0x32, 0x06, 0xe1, 0xc0, 0x39, 0x65,
	0xb4, 0x50, 0x99, 0x30, 0x43, 0xe1, 0xc7, 0x20, 0x6c, 0xe5, 0x99, 0x09, 0xf4, 0x8b, 0x93, 0x3b,
	0xf8, 0xa7, 0x9b, 0xf1, 0x9f, 0xb0, 0x66, 0x9a, 0x2b, 0xd0, 0x1e, 0x43, 0x2d, 0x50, 0xa8, 0xef,
	0x53, 0xa8, 0xa7, 0xac, 0xb9, 0x4f, 0x1b, 0xa7, 0xc9, 0x31, 0x7f, 0x8c, 0x51, 0x4b, 0x3b, 0x0c,
	0xfa, 0x39, 0x11, 0x85, 0x95, 0x5a, 0x18, 0x1d, 0x27, 0xcb, 0xa5, 0x59, 0x37, 0xdb, 0xf8, 0xfd,
	0x02, 0x6b, 0xf7, 0xbc, 0xb4, 0xbe, 0x4c, 0xfd, 0xbc, 0x00, 0xe7, 0xf9, 0x57, 0xeb, 0x78, 0x94,
	0xfa, 0x95, 0x07, 0xff, 0x25, 0x6b, 0x29, 0xed, 0xc1, 0x5a, 0x33, 0x92, 0x1e, 0x28, 0x9d, 0xd6,
	0xce, 0x7b, 0x25, 0x09, 0xf1, 0x59, 0xf7, 0x6a, 0x6b, 0xcf, 0x8e, 0x5c, 0x67, 0x9f, 0xf2, 0x7c,
	0xc1, 0x3f, 0x3a, 0x19, 0x2b, 0x57, 0x26, 0xa1, 0x9c, 0xc8, 0xc0, 0xa9, 0x91, 0x86, 0x4c, 0x78,
	0x23, 0x46, 0xd2, 0x8f, 0xc1, 0x0a, 0xa5, 0x87, 0xc6, 0x4e, 0x24, 0x5e, 0x8d, 0x90, 0x03, 0x53,
	0x78, 0x3a, 0xc0, 0xd8, 0x38, 0x1f, 0x27, 0x75, 0x40, 0x7e, 0xce, 0x96, 0x52, 0x93, 0xe7, 0x90,
	0xfa, 0xe8, 0xd6, 0x75, 0xec, 0x37, 0xaf, 0xf6, 0xcb, 0x0d, 0x63, 0x09, 0xfb, 0x07, 0x84, 0xfd,
	0x8c, 0x3f, 0x4d, 0x0a, 0x2d, 0xce, 0xde, 0xbc, 0x12, 0xe7, 0x05, 0x58, 0x05, 0x4e, 0x18, 0x4d,
	0xc1, 0x03, 0x57, 0x52, 0x67, 0x22, 0x44, 0x0c, 0xa4, 0xb9, 0x22, 0xf7, 0x2e, 0x4e, 0x2a, 0x9c,
	0x8d, 0x7f, 0x2d, 0xb2, 0x16, 0xf2, 0xb3, 0x6f, 0xb4, 0x87, 0x77, 0x9e, 0x7f, 0x8d, 0x35, 0x07,
	0x32, 0x7d, 0xeb, 0xad, 0x4c, 0x21, 0xf0, 0x73, 0xb5, 0xc0, 0xf7, 0x58, 0x3b, 0xb0, 0x67, 0xc1,
	0x99, 0xc2, 0xa6, 0xe0, 0x02, 0x4b, 0x0f, 0x42, 0xa6, 0xe5, 0x9d, 0x25, 0xd5, 0x6e, 0xb2, 0x9e,
	0x5e, 0x5f, 0xe0, 0x4f, 0x58, 0x2b, 0xb5, 0x20, 0x3d, 0xf4, 0xbd, 0x9a, 0x00, 0x9d, 0xf3, 0x76,
	0xe7, 0x1e, 0x1d, 0x67, 0x95, 0xb5, 0x92, 0x83, 0xa3, 0x03, 0xe9, 0x01, 0xb7, 0x12, 0x56, 0xda,
	0x9d, 0xa8, 0x09, 0xf0, 0x88, 0x2d, 0xd1, 0x97, 0xb1, 0xd1, 0x6d, 0x4a, 0xaa, 0xfa, 0xe4, 0xdf,
	0x60, 0xab, 0x69, 0x61, 0x2d, 0xe6, 0xe4, 0x3c, 0xde, 0xda, 0x22, 0xed, 0xaf, 0x84, 0xc5, 0x1e,
	0xae, 0xf1, 0xe7, 0x6c, 0xed, 0xad, 0xca, 0x73, 0x82, 0x74, 0x5e, 0x4e, 0xa6, 0xd1, 0x9d, 0xff,
	0x8e, 0xbb, 0x8a, 0xa6, 0x27, 0x95, 0x25, 0xdf, 0x62, 0x5c, 0x83, 0x9f, 0x19, 0xfb, 0xb6, 0x3f,
	0x98, 0x7b, 0x70, 0x7d, 0x07, 0xda, 0x47, 0x4b, 0xe8, 0x9f, 0xb4, 0xc3, 0x4e, 0x07, 0x37, 0x7a,
	0xa0, 0x3d, 0xdf, 0x64, 0x6d, 0x0d, 0xef, 0x7c, 0xdf, 0x14, 0x7e, 0x60, 0x0a, 0x9d, 0x61, 0x99,
	0x2d, 0x93, 0xed, 0x1a, 0xae, 0x7f, 0x1c, 0x96, 0xbb, 0x19, 0x7f, 0xc2, 0x1e, 0x90, 0xe5, 0xd4,
	0x9a, 0x14, 0x9c, 0x83, 0xac, 0x6f, 0xcb, 0x1a, 0x8d, 0x9a, 0x64, 0x7f, 0x1f, 0x77, 0x3f, 0xa9,
	0x36, 0xab, 0xfa, 0xfd, 0x0e, 0xbb, 0x6f, 0x0a, 0xef, 0xbc, 0xd4, 0x99, 0xd2, 0xa3, 0xca, 0xc5,
	0x45, 0x2d, 0xf2, 0xb9, 0x57, 0xdb, 0x0b, 0x1e, 0x8e, 0x7f, 0xc8, 0x58, 0x68, 0x48, 0x4c, 0x66,
	0x95, 0x7a, 0xec, 0x2e, 0x1d, 0xbc, 0xc5, 0x9a, 0xbd, 0x72, 0xa7, 0x7b, 0x90, 0x34, 0x83, 0x51,
	0x37, 0xe3, 0x31, 0x5b, 0x2c, 0xb9, 0x5c, 0x13, 0x8d, 0xcd, 0xb5, 0x9d, 0x28, 0xdc, 0x6d, 0xad,
	0x4e, 0x62, 0xe2, 0x35, 0x29, 0xcd, 0xf8, 0x03, 0x76, 0x07, 0xff, 0x53, 0xb8, 0x68, 0x9d, 0xc8,
	0x0f, 0x5f, 0x78, 0x37, 0x85, 0x03, 0xdb, 0xd7, 0xc6, 0xab, 0xa1, 0x82, 0x2c, 0x6a, 0x8b, 0xc6,
	0xe6, 0x72, 0xb2, 0x82, 0x8b, 0xc7, 0x61, 0x0d, 0x0b, 0x02, 0x65, 0xeb, 0x22, 0x14, 0xc4, 0xdd,
	0xff, 0x51, 0x10, 0xa5, 0x1d, 0x5e, 0xcd, 0xc6, 0x73, 0xb6, 0x58, 0x5e, 0x6d, 0x93, 0x2d, 0x9e,
	0x1e, 0xf7, 0x0e, 0x4f, 0xda, 0x5f, 0xe2, 0x2d, 0xb6, 0x94, 0x9c, 0x1e, 0x1f, 0x77, 0x8f, 0x5f,
	0xb6, 0x1b, 0x7c, 0x8d, 0xb1, 0x93, 0xc3, 0xe4, 0x75, 0xf7, 0x78, 0xef, 0xe4, 0xf0, 0xa0, 0xbd,
	0x80, 0x76, 0x87, 0x49, 0xf2, 0x71, 0xd2, 0xbe, 0xb5, 0xf1, 0xab, 0x75, 0xb6, 0x46, 0x9a, 0x50,
	0x68, 0x0d, 0xd4, 0x4f, 0x7c, 0xc0, 0x96, 0xa7, 0x56, 0x19, 0xab, 0xfc, 0x9c, 0xaa, 0x7e, 0x6d,
	0xe7, 0x61, 0x38, 0xf4, 0x4b, 0x6b, 0x5f, 0x83, 0x73, 0x72, 0x04, 0xf1, 0x27, 0xc1, 0xa2, 0xf3,
	0x2d, 0xca, 0xee, 0x7d, 0x2e, 0x50, 0x96, 0x2a, 0x3f, 0x51, 0x38, 0xd4, 0x22, 0x63, 0x85, 0xaf,
	0xf4, 0x20, 0x8e, 0x1a, 0xc9, 0x65, 0x5c, 0xee, 0xd8, 0x1a, 0x11, 0x31, 0xef, 0x7b, 0xd3, 0x47,
	0x0a, 0xa8, 0x75, 0x96, 0x3b, 0xaf, 0x29, 0xda, 0x4b, 0xbe, 0xdd, 0x1b, 0x9b, 0x22, 0xcf, 0x84,
	0x14, 0x25, 0x5f, 0x69, 0xa9, 0x18, 0x03, 0xd4, 0x53, 0xed, 0x51, 0x4f, 0xb0, 0x85, 0x95, 0x56,
	0x5e, 0x61, 0xe5, 0xc7, 0x1b, 0xf7, 0x89, 0xc3, 0xb9, 0x90, 0x5e, 0xec, 0x9b, 0xc9, 0x34, 0x07,
	0xb4, 0x4f, 0x56, 0x4a, 0x90, 0x13, 0x73, 0xea, 0xc0, 0x72, 0xcd, 0x56, 0x1c, 0x68, 0xac, 0xad,
	0x69, 0xae, 0xc0, 0x51, 0xbf, 0x2d, 0x77, 0x7e, 0x4c, 0x90, 0x87, 0x7c, 0x37, 0x40, 0xa2, 0x89,
	0x08, 0x26, 0x02, 0xdb, 0xbd, 0x42, 0x9b, 0x4a, 0x6c, 0xa2, 0x52, 0xdc, 0x8c, 0xc5, 0xc4, 0xe2,
	0x68, 0x61, 0x63, 0xa5, 0x87, 0xf6, 0x49, 0x69, 0x9f, 0xb4, 0xd0, 0x3b, 0x7c, 0xf0, 0xb3, 0xba,
	0xbe, 0x52, 0x2b, 0x76, 0xbe, 0x47, 0x60, 0xbb, 0x75, 0x3d, 0x7f, 0xff, 0xa6, 0x9e, 0x57, 0x02,
	0x6a, 0xa6, 0x60, 0xa5, 0x27, 0x1d, 0x8b, 0xa3, 0x85, 0x9a, 0x34, 0x77, 0xd9, 0xe2, 0x79, 0x01,
	0x05, 0x50, 0xe3, 0x36, 0x3b, 0xbb, 0x14, 0xf3, 0xdb, 0xec, 0x4e, 0x72, 0x70, 0x84, 0x01, 0xbf,
	0x8e, 0x01, 0xc9, 0x00, 0x33, 0x2f, 0x1c, 0x84, 0x8b, 0x80, 0x70, 0x0f, 0x0b, 0x3b, 0x8d, 0xa3,
	0xa4, 0x8c, 0xc0, 0xdf, 0xb0, 0x65, 0xb8, 0x08, 0x19, 0x2e, 0x51, 0xb4, 0xa7, 0x14, 0xed, 0x43,
	0xbe, 0xb5, 0x27, 0x72, 0x33, 0x1a, 0x29, 0x3d, 0x12, 0x64, 0x81, 0xb9, 0x61, 0x1c, 0xe5, 0x5c,
	0x81, 0x8b, 0xc3, 0xc2, 0x92, 0xa0, 0xe7, 0x66, 0xe4, 0x30, 0xbd, 0x25, 0xb2, 0xea, 0x66, 0xfc,
	0xe7, 0xac, 0x99, 0x4e, 0x8b, 0x7e, 0xae, 0x26, 0x2a, 0xb4, 0x6f, 0x67, 0x8f, 0x62, 0x7e, 0xc4,
	0x9f, 0xec, 0x09, 0x5a, 0xbe, 0xa1, 0xcc, 0xe9, 0xb4, 0x10, 0x0e, 0x52, 0xa3, 0x33, 0x57, 0x16,
	0xce, 0x60, 0x7e, 0xad, 0x6e, 0x9e, 0xfd, 0xee, 0x59, 0xb2, 0x9c, 0x4e, 0x8b, 0x57, 0xe8, 0xcb,
	0x15, 0xbb, 0x77, 0x5d, 0x83, 0x4a, 0xa4, 0x55, 0x42, 0x0a, 0xfc, 0xf2, 0xed, 0x1b, 0x48, 0xde,
	0x78, 0x99, 0x0b, 0x6f, 0xe5, 0x70, 0xa8, 0xd2, 0xcf, 0x05, 0x49, 0xee, 0xd6, 0xf5, 0xab, 0x84,
	0xfa, 0x29, 0x6b, 0xd2, 0xcb, 0xae, 0xe5, 0x04, 0x48, 0x55, 0x9a, 0x9d, 0x17, 0x04, 0xf0, 0x5d,
	0xbe, 0x8b, 0x24, 0xe3, 0x7a, 0xf5, 0xaa, 0xa7, 0xb9, 0x74, 0x4e, 0x28, 0x2c, 0xbd, 0x09, 0x68,
	0x8f, 0x14, 0x55, 0x94, 0xe3, 0x35, 0xd8, 0xa2, 0xbc, 0x44, 0xfc, 0x3e, 0x96, 0x13, 0xe0, 0xbf,
	0x60, 0xeb, 0x03, 0xe9, 0xa0, 0x5f, 0x93, 0xa3, 0x15, 0x42, 0xe8, 0x11, 0xc2, 0xeb, 0xcb, 0xeb,
	0xdc, 0xbb, 0x31, 0x45, 0xd4, 0x2f, 0x13, 0xc3, 0x6a, 0xb0, 0xb1, 0xe8, 0x0e, 0xb1, 0x1e, 0x85,
	0x9b, 0x42, 0x4a, 0x4a, 0x22, 0x66, 0x20, 0x26, 0xf2, 0x2d, 0x08, 0xa3, 0x01, 0x71, 0x57, 0x11,
	0xab, 0x77, 0x29, 0x6a, 0xbf, 0x69, 0x30, 0xe6, 0x70, 0x1c, 0x28, 0x75, 0x66, 0x9d, 0xb8, 0xfb,
	0x8c, 0x80, 0xb3, 0x6b, 0x3a, 0xc3, 0x7b, 0x07, 0x86, 0x22, 0x07, 0x65, 0xae, 0x95, 0x67, 0xa1,
	0xbd, 0xca, 0xcb, 0x6f, 0xb4, 0x8c, 0xc5, 0x66, 0x77, 0x52, 0x36, 0xcd, 0x65, 0x76, 0xca, 0x61,
	0x82, 0x42, 0xba, 0xb9, 0x4e, 0xad, 0xd1, 0xa6, 0x70, 0xf9, 0x3c, 0x7e, 0x8c, 0x64, 0x37, 0x09,
	0x9d, 0x9e, 0xb3, 0x09, 0xbb, 0x87, 0x35, 0xd4, 0x0f, 0xaf, 0x30, 0x72, 0x51, 0x58, 0x4d, 0xda,
	0x77, 0x49, 0xf7, 0x25, 0x19, 0x1f, 0x20, 0x19, 0x68, 0x2e, 0xae, 0xcc, 0x91, 0xde, 0xdc, 0x8c,
	0xf0, 0xcf, 0x8d, 0x42, 0x4f, 0xee, 0xa2, 0xe9, 0xfe, 0xa5, 0xe5, 0xa9, 0xd5, 0xfc, 0x8f, 0x0d,
	0xf6, 0x70, 0x66, 0x95, 0x87, 0x3e, 0x4d, 0x1b, 0x13, 0xc8, 0x14, 0x3e, 0xc0, 0x61, 0x1a, 0x88,
	0x38, 0x69, 0x82, 0x23, 0xd8, 0x09, 0x57, 0xdd, 0xa1, 0xf0, 0xb6, 0x80, 0x2d, 0x21, 0xf3, 0x5c,
	0xa4, 0x63, 0x95, 0x57, 0x13, 0x56, 0x69, 0x2e, 0x2c, 0xa4, 0xa0, 0x2e, 0x90, 0x6f, 0xe5, 0xc7,
	0x24, 0x1d, 0xa8, 0x1c, 0x73, 0x31, 0x53, 0x79, 0x8e, 0x6a, 0x85, 0x48, 0x1e, 0x74, 0x25, 0x21,
	0xe8, 0xfb, 0x08, 0xe7, 0xa2, 0xa1, 0x2c, 0x72, 0x5f, 0x3b, 0x03, 0x72, 0x12, 0x51, 0x5a, 0xdd,
	0x5a, 0x56, 0x49, 0x89, 0xc2, 0xff, 0xd1, 0x60, 0x6d, 0x7c, 0xdd, 0x94, 0x85, 0xfe, 0x50, 0x3a,
	0x3f, 0x35, 0x79, 0x1e, 0xdd, 0xa3, 0x4c, 0xff, 0xd2, 0xa0, 0x54, 0xff, 0xdc, 0xe0, 0x7f, 0x68,
	0xd0, 0xec, 0x75, 0x21, 0xf3, 0x02, 0x90, 0xf9, 0xa9, 0xc4, 0xb7, 0xb2, 0x42, 0x0e, 0xad, 0x96,
	0x15, 0x16, 0x2b, 0x73, 0x5f, 0xe6, 0x79, 0xa9, 0x40, 0x5b, 0x34, 0x17, 0x0d, 0xe6, 0x97, 0x39,
	0x51, 0xe6, 0xa9, 0x44, 0xd9, 0xa8, 0xf9, 0x79, 0x23, 0x00, 0x13, 0x13, 0x15, 0xbc, 0x90, 0x43,
	0x0f, 0x36, 0x54, 0x45, 0x55, 0xec, 0x93, 0xf0, 0x38, 0x08, 0x94, 0x5b, 0x27, 0x1c, 0x09, 0xaa,
	0x7e, 0xe4, 0xc5, 0xc4, 0x64, 0x28, 0xce, 0x54, 0x2c, 0x0e, 0x3c, 0x76, 0x47, 0x1c, 0x35, 0x7e,
	0xd4, 0x48, 0xd6, 0xc3, 0xb1, 0x8e, 0x42, 0x58, 0xfe, 0xdb, 0x06, 0x5b, 0x35, 0x56, 0x8d, 0x94,
	0x96, 0x79, 0x1f, 0xe9, 0x8a, 0x1e, 0xd0, 0x4c, 0x75, 0xbf, 0xf6, 0xee, 0x5e, 0x8e, 0xde, 0x9d,
	0x4f, 0xe9, 0xf0, 0x67, 0x3c, 0xc1, 0x7b, 0xaa, 0x4f, 0x9e, 0x52, 0xa4, 0x66, 0x3a, 0xc7, 0xde,
	0x94, 0xda, 0x90, 0x4e, 0xe1, 0xce, 0x16, 0xb6, 0x85, 0xf3, 0xc6, 0x82, 0x90, 0x57, 0x43, 0x73,
	0x45, 0x51, 0x05, 0x2b, 0xc6, 0x60, 0xa9, 0x69, 0x56, 0xaa, 0x15, 0x04, 0xe5, 0x9f, 0xb2, 0xdb,
	0xd2, 0x8e, 0x5c, 0xf4, 0xde, 0xb5, 0x69, 0xf4, 0xe6, 0x50, 0xdd, 0xd9, 0xa6, 0x94, 0x1e, 0xf3,
	0x47, 0x27, 0x34, 0x63, 0xd2, 0x62, 0x2d, 0xb7, 0x99, 0x74, 0x82, 0x6a, 0x3f, 0xd4, 0x4c, 0x9c,
	0x50, 0xd4, 0x8d, 0x9f, 0xb1, 0x2f, 0x9f, 0xd5, 0x7e, 0x7e, 0x60, 0xc4, 0xf2, 0x4d, 0xe7, 0xec,
	0xb6, 0x9f, 0x4f, 0xab, 0xf9, 0x93, 0xfe, 0xcf, 0x63, 0xb6, 0x34, 0x95, 0xf3, 0xdc, 0xc8, 0x2c,
	0x4c, 0x9c, 0xf7, 0xe3, 0xf2, 0xb7, 0x5a, 0x5c, 0xfd, 0x56, 0x8b, 0xf7, 0xf4, 0x3c, 0xa9, 0x8c,
	0x36, 0x0a, 0xd6, 0xbe, 0x39, 0xb1, 0x73, 0xc1, 0x5a, 0xb9, 0x1a, 0x8d, 0xfd, 0x0c, 0xf0, 0x5f,
	0x0a, 0xbf, 0x9c, 0xd4, 0x97, 0xf8, 0x07, 0x6c, 0x29, 0x4c, 0xd2, 0xd1, 0x82, 0xb8, 0xb5, 0xd9,
	0xda, 0xb9, 0x7b, 0x35, 0x81, 0x87, 0xd3, 0x26, 0x95, 0xc5, 0x73, 0xfe, 0xcf, 0x5f, 0x8b, 0x35,
	0xb6, 0x52, 0x3f, 0xc3, 0xe0, 0x0e, 0x99, 0xef, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x06, 0x7f,
	0xa2, 0x67, 0x5d, 0x0e, 0x00, 0x00,
}
