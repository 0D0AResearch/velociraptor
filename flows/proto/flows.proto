// Copyright 2011 Google Inc. All Rights Reserved

// These are the messages used in GRR encrypted communication protocol.
syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";
import "www.velocidex.com/golang/velociraptor/crypto/proto/jobs.proto";

package proto;

message FlowReference {
   string flow_id = 1 [(sem_type) = {
      description: "The session id of the referenced flow."
    }];
   string client_id = 2 [(sem_type) = {
      type: "ClientURN",
      description: "The client id the referenced flow ran on."
    }];
}

// The flow context.
// Next field: 17
message FlowContext {
   string backtrace = 1;
   ClientResources client_resources = 2;
   uint64 create_time = 3 [(sem_type) = {
      type: "RDFDatetime",
    }];
   string creator = 4;
   string current_state = 5;
   uint64 kill_timestamp = 6 [(sem_type) = {
      type: "RDFDatetime",
    }];
   uint64 network_bytes_sent = 7;
   uint64 next_outbound_id = 8;
   uint64 next_processed_request = 9;
    //  repeated OutputPluginState output_plugins_states = 10;
   uint64 outstanding_requests = 11;
  // DEPRECATED
  //  uint64 remaining_cpu_quota = 12;
   string session_id = 13 [(sem_type) = {
      type: "SessionID"
    }];

  enum State {
    RUNNING = 0;
    TERMINATED = 1;
    ERROR = 3;   // Flows which raise are marked as having an error.

    // A well known flow will not queue any messages and always
    // forward messages to the worker:
    WELL_KNOWN = 2;
  };

   State state = 14;
   string status = 15;
   bool user_notified = 16;
}

// Next field: 23
message FlowRunnerArgs {
   GrrMessage.Priority priority = 1 [(sem_type) = {
      description: "The priority used for this flow.",
      label: ADVANCED
    }];

   bool notify_to_user = 2 [(sem_type) = {
      description: "Should a notification be sent to the initiator.",
      friendly_name: "Notify at Completion",
    }];

   bool send_replies = 3 [(sem_type) = {
      description: "Should send replies back to the parent flow or not.",
      friendly_name: "Send Replies",
      label: HIDDEN,
    }];

  // DEPRECATED
  //  string notification_event = 4;

  // DEPRECATED
  //  string notification_urn = 14;

   string client_id = 5 [(sem_type) = {
      type: "ClientURN",
      description: "The client id this flow operates on.",
      label: HIDDEN,
    }];

   string queue = 6 [(sem_type) = {
      type: "RDFURN",
      description: "The queue to use for the flow.",
      label: HIDDEN,
      default_string:"F",
    }];

   string event_id = 7 [(sem_type) = {
      description: "A logging event id for issuing further logs."
      label: HIDDEN,
    }];

   uint64 cpu_limit = 9 [(sem_type) = {
      description: "A limit on the client cpu seconds used by this flow.",
      label: ADVANCED,
      default_int: 7200,
    }];

   uint64 network_bytes_limit = 13 [(sem_type) = {
      description: "A limit on the total traffic used by this flow.",
      label: ADVANCED,
    }];

    /*
   RequestState request_state = 10 [(sem_type) = {
      description: "The request state of the parent flow.",
      label: HIDDEN,
    }];
    */
   string flow_name = 11 [(sem_type) = {
      description: "The name of the class implementing the flow to run.",
      label: HIDDEN,
    }];

   string base_session_id = 12 [(sem_type) = {
      type: "RDFURN",
      description: "The session id for the flow runner. "
      "If not specified we make one.",
      label: HIDDEN,
    }];

   uint64 start_time = 15 [(sem_type) = {
      type: "RDFDatetime",
      description: "Do not process this flow until this time. "
      "(Implies the flow is run asyncronously.).",
      label: ADVANCED
    }];

  // DEPRECATED, output is now fixed.
  // string output = 16 [(sem_type) = {
  //    description: "If set, a relative URN to the client's namespace where "
  //    "a collection will be created, and the result will be written to.",
  //    label: ADVANCED
  //  }, default="analysis/{p}/{u}-{t}"];

   string logs_collection_urn = 17 [(sem_type) = {
      type: "RDFURN",
      description: "The logs collection to log to for the flow.",
      label: HIDDEN,
    }];

   bool write_intermediate_results = 18 [(sem_type) = {
      description: "If true, all child flow results received with sendreply"
                   " will be written to the flow's default collection.",
      label: ADVANCED
    }];

   bool require_fastpoll = 19 [(sem_type) = {
      description: "This value is passed to the client during CallClient, and "
                   "by default will cause the client to enter fastpoll after"
                   "processing the message. Users shouldn't modify this "
                   "setting.",
      label: ADVANCED,
      default_bool: true,
    }];

    /*
  repeated OutputPluginDescriptor output_plugins = 21 [(sem_type) = {
      description: "Output plugins used for this flow. These plugins will be "
                   "applied to flow results as soon as the flow is completed."
      friendly_name: "Output Plugins",
      label: HIDDEN,
    }];
    */

   FlowReference original_flow = 22 [(sem_type) = {
      description: "If this flow is a copy of another flow, we store "
      "a reference to the original here.",
      label: HIDDEN
    }];
}
