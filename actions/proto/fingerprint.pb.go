// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fingerprint.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The fingerprinting methods the fingerprinter can be asked to perform.
// If none is given, all are applied.
type FingerprintTuple_Type int32

const (
	FingerprintTuple_FPT_GENERIC FingerprintTuple_Type = 0
	FingerprintTuple_FPT_PE_COFF FingerprintTuple_Type = 1
)

var FingerprintTuple_Type_name = map[int32]string{
	0: "FPT_GENERIC",
	1: "FPT_PE_COFF",
}
var FingerprintTuple_Type_value = map[string]int32{
	"FPT_GENERIC": 0,
	"FPT_PE_COFF": 1,
}

func (x FingerprintTuple_Type) Enum() *FingerprintTuple_Type {
	p := new(FingerprintTuple_Type)
	*p = x
	return p
}
func (x FingerprintTuple_Type) String() string {
	return proto1.EnumName(FingerprintTuple_Type_name, int32(x))
}
func (x *FingerprintTuple_Type) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(FingerprintTuple_Type_value, data, "FingerprintTuple_Type")
	if err != nil {
		return err
	}
	*x = FingerprintTuple_Type(value)
	return nil
}
func (FingerprintTuple_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

// The hash functions that a fingerprinting method may employ.
// If none is given, all applicable ones are used.
type FingerprintTuple_HashType int32

const (
	FingerprintTuple_MD5    FingerprintTuple_HashType = 0
	FingerprintTuple_SHA1   FingerprintTuple_HashType = 1
	FingerprintTuple_SHA256 FingerprintTuple_HashType = 2
)

var FingerprintTuple_HashType_name = map[int32]string{
	0: "MD5",
	1: "SHA1",
	2: "SHA256",
}
var FingerprintTuple_HashType_value = map[string]int32{
	"MD5":    0,
	"SHA1":   1,
	"SHA256": 2,
}

func (x FingerprintTuple_HashType) Enum() *FingerprintTuple_HashType {
	p := new(FingerprintTuple_HashType)
	*p = x
	return p
}
func (x FingerprintTuple_HashType) String() string {
	return proto1.EnumName(FingerprintTuple_HashType_name, int32(x))
}
func (x *FingerprintTuple_HashType) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(FingerprintTuple_HashType_value, data, "FingerprintTuple_HashType")
	if err != nil {
		return err
	}
	*x = FingerprintTuple_HashType(value)
	return nil
}
func (FingerprintTuple_HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 1} }

type Hash struct {
	Sha256           []byte                    `protobuf:"bytes,1,opt,name=sha256" json:"sha256,omitempty"`
	Sha1             []byte                    `protobuf:"bytes,2,opt,name=sha1" json:"sha1,omitempty"`
	Md5              []byte                    `protobuf:"bytes,3,opt,name=md5" json:"md5,omitempty"`
	PecoffSha1       []byte                    `protobuf:"bytes,4,opt,name=pecoff_sha1,json=pecoffSha1" json:"pecoff_sha1,omitempty"`
	PecoffMd5        []byte                    `protobuf:"bytes,5,opt,name=pecoff_md5,json=pecoffMd5" json:"pecoff_md5,omitempty"`
	PecoffSha256     []byte                    `protobuf:"bytes,7,opt,name=pecoff_sha256,json=pecoffSha256" json:"pecoff_sha256,omitempty"`
	SignedData       []*AuthenticodeSignedData `protobuf:"bytes,6,rep,name=signed_data,json=signedData" json:"signed_data,omitempty"`
	NumBytes         *uint64                   `protobuf:"varint,8,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto1.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Hash) GetSha256() []byte {
	if m != nil {
		return m.Sha256
	}
	return nil
}

func (m *Hash) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

func (m *Hash) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

func (m *Hash) GetPecoffSha1() []byte {
	if m != nil {
		return m.PecoffSha1
	}
	return nil
}

func (m *Hash) GetPecoffMd5() []byte {
	if m != nil {
		return m.PecoffMd5
	}
	return nil
}

func (m *Hash) GetPecoffSha256() []byte {
	if m != nil {
		return m.PecoffSha256
	}
	return nil
}

func (m *Hash) GetSignedData() []*AuthenticodeSignedData {
	if m != nil {
		return m.SignedData
	}
	return nil
}

func (m *Hash) GetNumBytes() uint64 {
	if m != nil && m.NumBytes != nil {
		return *m.NumBytes
	}
	return 0
}

type AuthenticodeSignedData struct {
	Revision         *uint64 `protobuf:"varint,1,opt,name=revision" json:"revision,omitempty"`
	CertType         *uint64 `protobuf:"varint,2,opt,name=cert_type,json=certType" json:"cert_type,omitempty"`
	Certificate      []byte  `protobuf:"bytes,3,opt,name=certificate" json:"certificate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthenticodeSignedData) Reset()                    { *m = AuthenticodeSignedData{} }
func (m *AuthenticodeSignedData) String() string            { return proto1.CompactTextString(m) }
func (*AuthenticodeSignedData) ProtoMessage()               {}
func (*AuthenticodeSignedData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *AuthenticodeSignedData) GetRevision() uint64 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return 0
}

func (m *AuthenticodeSignedData) GetCertType() uint64 {
	if m != nil && m.CertType != nil {
		return *m.CertType
	}
	return 0
}

func (m *AuthenticodeSignedData) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type FingerprintTuple struct {
	FpType           *FingerprintTuple_Type      `protobuf:"varint,1,opt,name=fp_type,json=fpType,enum=proto.FingerprintTuple_Type" json:"fp_type,omitempty"`
	Hashers          []FingerprintTuple_HashType `protobuf:"varint,2,rep,name=hashers,enum=proto.FingerprintTuple_HashType" json:"hashers,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *FingerprintTuple) Reset()                    { *m = FingerprintTuple{} }
func (m *FingerprintTuple) String() string            { return proto1.CompactTextString(m) }
func (*FingerprintTuple) ProtoMessage()               {}
func (*FingerprintTuple) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *FingerprintTuple) GetFpType() FingerprintTuple_Type {
	if m != nil && m.FpType != nil {
		return *m.FpType
	}
	return FingerprintTuple_FPT_GENERIC
}

func (m *FingerprintTuple) GetHashers() []FingerprintTuple_HashType {
	if m != nil {
		return m.Hashers
	}
	return nil
}

// Request fingerprints for a file.
type FingerprintRequest struct {
	Pathspec         *PathSpec           `protobuf:"bytes,1,opt,name=pathspec" json:"pathspec,omitempty"`
	Tuples           []*FingerprintTuple `protobuf:"bytes,2,rep,name=tuples" json:"tuples,omitempty"`
	MaxFilesize      *uint64             `protobuf:"varint,3,opt,name=max_filesize,json=maxFilesize,def=10737418240" json:"max_filesize,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FingerprintRequest) Reset()                    { *m = FingerprintRequest{} }
func (m *FingerprintRequest) String() string            { return proto1.CompactTextString(m) }
func (*FingerprintRequest) ProtoMessage()               {}
func (*FingerprintRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

const Default_FingerprintRequest_MaxFilesize uint64 = 10737418240

func (m *FingerprintRequest) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *FingerprintRequest) GetTuples() []*FingerprintTuple {
	if m != nil {
		return m.Tuples
	}
	return nil
}

func (m *FingerprintRequest) GetMaxFilesize() uint64 {
	if m != nil && m.MaxFilesize != nil {
		return *m.MaxFilesize
	}
	return Default_FingerprintRequest_MaxFilesize
}

// Response data for file hashes and signature blobs.
type FingerprintResponse struct {
	MatchingTypes    []FingerprintTuple_Type `protobuf:"varint,1,rep,name=matching_types,json=matchingTypes,enum=proto.FingerprintTuple_Type" json:"matching_types,omitempty"`
	Pathspec         *PathSpec               `protobuf:"bytes,3,opt,name=pathspec" json:"pathspec,omitempty"`
	Hash             *Hash                   `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	BytesRead        *uint64                 `protobuf:"varint,5,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *FingerprintResponse) Reset()                    { *m = FingerprintResponse{} }
func (m *FingerprintResponse) String() string            { return proto1.CompactTextString(m) }
func (*FingerprintResponse) ProtoMessage()               {}
func (*FingerprintResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *FingerprintResponse) GetMatchingTypes() []FingerprintTuple_Type {
	if m != nil {
		return m.MatchingTypes
	}
	return nil
}

func (m *FingerprintResponse) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *FingerprintResponse) GetHash() *Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *FingerprintResponse) GetBytesRead() uint64 {
	if m != nil && m.BytesRead != nil {
		return *m.BytesRead
	}
	return 0
}

type BufferReference struct {
	Offset           *uint64   `protobuf:"varint,1,opt,name=offset,def=0" json:"offset,omitempty"`
	Length           *uint64   `protobuf:"varint,2,opt,name=length,def=0" json:"length,omitempty"`
	Callback         *string   `protobuf:"bytes,3,opt,name=callback" json:"callback,omitempty"`
	Data             []byte    `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Pathspec         *PathSpec `protobuf:"bytes,6,opt,name=pathspec" json:"pathspec,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *BufferReference) Reset()                    { *m = BufferReference{} }
func (m *BufferReference) String() string            { return proto1.CompactTextString(m) }
func (*BufferReference) ProtoMessage()               {}
func (*BufferReference) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

const Default_BufferReference_Offset uint64 = 0
const Default_BufferReference_Length uint64 = 0

func (m *BufferReference) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return Default_BufferReference_Offset
}

func (m *BufferReference) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return Default_BufferReference_Length
}

func (m *BufferReference) GetCallback() string {
	if m != nil && m.Callback != nil {
		return *m.Callback
	}
	return ""
}

func (m *BufferReference) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BufferReference) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func init() {
	proto1.RegisterType((*Hash)(nil), "proto.Hash")
	proto1.RegisterType((*AuthenticodeSignedData)(nil), "proto.AuthenticodeSignedData")
	proto1.RegisterType((*FingerprintTuple)(nil), "proto.FingerprintTuple")
	proto1.RegisterType((*FingerprintRequest)(nil), "proto.FingerprintRequest")
	proto1.RegisterType((*FingerprintResponse)(nil), "proto.FingerprintResponse")
	proto1.RegisterType((*BufferReference)(nil), "proto.BufferReference")
	proto1.RegisterEnum("proto.FingerprintTuple_Type", FingerprintTuple_Type_name, FingerprintTuple_Type_value)
	proto1.RegisterEnum("proto.FingerprintTuple_HashType", FingerprintTuple_HashType_name, FingerprintTuple_HashType_value)
}

func init() { proto1.RegisterFile("fingerprint.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x72, 0x1b, 0x45,
	0x10, 0xce, 0x5a, 0x1b, 0x59, 0xee, 0xf5, 0x8f, 0x18, 0xaa, 0x88, 0x30, 0xa4, 0x32, 0x88, 0x0a,
	0xa5, 0x54, 0x60, 0x65, 0x8b, 0x28, 0xa1, 0x4c, 0x85, 0x8a, 0x65, 0x5b, 0x38, 0x45, 0x39, 0x31,
	0x63, 0x5f, 0x38, 0xa9, 0xc6, 0xbb, 0xbd, 0xda, 0x29, 0xb4, 0x3f, 0xec, 0xcc, 0xfa, 0x87, 0x33,
	0x8f, 0xc2, 0xa3, 0x70, 0xe5, 0x05, 0x38, 0xc2, 0x9d, 0x27, 0xe0, 0x40, 0x4d, 0xaf, 0xac, 0x48,
	0xc1, 0x21, 0x39, 0xed, 0x4e, 0x4f, 0xf7, 0xf7, 0xf5, 0xd7, 0x3f, 0x03, 0xef, 0x45, 0x2a, 0x1d,
	0x63, 0x91, 0x17, 0x2a, 0x35, 0x7e, 0x5e, 0x64, 0x26, 0x63, 0xb7, 0xe9, 0xb3, 0xb9, 0x26, 0x03,
	0xa3, 0xb2, 0x54, 0x57, 0xd6, 0xcd, 0x9d, 0x8b, 0x8b, 0x0b, 0xff, 0x1c, 0x27, 0x59, 0xa0, 0x42,
	0xbc, 0xf4, 0x83, 0x2c, 0xe9, 0x8e, 0xb3, 0x89, 0x4c, 0xc7, 0xdd, 0xca, 0x58, 0xc8, 0xdc, 0x64,
	0x45, 0x97, 0x9c, 0xbb, 0x1a, 0x13, 0x99, 0x1a, 0x15, 0x54, 0xb1, 0xed, 0x5f, 0xea, 0xe0, 0x1e,
	0x4a, 0x1d, 0xb3, 0x21, 0xd4, 0x75, 0x2c, 0x7b, 0xfd, 0xc7, 0x2d, 0x87, 0x3b, 0x9d, 0xd5, 0x81,
	0xff, 0xe7, 0x3f, 0x7f, 0xfd, 0xe6, 0x74, 0x00, 0xec, 0xed, 0xbe, 0x1a, 0xa3, 0x36, 0x6c, 0xf3,
	0xe4, 0x70, 0xb7, 0xd7, 0x7f, 0xcc, 0xcf, 0x54, 0x2a, 0x8b, 0x2b, 0x1e, 0x4b, 0x1d, 0xf3, 0x90,
	0xae, 0x7c, 0x31, 0x8d, 0x66, 0xcf, 0xc0, 0xd5, 0xb1, 0xdc, 0x6e, 0x2d, 0x11, 0xca, 0xe7, 0x84,
	0xf2, 0xd9, 0x02, 0x4a, 0xeb, 0xe4, 0x70, 0x77, 0xfb, 0x46, 0x0c, 0x8a, 0x64, 0x4f, 0xa1, 0x96,
	0x84, 0xfd, 0x56, 0x8d, 0x00, 0x1e, 0x12, 0xc0, 0xfd, 0x05, 0x80, 0x3b, 0x47, 0xfb, 0xfd, 0x1b,
	0xe3, 0x6d, 0x1c, 0xcb, 0xc1, 0xcb, 0x31, 0xc8, 0xa2, 0x68, 0x44, 0x79, 0xb8, 0x04, 0xf3, 0x92,
	0x60, 0x9e, 0x2f, 0xc0, 0x7c, 0xbd, 0x5b, 0x9a, 0x18, 0x6d, 0x2d, 0xb2, 0x10, 0x39, 0x25, 0x35,
	0x87, 0xc6, 0xa3, 0xac, 0xe0, 0x5a, 0x8d, 0x53, 0x0c, 0x79, 0x81, 0x63, 0x95, 0xa5, 0x3c, 0x8b,
	0xf8, 0xf1, 0x01, 0x8f, 0xd4, 0x04, 0x7d, 0x01, 0x15, 0xc7, 0x89, 0x4d, 0x38, 0x81, 0xe9, 0x69,
	0x64, 0xf3, 0xbe, 0x4d, 0x84, 0x2f, 0x88, 0xf0, 0x70, 0x81, 0x70, 0x67, 0x81, 0xd0, 0x8a, 0x78,
	0x77, 0xbe, 0x95, 0x8a, 0xe1, 0x28, 0xec, 0xb3, 0x73, 0x58, 0x7b, 0x25, 0xd0, 0x36, 0x6c, 0x99,
	0x18, 0xbf, 0x27, 0xc6, 0xef, 0x16, 0x18, 0x9f, 0xbe, 0x2e, 0xd1, 0x76, 0xef, 0xdd, 0x49, 0x57,
	0x67, 0x22, 0x6d, 0x67, 0x4b, 0xf0, 0x2a, 0xd7, 0x51, 0x28, 0x8d, 0x6c, 0xd5, 0x79, 0xad, 0xe3,
	0xf5, 0xee, 0x56, 0x73, 0xe4, 0xcf, 0x13, 0x9d, 0x90, 0xd7, 0xbe, 0x34, 0x72, 0xd0, 0xa7, 0xa4,
	0xba, 0xec, 0x8b, 0xca, 0xc6, 0x6d, 0x24, 0xbf, 0x88, 0x55, 0x10, 0xf3, 0x44, 0x5e, 0xf1, 0x33,
	0xe4, 0x79, 0x81, 0x1a, 0x53, 0xc3, 0x55, 0x7a, 0xcd, 0xab, 0x7d, 0x01, 0x7a, 0x06, 0xc1, 0x02,
	0x58, 0x49, 0xcb, 0x64, 0x74, 0x76, 0x65, 0x50, 0xb7, 0x1a, 0xdc, 0xe9, 0xb8, 0x83, 0x21, 0xa1,
	0x3e, 0x63, 0xdf, 0x9c, 0xc6, 0xc8, 0xd3, 0x32, 0x39, 0xc3, 0xc2, 0xe6, 0x4d, 0x2e, 0xbc, 0xd4,
	0x18, 0x72, 0x93, 0xf1, 0xa0, 0x40, 0x69, 0x90, 0x9b, 0x18, 0x49, 0x31, 0x6a, 0x4b, 0x61, 0x62,
	0xa5, 0x79, 0x82, 0x5a, 0xcb, 0x31, 0xfa, 0xa2, 0x91, 0x96, 0xc9, 0xc0, 0x06, 0xb5, 0x35, 0x7c,
	0x70, 0xb3, 0x02, 0xb6, 0x09, 0x8d, 0x02, 0xcf, 0x95, 0x56, 0x59, 0x4a, 0x9b, 0xe1, 0x8a, 0xd9,
	0x99, 0x7d, 0x04, 0x2b, 0x01, 0x16, 0x66, 0x64, 0xae, 0x72, 0xa4, 0x81, 0x77, 0x45, 0xc3, 0x1a,
	0x4e, 0xaf, 0x72, 0x64, 0x1c, 0x3c, 0xfb, 0xaf, 0x22, 0x15, 0x48, 0x83, 0xd5, 0x38, 0x8b, 0x79,
	0x53, 0xfb, 0x0f, 0x07, 0x9a, 0xc3, 0x57, 0x3b, 0x7e, 0x5a, 0xe6, 0x13, 0x64, 0x7d, 0x58, 0x8e,
	0xf2, 0x0a, 0xd1, 0xd2, 0xad, 0xf7, 0x3e, 0x9e, 0x56, 0xf8, 0x75, 0x4f, 0xdf, 0xb2, 0x88, 0x7a,
	0x94, 0x13, 0xdb, 0x0e, 0x2c, 0x93, 0xca, 0x42, 0xb7, 0x96, 0x78, 0xad, 0xb3, 0xde, 0xe3, 0x6f,
	0x0a, 0xb3, 0xe3, 0x41, 0xa1, 0xd7, 0x01, 0xed, 0x0e, 0xb8, 0x84, 0xb1, 0x01, 0xde, 0xf0, 0xf8,
	0x74, 0xf4, 0xed, 0xc1, 0x8b, 0x03, 0xf1, 0x7c, 0xaf, 0x79, 0xeb, 0xda, 0x70, 0x7c, 0x30, 0xda,
	0x7b, 0x39, 0x1c, 0x36, 0x9d, 0xf6, 0x03, 0x68, 0x5c, 0x87, 0xb3, 0x65, 0xa8, 0x1d, 0xed, 0xf7,
	0x9b, 0xb7, 0x58, 0x03, 0x5c, 0xbb, 0x3c, 0x4d, 0x87, 0x01, 0xd4, 0xab, 0x19, 0x6b, 0x2e, 0xb5,
	0x7f, 0x77, 0x80, 0xcd, 0x71, 0x0b, 0xfc, 0xa9, 0xb4, 0x13, 0xf9, 0x10, 0x1a, 0xb9, 0x34, 0xb1,
	0xce, 0x31, 0x20, 0x7d, 0x5e, 0x6f, 0x63, 0x9a, 0xe8, 0xb1, 0x34, 0xf1, 0x49, 0x8e, 0x81, 0x98,
	0x39, 0xb0, 0x2e, 0xd4, 0x8d, 0xcd, 0xb9, 0xd2, 0xe4, 0xf5, 0xee, 0xbc, 0x41, 0x93, 0x98, 0xba,
	0xb1, 0x1f, 0x60, 0x35, 0x91, 0x97, 0x23, 0x9a, 0x22, 0xf5, 0x73, 0x55, 0x74, 0x77, 0xc7, 0xdb,
	0xde, 0x7a, 0xf2, 0xe5, 0x93, 0x47, 0xdb, 0x5f, 0xf5, 0x1e, 0x6d, 0x0d, 0x1e, 0xd0, 0xec, 0x7c,
	0xca, 0x3e, 0x39, 0x92, 0x97, 0x2a, 0x29, 0x13, 0x1a, 0x39, 0x6e, 0xbd, 0xed, 0xd0, 0xcc, 0x3f,
	0xb9, 0xc2, 0x4b, 0xe4, 0xe5, 0x70, 0x0a, 0xd5, 0xfe, 0xdb, 0x81, 0xf7, 0x17, 0xf4, 0xe8, 0x3c,
	0x4b, 0x35, 0xb2, 0x3d, 0x58, 0x4f, 0xa4, 0x09, 0x62, 0x95, 0x8e, 0xa9, 0x6b, 0xba, 0xe5, 0x50,
	0xfd, 0xff, 0xbf, 0x6d, 0x6b, 0xd7, 0x31, 0xf6, 0xa4, 0x17, 0xaa, 0x52, 0x7b, 0x5b, 0x55, 0xee,
	0x81, 0x6b, 0x3b, 0x47, 0x2f, 0x9b, 0xd7, 0xf3, 0xa6, 0x8e, 0xb6, 0x2f, 0x82, 0x2e, 0xd8, 0x3e,
	0x00, 0xad, 0xc2, 0xa8, 0x40, 0x19, 0xd2, 0x7b, 0xe4, 0x0e, 0xee, 0x93, 0xec, 0x7b, 0xec, 0xee,
	0x69, 0x66, 0xe4, 0xe4, 0x3f, 0x4b, 0x43, 0xa3, 0x10, 0xfa, 0x62, 0x85, 0x8e, 0x02, 0x65, 0xd8,
	0xfe, 0xd5, 0x81, 0x8d, 0x41, 0x19, 0x45, 0x58, 0x08, 0x8c, 0xb0, 0xc0, 0x34, 0x40, 0xf6, 0x21,
	0xd4, 0xb3, 0x28, 0xd2, 0x68, 0xaa, 0x55, 0xd8, 0x71, 0xb6, 0xc4, 0xd4, 0x60, 0xaf, 0x26, 0x98,
	0x8e, 0x4d, 0x5c, 0x2d, 0x02, 0x5d, 0x55, 0x06, 0xbb, 0x42, 0x81, 0x9c, 0x4c, 0xce, 0x64, 0xf0,
	0x23, 0xa9, 0x5b, 0x11, 0xb3, 0x33, 0x63, 0xe0, 0xd2, 0x6b, 0x42, 0xcf, 0xb4, 0xa0, 0xff, 0x85,
	0x6a, 0xd4, 0xdf, 0x52, 0x8d, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xa1, 0x8c, 0x0e, 0x26,
	0x07, 0x00, 0x00,
}
