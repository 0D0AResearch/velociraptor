// These are the messages used in client actions.
syntax = "proto2";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";

package proto;

// A generic protobuf to deliver some data
// The data can be a single value a protobuf or a list.
// Next field: 13
message DataBlob {
  optional int64 integer = 1;
  optional bytes data = 2;
  optional string string = 3;
  optional string proto_name = 4;   // If set data contains proto
  optional string none = 5; // If set data contains None
  optional bool boolean = 6; // If set data contains a boolean value
  optional BlobArray list = 8;  // For storing lists.
  optional Dict dict = 9; // Stores a dictionary
  optional EmbeddedRDFValue rdf_value = 10 [(sem_type) = {
      description: "Store an embedded arbitrary RDFValue."
    }];
  optional float float = 11;
  optional BlobArray set = 12;  // For storing sets.

  enum CompressionType {
    UNCOMPRESSED = 0;
    // Compressed using the zlib.compress() function.
    ZCOMPRESSION = 1;
  };

  // How the message_list element is compressed
  optional CompressionType compression = 7 [ default = UNCOMPRESSED ];
};


// A generic collection of blobs
message BlobArray {
  repeated DataBlob content = 1;
};

// A Key Value pair
message KeyValue {
  optional DataBlob k = 1;
  optional DataBlob v = 2;
};

// A list of Key Value pairs
message Dict {
  repeated KeyValue dat = 1 [(sem_type) = {
      friendly_name: "Data",
      description: "An arbitrary key/value"
    }];
};

// This is a way to serialize an arbitrary RDFValue.
message EmbeddedRDFValue {
  optional uint64 embedded_age = 1 [(sem_type) = {
      type: "RDFDatetime",
      description: "The age of this RDFValue."
    }];
  optional string name = 2;  // The type name of this RDFValue - used to
                             // retrieve the class for it.
  optional bytes data = 3;   // The serialized data of the RDFValue.
}
