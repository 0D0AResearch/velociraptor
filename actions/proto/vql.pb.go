// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vql.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "www.velocidex.com/golang/velociraptor/artifacts/proto"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VQLRequest struct {
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	VQL                  string   `protobuf:"bytes,1,opt,name=VQL,proto3" json:"VQL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VQLRequest) Reset()         { *m = VQLRequest{} }
func (m *VQLRequest) String() string { return proto.CompactTextString(m) }
func (*VQLRequest) ProtoMessage()    {}
func (*VQLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{0}
}
func (m *VQLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VQLRequest.Unmarshal(m, b)
}
func (m *VQLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VQLRequest.Marshal(b, m, deterministic)
}
func (dst *VQLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VQLRequest.Merge(dst, src)
}
func (m *VQLRequest) XXX_Size() int {
	return xxx_messageInfo_VQLRequest.Size(m)
}
func (m *VQLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VQLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VQLRequest proto.InternalMessageInfo

func (m *VQLRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VQLRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VQLRequest) GetVQL() string {
	if m != nil {
		return m.VQL
	}
	return ""
}

type VQLEnv struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VQLEnv) Reset()         { *m = VQLEnv{} }
func (m *VQLEnv) String() string { return proto.CompactTextString(m) }
func (*VQLEnv) ProtoMessage()    {}
func (*VQLEnv) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{1}
}
func (m *VQLEnv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VQLEnv.Unmarshal(m, b)
}
func (m *VQLEnv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VQLEnv.Marshal(b, m, deterministic)
}
func (dst *VQLEnv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VQLEnv.Merge(dst, src)
}
func (m *VQLEnv) XXX_Size() int {
	return xxx_messageInfo_VQLEnv.Size(m)
}
func (m *VQLEnv) XXX_DiscardUnknown() {
	xxx_messageInfo_VQLEnv.DiscardUnknown(m)
}

var xxx_messageInfo_VQLEnv proto.InternalMessageInfo

func (m *VQLEnv) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *VQLEnv) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type VQLCollectorArgs struct {
	Env                  []*VQLEnv          `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	Query                []*VQLRequest      `protobuf:"bytes,2,rep,name=Query,proto3" json:"Query,omitempty"`
	MaxRow               uint64             `protobuf:"varint,4,opt,name=max_row,json=maxRow,proto3" json:"max_row,omitempty"`
	MaxWait              uint64             `protobuf:"varint,6,opt,name=max_wait,json=maxWait,proto3" json:"max_wait,omitempty"`
	OpsPerSecond         float32            `protobuf:"fixed32,24,opt,name=ops_per_second,json=opsPerSecond,proto3" json:"ops_per_second,omitempty"`
	Artifacts            []*proto1.Artifact `protobuf:"bytes,5,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VQLCollectorArgs) Reset()         { *m = VQLCollectorArgs{} }
func (m *VQLCollectorArgs) String() string { return proto.CompactTextString(m) }
func (*VQLCollectorArgs) ProtoMessage()    {}
func (*VQLCollectorArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{2}
}
func (m *VQLCollectorArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VQLCollectorArgs.Unmarshal(m, b)
}
func (m *VQLCollectorArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VQLCollectorArgs.Marshal(b, m, deterministic)
}
func (dst *VQLCollectorArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VQLCollectorArgs.Merge(dst, src)
}
func (m *VQLCollectorArgs) XXX_Size() int {
	return xxx_messageInfo_VQLCollectorArgs.Size(m)
}
func (m *VQLCollectorArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VQLCollectorArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VQLCollectorArgs proto.InternalMessageInfo

func (m *VQLCollectorArgs) GetEnv() []*VQLEnv {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *VQLCollectorArgs) GetQuery() []*VQLRequest {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *VQLCollectorArgs) GetMaxRow() uint64 {
	if m != nil {
		return m.MaxRow
	}
	return 0
}

func (m *VQLCollectorArgs) GetMaxWait() uint64 {
	if m != nil {
		return m.MaxWait
	}
	return 0
}

func (m *VQLCollectorArgs) GetOpsPerSecond() float32 {
	if m != nil {
		return m.OpsPerSecond
	}
	return 0
}

func (m *VQLCollectorArgs) GetArtifacts() []*proto1.Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type VQLTypeMap struct {
	Column               string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VQLTypeMap) Reset()         { *m = VQLTypeMap{} }
func (m *VQLTypeMap) String() string { return proto.CompactTextString(m) }
func (*VQLTypeMap) ProtoMessage()    {}
func (*VQLTypeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{3}
}
func (m *VQLTypeMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VQLTypeMap.Unmarshal(m, b)
}
func (m *VQLTypeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VQLTypeMap.Marshal(b, m, deterministic)
}
func (dst *VQLTypeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VQLTypeMap.Merge(dst, src)
}
func (m *VQLTypeMap) XXX_Size() int {
	return xxx_messageInfo_VQLTypeMap.Size(m)
}
func (m *VQLTypeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_VQLTypeMap.DiscardUnknown(m)
}

var xxx_messageInfo_VQLTypeMap proto.InternalMessageInfo

func (m *VQLTypeMap) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *VQLTypeMap) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type VQLResponse struct {
	Response             string        `protobuf:"bytes,1,opt,name=Response,proto3" json:"Response,omitempty"`
	Columns              []string      `protobuf:"bytes,2,rep,name=Columns,proto3" json:"Columns,omitempty"`
	Types                []*VQLTypeMap `protobuf:"bytes,8,rep,name=types,proto3" json:"types,omitempty"`
	QueryId              uint64        `protobuf:"varint,5,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Part                 uint64        `protobuf:"varint,6,opt,name=part,proto3" json:"part,omitempty"`
	Query                *VQLRequest   `protobuf:"bytes,3,opt,name=Query,proto3" json:"Query,omitempty"`
	Timestamp            uint64        `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TotalRows            uint64        `protobuf:"varint,7,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VQLResponse) Reset()         { *m = VQLResponse{} }
func (m *VQLResponse) String() string { return proto.CompactTextString(m) }
func (*VQLResponse) ProtoMessage()    {}
func (*VQLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{4}
}
func (m *VQLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VQLResponse.Unmarshal(m, b)
}
func (m *VQLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VQLResponse.Marshal(b, m, deterministic)
}
func (dst *VQLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VQLResponse.Merge(dst, src)
}
func (m *VQLResponse) XXX_Size() int {
	return xxx_messageInfo_VQLResponse.Size(m)
}
func (m *VQLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VQLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VQLResponse proto.InternalMessageInfo

func (m *VQLResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *VQLResponse) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *VQLResponse) GetTypes() []*VQLTypeMap {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *VQLResponse) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *VQLResponse) GetPart() uint64 {
	if m != nil {
		return m.Part
	}
	return 0
}

func (m *VQLResponse) GetQuery() *VQLRequest {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *VQLResponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VQLResponse) GetTotalRows() uint64 {
	if m != nil {
		return m.TotalRows
	}
	return 0
}

// FIXME: We replicate a small subset of GRR's elaborate knowledgebase
// protos here because the GUI API plugins use this to construct the
// GRR APIs. When we re-implement the API plugins, refactor this into
// a more sane structure.
type User struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{5}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type VQLEventTable struct {
	Event                []*VQLCollectorArgs `protobuf:"bytes,1,rep,name=event,proto3" json:"event,omitempty"`
	Version              uint64              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *VQLEventTable) Reset()         { *m = VQLEventTable{} }
func (m *VQLEventTable) String() string { return proto.CompactTextString(m) }
func (*VQLEventTable) ProtoMessage()    {}
func (*VQLEventTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{6}
}
func (m *VQLEventTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VQLEventTable.Unmarshal(m, b)
}
func (m *VQLEventTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VQLEventTable.Marshal(b, m, deterministic)
}
func (dst *VQLEventTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VQLEventTable.Merge(dst, src)
}
func (m *VQLEventTable) XXX_Size() int {
	return xxx_messageInfo_VQLEventTable.Size(m)
}
func (m *VQLEventTable) XXX_DiscardUnknown() {
	xxx_messageInfo_VQLEventTable.DiscardUnknown(m)
}

var xxx_messageInfo_VQLEventTable proto.InternalMessageInfo

func (m *VQLEventTable) GetEvent() []*VQLCollectorArgs {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *VQLEventTable) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Knowledgebase struct {
	Users                []*User  `protobuf:"bytes,32,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Knowledgebase) Reset()         { *m = Knowledgebase{} }
func (m *Knowledgebase) String() string { return proto.CompactTextString(m) }
func (*Knowledgebase) ProtoMessage()    {}
func (*Knowledgebase) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{7}
}
func (m *Knowledgebase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Knowledgebase.Unmarshal(m, b)
}
func (m *Knowledgebase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Knowledgebase.Marshal(b, m, deterministic)
}
func (dst *Knowledgebase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Knowledgebase.Merge(dst, src)
}
func (m *Knowledgebase) XXX_Size() int {
	return xxx_messageInfo_Knowledgebase.Size(m)
}
func (m *Knowledgebase) XXX_DiscardUnknown() {
	xxx_messageInfo_Knowledgebase.DiscardUnknown(m)
}

var xxx_messageInfo_Knowledgebase proto.InternalMessageInfo

func (m *Knowledgebase) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type ClientInfo struct {
	Info []*VQLResponse `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	// GRR Keeps these separated so they can be searched on.
	LastTimestamp        uint64         `protobuf:"varint,2,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	Hostname             string         `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Fqdn                 string         `protobuf:"bytes,4,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	System               string         `protobuf:"bytes,5,opt,name=system,proto3" json:"system,omitempty"`
	Release              string         `protobuf:"bytes,6,opt,name=release,proto3" json:"release,omitempty"`
	Architecture         string         `protobuf:"bytes,7,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Usernames            string         `protobuf:"bytes,8,opt,name=usernames,proto3" json:"usernames,omitempty"`
	MacAddress           string         `protobuf:"bytes,9,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddress            string         `protobuf:"bytes,10,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Ping                 uint64         `protobuf:"varint,11,opt,name=ping,proto3" json:"ping,omitempty"`
	ClientVersion        string         `protobuf:"bytes,12,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientName           string         `protobuf:"bytes,13,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	Knowledgebase        *Knowledgebase `protobuf:"bytes,14,opt,name=knowledgebase,proto3" json:"knowledgebase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_vql_7ddf797305152d10, []int{8}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (dst *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(dst, src)
}
func (m *ClientInfo) XXX_Size() int {
	return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetInfo() []*VQLResponse {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ClientInfo) GetLastTimestamp() uint64 {
	if m != nil {
		return m.LastTimestamp
	}
	return 0
}

func (m *ClientInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ClientInfo) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *ClientInfo) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *ClientInfo) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *ClientInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *ClientInfo) GetUsernames() string {
	if m != nil {
		return m.Usernames
	}
	return ""
}

func (m *ClientInfo) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *ClientInfo) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ClientInfo) GetPing() uint64 {
	if m != nil {
		return m.Ping
	}
	return 0
}

func (m *ClientInfo) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ClientInfo) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ClientInfo) GetKnowledgebase() *Knowledgebase {
	if m != nil {
		return m.Knowledgebase
	}
	return nil
}

func init() {
	proto.RegisterType((*VQLRequest)(nil), "proto.VQLRequest")
	proto.RegisterType((*VQLEnv)(nil), "proto.VQLEnv")
	proto.RegisterType((*VQLCollectorArgs)(nil), "proto.VQLCollectorArgs")
	proto.RegisterType((*VQLTypeMap)(nil), "proto.VQLTypeMap")
	proto.RegisterType((*VQLResponse)(nil), "proto.VQLResponse")
	proto.RegisterType((*User)(nil), "proto.User")
	proto.RegisterType((*VQLEventTable)(nil), "proto.VQLEventTable")
	proto.RegisterType((*Knowledgebase)(nil), "proto.Knowledgebase")
	proto.RegisterType((*ClientInfo)(nil), "proto.ClientInfo")
}

func init() { proto.RegisterFile("vql.proto", fileDescriptor_vql_7ddf797305152d10) }

var fileDescriptor_vql_7ddf797305152d10 = []byte{
	// 1598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0x24, 0x47,
	0x15, 0xd7, 0xd8, 0x1e, 0xdb, 0x53, 0x5e, 0x2f, 0x49, 0x29, 0x0a, 0xcd, 0x12, 0x96, 0xca, 0x10,
	0x82, 0x43, 0x94, 0xb6, 0xd7, 0xab, 0x28, 0xcb, 0x22, 0x88, 0x3c, 0xbb, 0x1b, 0x14, 0xf0, 0x26,
	0xb8, 0xe2, 0x38, 0x28, 0x8a, 0x30, 0x35, 0xdd, 0x6f, 0x66, 0x4a, 0x5b, 0x5d, 0xd5, 0xae, 0xaa,
	0x9e, 0xf6, 0x1c, 0x72, 0x02, 0x09, 0xbe, 0x01, 0x12, 0x12, 0x07, 0x6e, 0x11, 0x17, 0xbe, 0x04,
	0x87, 0x48, 0x7c, 0x00, 0xee, 0x70, 0xe3, 0x33, 0x70, 0x40, 0xef, 0x75, 0xf7, 0xcc, 0x78, 0x05,
	0x12, 0x39, 0x4d, 0xd7, 0xab, 0xaa, 0xdf, 0xfb, 0xbd, 0x7f, 0xbf, 0x1a, 0x36, 0x98, 0x5f, 0x99,
	0xb4, 0xf4, 0x2e, 0x3a, 0xde, 0xa7, 0x9f, 0x3b, 0x0f, 0xeb, 0xba, 0x4e, 0xe7, 0x60, 0x5c, 0xa6,
	0x73, 0xb8, 0x4e, 0x33, 0x57, 0x1c, 0x4e, 0x9d, 0x51, 0x76, 0x7a, 0xd8, 0x18, 0xbd, 0x2a, 0xa3,
	0xf3, 0x87, 0x74, 0xf8, 0x30, 0x40, 0xa1, 0x6c, 0xd4, 0x59, 0x03, 0x71, 0xe7, 0xdd, 0xaf, 0x72,
	0x77, 0x62, 0x5c, 0x7d, 0x59, 0x40, 0x54, 0xb9, 0x8a, 0xaa, 0x05, 0x78, 0xfc, 0xff, 0x01, 0x28,
	0x1f, 0xf5, 0x44, 0x65, 0x31, 0xb4, 0x50, 0xdd, 0xba, 0x41, 0x19, 0x7e, 0xb1, 0xc1, 0xd8, 0xc5,
	0xd9, 0xa9, 0x84, 0xab, 0x0a, 0x42, 0xe4, 0xbf, 0xeb, 0xb1, 0xad, 0x0f, 0x54, 0x01, 0xc9, 0x86,
	0xe8, 0x1d, 0x0c, 0x46, 0xf1, 0x1f, 0xff, 0xfe, 0xe7, 0x5f, 0x7b, 0x96, 0x9b, 0xf3, 0x19, 0x08,
	0xab, 0x0a, 0x10, 0x6e, 0x22, 0xe2, 0x4c, 0x07, 0x71, 0x55, 0x81, 0x5f, 0xa4, 0xe2, 0x1c, 0xbf,
	0xc3, 0xcc, 0x55, 0x26, 0x17, 0x63, 0x10, 0x39, 0x84, 0xcc, 0xeb, 0x32, 0xea, 0x39, 0x88, 0xe8,
	0x84, 0xb6, 0xb9, 0xce, 0x54, 0x04, 0x51, 0xcf, 0x54, 0x14, 0x71, 0x51, 0xd2, 0x7d, 0x6d, 0x27,
	0xce, 0x17, 0x4a, 0x47, 0x67, 0x45, 0x9c, 0x41, 0x03, 0x25, 0x3c, 0x44, 0xaf, 0x61, 0x0e, 0x21,
	0x95, 0xc4, 0x80, 0x9f, 0xb2, 0xbd, 0xc7, 0x1d, 0x9c, 0xb3, 0xc9, 0x26, 0x11, 0xfa, 0x3e, 0x11,
	0x7a, 0x8d, 0x0f, 0x3f, 0x21, 0xc4, 0x25, 0x13, 0x81, 0x34, 0xaa, 0xb2, 0x74, 0x01, 0x72, 0xf4,
	0x9c, 0xbb, 0x54, 0xae, 0x5f, 0xe7, 0x27, 0x6c, 0xf3, 0xe2, 0xec, 0x34, 0xe9, 0x11, 0xca, 0x21,
	0xa1, 0xbc, 0xc1, 0xbf, 0x87, 0x61, 0x5d, 0x9c, 0x9d, 0xb6, 0x18, 0xd1, 0x09, 0xb8, 0x86, 0xac,
	0x8a, 0x20, 0x5a, 0x6a, 0x99, 0xd1, 0x60, 0x63, 0x2a, 0xf1, 0xee, 0xf0, 0x88, 0x6d, 0x5f, 0x9c,
	0x9d, 0x3e, 0xb1, 0x73, 0xfe, 0x02, 0xdb, 0x7c, 0x06, 0x8b, 0x06, 0x4c, 0xe2, 0x27, 0x7f, 0x89,
	0xf5, 0xe7, 0xca, 0x54, 0x6d, 0xde, 0x64, 0xb3, 0x18, 0xfe, 0x66, 0x87, 0xbd, 0x70, 0x71, 0x76,
	0xfa, 0xc8, 0x19, 0x03, 0x59, 0x74, 0xfe, 0xc4, 0x4f, 0x03, 0xff, 0x8c, 0x6d, 0x82, 0x9d, 0x27,
	0x9b, 0x62, 0xf3, 0x60, 0xef, 0x78, 0xbf, 0x29, 0x43, 0xda, 0x00, 0x8f, 0x7e, 0x48, 0xc4, 0xde,
	0xe6, 0xf7, 0x9f, 0xd8, 0xb9, 0xf6, 0xce, 0x16, 0x60, 0xa3, 0x98, 0x2b, 0xaf, 0xd5, 0xd8, 0x40,
	0x40, 0x82, 0x63, 0x10, 0xa5, 0x77, 0x73, 0x9d, 0x43, 0x2e, 0x26, 0xce, 0xaf, 0x12, 0x98, 0x4a,
	0x84, 0xe5, 0x9f, 0xb2, 0xfe, 0x19, 0x2e, 0x93, 0x0d, 0xc2, 0x7f, 0x71, 0x85, 0xdf, 0x96, 0x78,
	0x74, 0x8f, 0x7c, 0xbc, 0xc9, 0xdf, 0x58, 0x0f, 0x5e, 0x37, 0xe8, 0xff, 0x23, 0xfc, 0x06, 0x92,
	0xff, 0xb1, 0xc7, 0x76, 0x0a, 0x75, 0x7d, 0xe9, 0x5d, 0x9d, 0x6c, 0x89, 0xde, 0xc1, 0xd6, 0xe8,
	0xd7, 0x3d, 0x02, 0xfb, 0x9c, 0x8f, 0x11, 0xac, 0x50, 0xd7, 0xba, 0xa8, 0x0a, 0xe1, 0x5d, 0x1d,
	0x44, 0x09, 0x5e, 0x78, 0x08, 0xa5, 0xb3, 0x01, 0x52, 0x21, 0xdb, 0xaf, 0x20, 0x8c, 0xf2, 0x53,
	0x40, 0xde, 0xca, 0x36, 0xf5, 0xab, 0xb5, 0x31, 0x18, 0x56, 0x28, 0x8d, 0x8e, 0x42, 0x65, 0xde,
	0x85, 0x20, 0x8a, 0xca, 0x44, 0x5d, 0x1a, 0x58, 0x42, 0x84, 0x74, 0xf8, 0xe2, 0x53, 0x75, 0xbd,
	0xc2, 0x2e, 0x95, 0x8f, 0xc7, 0x5b, 0xf7, 0x8e, 0x8e, 0x8e, 0xe4, 0x76, 0xa1, 0xae, 0xa5, 0xab,
	0xf9, 0xdf, 0x7a, 0x6c, 0x17, 0xf9, 0xd5, 0x4a, 0xc7, 0x64, 0x9b, 0x08, 0xfe, 0xa5, 0x21, 0xf8,
	0x45, 0x8f, 0x7f, 0xfe, 0x9e, 0xf3, 0xc2, 0x38, 0x3b, 0x5d, 0xc6, 0x5b, 0x23, 0x7a, 0xac, 0xbc,
	0x25, 0x2c, 0xad, 0x0c, 0x3a, 0xab, 0x4c, 0x0c, 0x42, 0x4d, 0x22, 0x51, 0xd4, 0x81, 0x6e, 0xb4,
	0x6d, 0xae, 0x83, 0xf0, 0x70, 0x55, 0x69, 0xdf, 0xa6, 0x1e, 0xe6, 0x58, 0x1d, 0xa3, 0x43, 0x04,
	0x0b, 0x3e, 0x88, 0x7a, 0xa6, 0xb3, 0x99, 0xb0, 0x30, 0xa7, 0xc8, 0x95, 0x31, 0x0b, 0x91, 0xb9,
	0xa2, 0x34, 0x10, 0x21, 0x1d, 0x7e, 0x67, 0xa4, 0x62, 0x36, 0x23, 0x00, 0x08, 0x31, 0x60, 0xfc,
	0x51, 0x44, 0xf5, 0x0c, 0xd6, 0xdc, 0x1c, 0x6f, 0xdc, 0x3b, 0x92, 0x98, 0xe1, 0x4f, 0x94, 0x8e,
	0xfc, 0xcb, 0x1e, 0xbb, 0xed, 0xca, 0x70, 0x59, 0x82, 0xbf, 0x0c, 0x90, 0x39, 0x9b, 0x27, 0x89,
	0xe8, 0x1d, 0x6c, 0x8c, 0xfe, 0xd4, 0xc4, 0xf4, 0x87, 0x1e, 0xff, 0x7d, 0xef, 0xc4, 0x8a, 0x0f,
	0x4b, 0x64, 0x96, 0xc3, 0x44, 0x5b, 0xc8, 0x85, 0x0a, 0x22, 0xb8, 0x02, 0x84, 0xf2, 0x63, 0x1d,
	0xbd, 0xf2, 0x0b, 0x51, 0x59, 0x1d, 0x71, 0xec, 0x6a, 0xe7, 0x9f, 0xb5, 0x91, 0x28, 0x63, 0x30,
	0x8d, 0x68, 0x69, 0x7b, 0xca, 0xe8, 0x42, 0x47, 0xc8, 0x53, 0x71, 0xbe, 0x28, 0x75, 0x46, 0xdc,
	0xb1, 0x35, 0x4a, 0x53, 0x4d, 0xb5, 0x6d, 0x6b, 0x94, 0xb9, 0xca, 0x46, 0xe1, 0x4a, 0xec, 0x94,
	0x5a, 0xf9, 0x3c, 0xac, 0x4d, 0xaf, 0x0a, 0x42, 0x95, 0xa5, 0x77, 0xa5, 0xd7, 0x2a, 0x42, 0x2a,
	0x6f, 0xb9, 0x32, 0xfc, 0x1c, 0xfc, 0x47, 0xc4, 0x9b, 0x5b, 0x36, 0x58, 0xca, 0x50, 0xd2, 0xa7,
	0xc6, 0xfc, 0x5a, 0xdb, 0x98, 0x27, 0xad, 0x7d, 0xf4, 0x2e, 0x05, 0xf5, 0x03, 0xfe, 0x4e, 0x67,
	0x09, 0x22, 0x60, 0x7e, 0x27, 0xde, 0x15, 0xe4, 0x28, 0x80, 0xc7, 0xcc, 0x46, 0x27, 0x66, 0x60,
	0x4a, 0x51, 0xeb, 0x38, 0x5b, 0x97, 0x22, 0xb9, 0x72, 0xf1, 0x70, 0xff, 0x5f, 0xbf, 0x15, 0x03,
	0xb6, 0xf3, 0x13, 0xac, 0x8b, 0xce, 0x86, 0x0f, 0x48, 0xe2, 0xce, 0x17, 0x25, 0x3c, 0x55, 0x25,
	0x7f, 0x99, 0x6d, 0x67, 0xce, 0x54, 0x85, 0x6d, 0xe7, 0xb7, 0x5d, 0x71, 0xce, 0xb6, 0x50, 0xa1,
	0xda, 0x09, 0xa6, 0xef, 0xe1, 0x97, 0x7d, 0xb6, 0x47, 0xa3, 0xd3, 0x34, 0x21, 0x7f, 0xc8, 0x76,
	0xbb, 0xef, 0x56, 0x4a, 0xee, 0x12, 0xed, 0x84, 0xbf, 0xfc, 0xd3, 0x8f, 0x3e, 0xfc, 0x40, 0x80,
	0xcd, 0x1c, 0x4e, 0xe6, 0xb2, 0xf1, 0xe5, 0xf2, 0x3c, 0x97, 0x6c, 0xe7, 0x11, 0x79, 0x0a, 0x34,
	0x9b, 0x83, 0xd1, 0x03, 0xba, 0x7a, 0xcc, 0x8f, 0x4e, 0xa8, 0x89, 0xb0, 0x46, 0x0d, 0x15, 0x31,
	0x03, 0x95, 0x6b, 0x3b, 0x0d, 0x38, 0xea, 0x79, 0x95, 0x41, 0x2e, 0xc6, 0x8b, 0xf5, 0x49, 0xef,
	0x80, 0xf8, 0x2f, 0x59, 0x1f, 0x79, 0x86, 0x64, 0xf7, 0xf9, 0x69, 0x6f, 0xa3, 0x1d, 0xbd, 0x4d,
	0x4e, 0x0e, 0xf9, 0x5b, 0x4f, 0x55, 0x59, 0x6a, 0x3b, 0x15, 0x63, 0x88, 0x35, 0x80, 0xed, 0x5c,
	0xa1, 0xa8, 0x07, 0xa1, 0x6c, 0x8e, 0xf8, 0xda, 0x93, 0x48, 0x87, 0x54, 0x36, 0xb0, 0x5c, 0xb2,
	0x5d, 0x72, 0x79, 0xa9, 0xf3, 0xa4, 0x4f, 0x03, 0xf5, 0x0e, 0xe1, 0xdd, 0xe3, 0x87, 0x8f, 0x66,
	0xde, 0x59, 0x67, 0xdc, 0x14, 0xdb, 0x45, 0x38, 0x9f, 0x83, 0x6f, 0x1e, 0x87, 0xae, 0x25, 0xea,
	0x6e, 0x78, 0x51, 0x90, 0x53, 0xb9, 0x43, 0xd6, 0xf7, 0x73, 0x1e, 0xd9, 0x16, 0xce, 0x5b, 0x3b,
	0xa0, 0xbf, 0x22, 0xbc, 0x4f, 0xf9, 0x2f, 0x4e, 0x51, 0x17, 0xa8, 0xe9, 0x96, 0x23, 0x2f, 0x94,
	0x7f, 0x5e, 0x16, 0x94, 0x5d, 0xd0, 0xb4, 0x86, 0xb6, 0x93, 0x33, 0xe5, 0x1b, 0xed, 0x9a, 0x01,
	0xd9, 0x97, 0xef, 0xd3, 0xaa, 0x02, 0xe4, 0x8d, 0x3f, 0xed, 0x74, 0x11, 0xdf, 0x91, 0xff, 0xaa,
	0x8b, 0xaf, 0x11, 0x93, 0xbb, 0xfc, 0x95, 0xf3, 0x65, 0x08, 0x34, 0xa4, 0xb5, 0x0a, 0x9d, 0x2e,
	0xe6, 0x4b, 0x29, 0xfc, 0x8c, 0x0d, 0xa2, 0x2e, 0x20, 0x44, 0x55, 0x94, 0xad, 0x16, 0xfe, 0x98,
	0xee, 0x3f, 0x60, 0x7b, 0xf2, 0xf1, 0x7b, 0x8f, 0x55, 0x04, 0xdc, 0x6f, 0x44, 0x76, 0x79, 0x92,
	0x68, 0x76, 0xcc, 0x08, 0x78, 0x8a, 0x2d, 0xaa, 0x08, 0x79, 0x05, 0xc8, 0x25, 0x63, 0xd1, 0x45,
	0x65, 0x50, 0x69, 0x43, 0xb2, 0x43, 0xf0, 0xf7, 0x09, 0xfe, 0x2d, 0xfe, 0xe6, 0x39, 0xee, 0x08,
	0x5b, 0x15, 0xe3, 0x26, 0xe3, 0xa4, 0x88, 0xda, 0xde, 0x0c, 0x9b, 0x92, 0x81, 0x98, 0x78, 0x58,
	0xba, 0x3a, 0x0c, 0x9f, 0xb0, 0xad, 0x8f, 0x03, 0x78, 0xfe, 0x23, 0xb6, 0x5b, 0x05, 0xf0, 0x58,
	0xf7, 0xb6, 0x85, 0x5f, 0x25, 0xe4, 0x6f, 0xf2, 0x6f, 0x20, 0xd7, 0x6e, 0xaf, 0xab, 0x25, 0xae,
	0x53, 0xb9, 0xbc, 0x32, 0xfc, 0x73, 0x8f, 0xed, 0xe3, 0x63, 0x85, 0xda, 0x77, 0x8e, 0xaf, 0x12,
	0xff, 0x98, 0xf5, 0x49, 0x09, 0x93, 0x1e, 0xf5, 0xe0, 0xd7, 0x57, 0x99, 0xbd, 0xf1, 0xee, 0x8d,
	0x5e, 0x27, 0x37, 0x82, 0xdf, 0x3d, 0x11, 0x01, 0xa8, 0x50, 0x8d, 0x80, 0xae, 0x3d, 0x3f, 0xbe,
	0xb2, 0xa9, 0x6c, 0xd0, 0xf8, 0x88, 0xed, 0xcc, 0xc1, 0x07, 0x7c, 0xfa, 0x37, 0x28, 0x01, 0x07,
	0x74, 0x7f, 0xc8, 0x05, 0xd2, 0x6c, 0xb7, 0x96, 0xe5, 0x6e, 0xa0, 0x22, 0x12, 0x4a, 0x65, 0x77,
	0x71, 0x78, 0xcc, 0xf6, 0x7f, 0x66, 0x5d, 0x6d, 0x20, 0x9f, 0xc2, 0x58, 0x05, 0xe0, 0xaf, 0xb2,
	0x3e, 0x46, 0x12, 0x12, 0x41, 0x5c, 0xf7, 0x5a, 0xae, 0x98, 0x18, 0xd9, 0xec, 0x0c, 0xff, 0xbe,
	0xc9, 0xd8, 0x23, 0x7a, 0xf7, 0xde, 0xb7, 0x13, 0xc7, 0x5f, 0x67, 0x5b, 0xf8, 0x7f, 0xa5, 0x0d,
	0x8e, 0xaf, 0xb7, 0x4d, 0x93, 0x69, 0x49, 0xfb, 0xfc, 0xbb, 0xec, 0xb6, 0x51, 0x21, 0x5e, 0xae,
	0xba, 0x82, 0x58, 0xcb, 0x7d, 0xb4, 0x9e, 0x2f, 0x2b, 0x7b, 0x87, 0xed, 0xce, 0x5c, 0x88, 0x94,
	0x7d, 0xfa, 0x47, 0x23, 0x97, 0x6b, 0x14, 0xa0, 0xc9, 0x55, 0x6e, 0xa9, 0x9d, 0x06, 0x92, 0xbe,
	0x51, 0xac, 0xc2, 0x22, 0x44, 0x28, 0x68, 0xfc, 0x06, 0xb2, 0x5d, 0xf1, 0x84, 0xed, 0x78, 0x30,
	0xa0, 0x02, 0xd0, 0x1c, 0x0d, 0x64, 0xb7, 0xe4, 0x43, 0x76, 0x4b, 0xf9, 0x6c, 0xa6, 0x23, 0x64,
	0xb1, 0xf2, 0x40, 0xdd, 0x33, 0x90, 0x37, 0x6c, 0xfc, 0x15, 0x36, 0xe8, 0x0a, 0x8a, 0xd2, 0x81,
	0x07, 0x56, 0x06, 0xfe, 0x6d, 0xb6, 0x57, 0xa8, 0xec, 0x52, 0xe5, 0xb9, 0x87, 0x10, 0x92, 0x01,
	0xed, 0xb3, 0x42, 0x65, 0x27, 0x8d, 0x85, 0x7f, 0x8b, 0x31, 0x5d, 0x2e, 0xf7, 0x59, 0x73, 0x5f,
	0x97, 0xdd, 0x36, 0x67, 0x5b, 0xa8, 0x34, 0xc9, 0x1e, 0x25, 0x80, 0xbe, 0x31, 0x3d, 0xcd, 0x9f,
	0x89, 0xcb, 0xae, 0xa8, 0xb7, 0xe8, 0xda, 0x7e, 0x63, 0xbd, 0x68, 0x8c, 0xe8, 0xba, 0x3d, 0x46,
	0x19, 0xda, 0x6f, 0x5c, 0x37, 0x26, 0xfa, 0x53, 0xf8, 0x90, 0xed, 0x3f, 0x5b, 0xaf, 0x68, 0x72,
	0x9b, 0xc6, 0xf9, 0xa5, 0xb6, 0x2e, 0x37, 0xaa, 0x2d, 0x6f, 0x1e, 0x1d, 0x6f, 0xd3, 0x99, 0xfb,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xac, 0xca, 0xe1, 0x7c, 0xc8, 0x0b, 0x00, 0x00,
}
