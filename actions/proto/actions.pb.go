// Code generated by protoc-gen-go. DO NOT EDIT.
// source: actions.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "www.velocidex.com/golang/velociraptor/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// These are used when mapping registry keys to the VFS
type StatEntry_RegistryType int32

const (
	StatEntry_REG_NONE                StatEntry_RegistryType = 0
	StatEntry_REG_SZ                  StatEntry_RegistryType = 1
	StatEntry_REG_EXPAND_SZ           StatEntry_RegistryType = 2
	StatEntry_REG_BINARY              StatEntry_RegistryType = 3
	StatEntry_REG_DWORD               StatEntry_RegistryType = 4
	StatEntry_REG_DWORD_LITTLE_ENDIAN StatEntry_RegistryType = 4
	StatEntry_REG_DWORD_BIG_ENDIAN    StatEntry_RegistryType = 5
	StatEntry_REG_LINK                StatEntry_RegistryType = 6
	StatEntry_REG_MULTI_SZ            StatEntry_RegistryType = 7
	StatEntry_REG_QWORD               StatEntry_RegistryType = 11
)

var StatEntry_RegistryType_name = map[int32]string{
	0: "REG_NONE",
	1: "REG_SZ",
	2: "REG_EXPAND_SZ",
	3: "REG_BINARY",
	4: "REG_DWORD",
	// Duplicate value: 4: "REG_DWORD_LITTLE_ENDIAN",
	5:  "REG_DWORD_BIG_ENDIAN",
	6:  "REG_LINK",
	7:  "REG_MULTI_SZ",
	11: "REG_QWORD",
}
var StatEntry_RegistryType_value = map[string]int32{
	"REG_NONE":                0,
	"REG_SZ":                  1,
	"REG_EXPAND_SZ":           2,
	"REG_BINARY":              3,
	"REG_DWORD":               4,
	"REG_DWORD_LITTLE_ENDIAN": 4,
	"REG_DWORD_BIG_ENDIAN":    5,
	"REG_LINK":                6,
	"REG_MULTI_SZ":            7,
	"REG_QWORD":               11,
}

func (x StatEntry_RegistryType) String() string {
	return proto.EnumName(StatEntry_RegistryType_name, int32(x))
}
func (StatEntry_RegistryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{3, 0}
}

type PathSpec_PathType int32

const (
	//    UNSET = -1;
	PathSpec_OS       PathSpec_PathType = 0
	PathSpec_TSK      PathSpec_PathType = 1
	PathSpec_REGISTRY PathSpec_PathType = 2
	PathSpec_MEMORY   PathSpec_PathType = 3
	PathSpec_TMPFILE  PathSpec_PathType = 4
)

var PathSpec_PathType_name = map[int32]string{
	0: "OS",
	1: "TSK",
	2: "REGISTRY",
	3: "MEMORY",
	4: "TMPFILE",
}
var PathSpec_PathType_value = map[string]int32{
	"OS":       0,
	"TSK":      1,
	"REGISTRY": 2,
	"MEMORY":   3,
	"TMPFILE":  4,
}

func (x PathSpec_PathType) String() string {
	return proto.EnumName(PathSpec_PathType_name, int32(x))
}
func (PathSpec_PathType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{4, 0}
}

type PathSpec_Options int32

const (
	PathSpec_CASE_INSENSITIVE PathSpec_Options = 0
	PathSpec_CASE_LITERAL     PathSpec_Options = 1
	// The path component is a regular expression.
	PathSpec_REGEX PathSpec_Options = 2
	// Indicates that this pathspec represents any subdirectory recursively.
	PathSpec_RECURSIVE PathSpec_Options = 3
)

var PathSpec_Options_name = map[int32]string{
	0: "CASE_INSENSITIVE",
	1: "CASE_LITERAL",
	2: "REGEX",
	3: "RECURSIVE",
}
var PathSpec_Options_value = map[string]int32{
	"CASE_INSENSITIVE": 0,
	"CASE_LITERAL":     1,
	"REGEX":            2,
	"RECURSIVE":        3,
}

func (x PathSpec_Options) String() string {
	return proto.EnumName(PathSpec_Options_name, int32(x))
}
func (PathSpec_Options) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{4, 1}
}

type PathSpecTskFsAttrType int32

const (
	PathSpec_TSK_FS_UNSET                   PathSpecTskFsAttrType = 0
	PathSpec_TSK_FS_ATTR_TYPE_DEFAULT       PathSpecTskFsAttrType = 1
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_SI       PathSpecTskFsAttrType = 16
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_ATTRLIST PathSpecTskFsAttrType = 32
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_FNAME    PathSpecTskFsAttrType = 48
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_VVER     PathSpecTskFsAttrType = 64
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_OBJID    PathSpecTskFsAttrType = 64
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_SEC      PathSpecTskFsAttrType = 80
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_VNAME    PathSpecTskFsAttrType = 96
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_VINFO    PathSpecTskFsAttrType = 112
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_DATA     PathSpecTskFsAttrType = 128
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_IDXROOT  PathSpecTskFsAttrType = 144
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_IDXALLOC PathSpecTskFsAttrType = 160
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_BITMAP   PathSpecTskFsAttrType = 176
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_SYMLNK   PathSpecTskFsAttrType = 192
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_REPARSE  PathSpecTskFsAttrType = 192
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_EAINFO   PathSpecTskFsAttrType = 208
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_EA       PathSpecTskFsAttrType = 224
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_PROP     PathSpecTskFsAttrType = 240
	PathSpec_TSK_FS_ATTR_TYPE_NTFS_LOG      PathSpecTskFsAttrType = 256
	PathSpec_TSK_FS_ATTR_TYPE_UNIX_INDIR    PathSpecTskFsAttrType = 4097
)

var PathSpecTskFsAttrType_name = map[int32]string{
	0:  "TSK_FS_UNSET",
	1:  "TSK_FS_ATTR_TYPE_DEFAULT",
	16: "TSK_FS_ATTR_TYPE_NTFS_SI",
	32: "TSK_FS_ATTR_TYPE_NTFS_ATTRLIST",
	48: "TSK_FS_ATTR_TYPE_NTFS_FNAME",
	64: "TSK_FS_ATTR_TYPE_NTFS_VVER",
	// Duplicate value: 64: "TSK_FS_ATTR_TYPE_NTFS_OBJID",
	80:  "TSK_FS_ATTR_TYPE_NTFS_SEC",
	96:  "TSK_FS_ATTR_TYPE_NTFS_VNAME",
	112: "TSK_FS_ATTR_TYPE_NTFS_VINFO",
	128: "TSK_FS_ATTR_TYPE_NTFS_DATA",
	144: "TSK_FS_ATTR_TYPE_NTFS_IDXROOT",
	160: "TSK_FS_ATTR_TYPE_NTFS_IDXALLOC",
	176: "TSK_FS_ATTR_TYPE_NTFS_BITMAP",
	192: "TSK_FS_ATTR_TYPE_NTFS_SYMLNK",
	// Duplicate value: 192: "TSK_FS_ATTR_TYPE_NTFS_REPARSE",
	208:  "TSK_FS_ATTR_TYPE_NTFS_EAINFO",
	224:  "TSK_FS_ATTR_TYPE_NTFS_EA",
	240:  "TSK_FS_ATTR_TYPE_NTFS_PROP",
	256:  "TSK_FS_ATTR_TYPE_NTFS_LOG",
	4097: "TSK_FS_ATTR_TYPE_UNIX_INDIR",
}
var PathSpecTskFsAttrType_value = map[string]int32{
	"TSK_FS_UNSET":                   0,
	"TSK_FS_ATTR_TYPE_DEFAULT":       1,
	"TSK_FS_ATTR_TYPE_NTFS_SI":       16,
	"TSK_FS_ATTR_TYPE_NTFS_ATTRLIST": 32,
	"TSK_FS_ATTR_TYPE_NTFS_FNAME":    48,
	"TSK_FS_ATTR_TYPE_NTFS_VVER":     64,
	"TSK_FS_ATTR_TYPE_NTFS_OBJID":    64,
	"TSK_FS_ATTR_TYPE_NTFS_SEC":      80,
	"TSK_FS_ATTR_TYPE_NTFS_VNAME":    96,
	"TSK_FS_ATTR_TYPE_NTFS_VINFO":    112,
	"TSK_FS_ATTR_TYPE_NTFS_DATA":     128,
	"TSK_FS_ATTR_TYPE_NTFS_IDXROOT":  144,
	"TSK_FS_ATTR_TYPE_NTFS_IDXALLOC": 160,
	"TSK_FS_ATTR_TYPE_NTFS_BITMAP":   176,
	"TSK_FS_ATTR_TYPE_NTFS_SYMLNK":   192,
	"TSK_FS_ATTR_TYPE_NTFS_REPARSE":  192,
	"TSK_FS_ATTR_TYPE_NTFS_EAINFO":   208,
	"TSK_FS_ATTR_TYPE_NTFS_EA":       224,
	"TSK_FS_ATTR_TYPE_NTFS_PROP":     240,
	"TSK_FS_ATTR_TYPE_NTFS_LOG":      256,
	"TSK_FS_ATTR_TYPE_UNIX_INDIR":    4097,
}

func (x PathSpecTskFsAttrType) String() string {
	return proto.EnumName(PathSpecTskFsAttrType_name, int32(x))
}
func (PathSpecTskFsAttrType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{4, 2}
}

// Stores information about the GRR client itself
type ClientInformation struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion        uint32   `protobuf:"varint,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	Revision             uint64   `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	BuildTime            string   `protobuf:"bytes,4,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	ClientDescription    string   `protobuf:"bytes,5,opt,name=client_description,json=clientDescription,proto3" json:"client_description,omitempty"`
	Labels               []string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInformation) Reset()         { *m = ClientInformation{} }
func (m *ClientInformation) String() string { return proto.CompactTextString(m) }
func (*ClientInformation) ProtoMessage()    {}
func (*ClientInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{0}
}
func (m *ClientInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInformation.Unmarshal(m, b)
}
func (m *ClientInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInformation.Marshal(b, m, deterministic)
}
func (dst *ClientInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInformation.Merge(dst, src)
}
func (m *ClientInformation) XXX_Size() int {
	return xxx_messageInfo_ClientInformation.Size(m)
}
func (m *ClientInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInformation.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInformation proto.InternalMessageInfo

func (m *ClientInformation) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ClientInformation) GetClientVersion() uint32 {
	if m != nil {
		return m.ClientVersion
	}
	return 0
}

func (m *ClientInformation) GetRevision() uint64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *ClientInformation) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

func (m *ClientInformation) GetClientDescription() string {
	if m != nil {
		return m.ClientDescription
	}
	return ""
}

func (m *ClientInformation) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Ask the ListDir action to list all files in path (returns StatEntry)
type ListDirRequest struct {
	Pathspec             *PathSpec `protobuf:"bytes,1,opt,name=pathspec,proto3" json:"pathspec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListDirRequest) Reset()         { *m = ListDirRequest{} }
func (m *ListDirRequest) String() string { return proto.CompactTextString(m) }
func (*ListDirRequest) ProtoMessage()    {}
func (*ListDirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{1}
}
func (m *ListDirRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDirRequest.Unmarshal(m, b)
}
func (m *ListDirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDirRequest.Marshal(b, m, deterministic)
}
func (dst *ListDirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDirRequest.Merge(dst, src)
}
func (m *ListDirRequest) XXX_Size() int {
	return xxx_messageInfo_ListDirRequest.Size(m)
}
func (m *ListDirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDirRequest proto.InternalMessageInfo

func (m *ListDirRequest) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

// StatFS client action request
type StatFSRequest struct {
	PathList             []string          `protobuf:"bytes,1,rep,name=path_list,json=pathList,proto3" json:"path_list,omitempty"`
	Pathtype             PathSpec_PathType `protobuf:"varint,2,opt,name=pathtype,proto3,enum=proto.PathSpec_PathType" json:"pathtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StatFSRequest) Reset()         { *m = StatFSRequest{} }
func (m *StatFSRequest) String() string { return proto.CompactTextString(m) }
func (*StatFSRequest) ProtoMessage()    {}
func (*StatFSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{2}
}
func (m *StatFSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatFSRequest.Unmarshal(m, b)
}
func (m *StatFSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatFSRequest.Marshal(b, m, deterministic)
}
func (dst *StatFSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatFSRequest.Merge(dst, src)
}
func (m *StatFSRequest) XXX_Size() int {
	return xxx_messageInfo_StatFSRequest.Size(m)
}
func (m *StatFSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatFSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatFSRequest proto.InternalMessageInfo

func (m *StatFSRequest) GetPathList() []string {
	if m != nil {
		return m.PathList
	}
	return nil
}

func (m *StatFSRequest) GetPathtype() PathSpec_PathType {
	if m != nil {
		return m.Pathtype
	}
	return PathSpec_OS
}

// A stat() record for a given path
// Next field id: 24.
type StatEntry struct {
	// DEPRECATED
	//  string aff4path = 1;
	StMode       uint64                 `protobuf:"varint,2,opt,name=st_mode,json=stMode,proto3" json:"st_mode,omitempty"`
	StIno        uint32                 `protobuf:"varint,3,opt,name=st_ino,json=stIno,proto3" json:"st_ino,omitempty"`
	StDev        uint32                 `protobuf:"varint,4,opt,name=st_dev,json=stDev,proto3" json:"st_dev,omitempty"`
	StNlink      uint32                 `protobuf:"varint,5,opt,name=st_nlink,json=stNlink,proto3" json:"st_nlink,omitempty"`
	StUid        uint32                 `protobuf:"varint,6,opt,name=st_uid,json=stUid,proto3" json:"st_uid,omitempty"`
	StGid        uint32                 `protobuf:"varint,7,opt,name=st_gid,json=stGid,proto3" json:"st_gid,omitempty"`
	StSize       uint64                 `protobuf:"varint,8,opt,name=st_size,json=stSize,proto3" json:"st_size,omitempty"`
	StAtime      uint64                 `protobuf:"varint,9,opt,name=st_atime,json=stAtime,proto3" json:"st_atime,omitempty"`
	StMtime      uint64                 `protobuf:"varint,10,opt,name=st_mtime,json=stMtime,proto3" json:"st_mtime,omitempty"`
	StCtime      uint64                 `protobuf:"varint,11,opt,name=st_ctime,json=stCtime,proto3" json:"st_ctime,omitempty"`
	StBlocks     uint32                 `protobuf:"varint,12,opt,name=st_blocks,json=stBlocks,proto3" json:"st_blocks,omitempty"`
	StBlksize    uint32                 `protobuf:"varint,13,opt,name=st_blksize,json=stBlksize,proto3" json:"st_blksize,omitempty"`
	StRdev       uint32                 `protobuf:"varint,14,opt,name=st_rdev,json=stRdev,proto3" json:"st_rdev,omitempty"`
	StFlagsOsx   uint32                 `protobuf:"varint,21,opt,name=st_flags_osx,json=stFlagsOsx,proto3" json:"st_flags_osx,omitempty"`
	StFlagsLinux uint32                 `protobuf:"varint,22,opt,name=st_flags_linux,json=stFlagsLinux,proto3" json:"st_flags_linux,omitempty"`
	Symlink      string                 `protobuf:"bytes,15,opt,name=symlink,proto3" json:"symlink,omitempty"`
	RegistryType StatEntry_RegistryType `protobuf:"varint,16,opt,name=registry_type,json=registryType,proto3,enum=proto.StatEntry_RegistryType" json:"registry_type,omitempty"`
	// For very small files their data is stored in this record.
	Resident []byte `protobuf:"bytes,17,opt,name=resident,proto3" json:"resident,omitempty"`
	// The pathspec which the client can use to re-reach this file.
	Pathspec *PathSpec `protobuf:"bytes,18,opt,name=pathspec,proto3" json:"pathspec,omitempty"`
	//   DataBlob registry_data = 19 [(sem_type) = {
	//      description: "If this entry represents a registry value, this field will "
	//     "contain that value encoded according to the correct type.";
	//    }];
	StCrtime             uint64               `protobuf:"varint,20,opt,name=st_crtime,json=stCrtime,proto3" json:"st_crtime,omitempty"`
	ExtAttrs             []*StatEntry_ExtAttr `protobuf:"bytes,23,rep,name=ext_attrs,json=extAttrs,proto3" json:"ext_attrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StatEntry) Reset()         { *m = StatEntry{} }
func (m *StatEntry) String() string { return proto.CompactTextString(m) }
func (*StatEntry) ProtoMessage()    {}
func (*StatEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{3}
}
func (m *StatEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatEntry.Unmarshal(m, b)
}
func (m *StatEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatEntry.Marshal(b, m, deterministic)
}
func (dst *StatEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatEntry.Merge(dst, src)
}
func (m *StatEntry) XXX_Size() int {
	return xxx_messageInfo_StatEntry.Size(m)
}
func (m *StatEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StatEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StatEntry proto.InternalMessageInfo

func (m *StatEntry) GetStMode() uint64 {
	if m != nil {
		return m.StMode
	}
	return 0
}

func (m *StatEntry) GetStIno() uint32 {
	if m != nil {
		return m.StIno
	}
	return 0
}

func (m *StatEntry) GetStDev() uint32 {
	if m != nil {
		return m.StDev
	}
	return 0
}

func (m *StatEntry) GetStNlink() uint32 {
	if m != nil {
		return m.StNlink
	}
	return 0
}

func (m *StatEntry) GetStUid() uint32 {
	if m != nil {
		return m.StUid
	}
	return 0
}

func (m *StatEntry) GetStGid() uint32 {
	if m != nil {
		return m.StGid
	}
	return 0
}

func (m *StatEntry) GetStSize() uint64 {
	if m != nil {
		return m.StSize
	}
	return 0
}

func (m *StatEntry) GetStAtime() uint64 {
	if m != nil {
		return m.StAtime
	}
	return 0
}

func (m *StatEntry) GetStMtime() uint64 {
	if m != nil {
		return m.StMtime
	}
	return 0
}

func (m *StatEntry) GetStCtime() uint64 {
	if m != nil {
		return m.StCtime
	}
	return 0
}

func (m *StatEntry) GetStBlocks() uint32 {
	if m != nil {
		return m.StBlocks
	}
	return 0
}

func (m *StatEntry) GetStBlksize() uint32 {
	if m != nil {
		return m.StBlksize
	}
	return 0
}

func (m *StatEntry) GetStRdev() uint32 {
	if m != nil {
		return m.StRdev
	}
	return 0
}

func (m *StatEntry) GetStFlagsOsx() uint32 {
	if m != nil {
		return m.StFlagsOsx
	}
	return 0
}

func (m *StatEntry) GetStFlagsLinux() uint32 {
	if m != nil {
		return m.StFlagsLinux
	}
	return 0
}

func (m *StatEntry) GetSymlink() string {
	if m != nil {
		return m.Symlink
	}
	return ""
}

func (m *StatEntry) GetRegistryType() StatEntry_RegistryType {
	if m != nil {
		return m.RegistryType
	}
	return StatEntry_REG_NONE
}

func (m *StatEntry) GetResident() []byte {
	if m != nil {
		return m.Resident
	}
	return nil
}

func (m *StatEntry) GetPathspec() *PathSpec {
	if m != nil {
		return m.Pathspec
	}
	return nil
}

func (m *StatEntry) GetStCrtime() uint64 {
	if m != nil {
		return m.StCrtime
	}
	return 0
}

func (m *StatEntry) GetExtAttrs() []*StatEntry_ExtAttr {
	if m != nil {
		return m.ExtAttrs
	}
	return nil
}

type StatEntry_ExtAttr struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatEntry_ExtAttr) Reset()         { *m = StatEntry_ExtAttr{} }
func (m *StatEntry_ExtAttr) String() string { return proto.CompactTextString(m) }
func (*StatEntry_ExtAttr) ProtoMessage()    {}
func (*StatEntry_ExtAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{3, 0}
}
func (m *StatEntry_ExtAttr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatEntry_ExtAttr.Unmarshal(m, b)
}
func (m *StatEntry_ExtAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatEntry_ExtAttr.Marshal(b, m, deterministic)
}
func (dst *StatEntry_ExtAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatEntry_ExtAttr.Merge(dst, src)
}
func (m *StatEntry_ExtAttr) XXX_Size() int {
	return xxx_messageInfo_StatEntry_ExtAttr.Size(m)
}
func (m *StatEntry_ExtAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_StatEntry_ExtAttr.DiscardUnknown(m)
}

var xxx_messageInfo_StatEntry_ExtAttr proto.InternalMessageInfo

func (m *StatEntry_ExtAttr) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatEntry_ExtAttr) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A message to encode a filesystem path (maybe for raw access)
// Next field: 15
type PathSpec struct {
	Pathtype   PathSpec_PathType `protobuf:"varint,1,opt,name=pathtype,proto3,enum=proto.PathSpec_PathType" json:"pathtype,omitempty"`
	Path       string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	MountPoint string            `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	StreamName string            `protobuf:"bytes,11,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	NestedPath *PathSpec         `protobuf:"bytes,5,opt,name=nested_path,json=nestedPath,proto3" json:"nested_path,omitempty"`
	// Offset for split images
	Offset         uint64           `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	PathOptions    PathSpec_Options `protobuf:"varint,7,opt,name=path_options,json=pathOptions,proto3,enum=proto.PathSpec_Options" json:"path_options,omitempty"`
	RecursionDepth uint64           `protobuf:"varint,12,opt,name=recursion_depth,json=recursionDepth,proto3" json:"recursion_depth,omitempty"`
	// On NTFS, the sleuthkit uses the inode, type and id to uniquely identify a
	// file - instead of the path.
	Inode                uint64                `protobuf:"varint,8,opt,name=inode,proto3" json:"inode,omitempty"`
	NtfsType             PathSpecTskFsAttrType `protobuf:"varint,9,opt,name=ntfs_type,json=ntfsType,proto3,enum=proto.PathSpecTskFsAttrType" json:"ntfs_type,omitempty"`
	NtfsId               uint64                `protobuf:"varint,10,opt,name=ntfs_id,json=ntfsId,proto3" json:"ntfs_id,omitempty"`
	FileSizeOverride     uint64                `protobuf:"varint,13,opt,name=file_size_override,json=fileSizeOverride,proto3" json:"file_size_override,omitempty"`
	IsVirtualroot        bool                  `protobuf:"varint,14,opt,name=is_virtualroot,json=isVirtualroot,proto3" json:"is_virtualroot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PathSpec) Reset()         { *m = PathSpec{} }
func (m *PathSpec) String() string { return proto.CompactTextString(m) }
func (*PathSpec) ProtoMessage()    {}
func (*PathSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{4}
}
func (m *PathSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathSpec.Unmarshal(m, b)
}
func (m *PathSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathSpec.Marshal(b, m, deterministic)
}
func (dst *PathSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathSpec.Merge(dst, src)
}
func (m *PathSpec) XXX_Size() int {
	return xxx_messageInfo_PathSpec.Size(m)
}
func (m *PathSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PathSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PathSpec proto.InternalMessageInfo

func (m *PathSpec) GetPathtype() PathSpec_PathType {
	if m != nil {
		return m.Pathtype
	}
	return PathSpec_OS
}

func (m *PathSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PathSpec) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *PathSpec) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

func (m *PathSpec) GetNestedPath() *PathSpec {
	if m != nil {
		return m.NestedPath
	}
	return nil
}

func (m *PathSpec) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PathSpec) GetPathOptions() PathSpec_Options {
	if m != nil {
		return m.PathOptions
	}
	return PathSpec_CASE_INSENSITIVE
}

func (m *PathSpec) GetRecursionDepth() uint64 {
	if m != nil {
		return m.RecursionDepth
	}
	return 0
}

func (m *PathSpec) GetInode() uint64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *PathSpec) GetNtfsType() PathSpecTskFsAttrType {
	if m != nil {
		return m.NtfsType
	}
	return PathSpec_TSK_FS_UNSET
}

func (m *PathSpec) GetNtfsId() uint64 {
	if m != nil {
		return m.NtfsId
	}
	return 0
}

func (m *PathSpec) GetFileSizeOverride() uint64 {
	if m != nil {
		return m.FileSizeOverride
	}
	return 0
}

func (m *PathSpec) GetIsVirtualroot() bool {
	if m != nil {
		return m.IsVirtualroot
	}
	return false
}

// Message to carry uname information.
type Uname struct {
	System               string   `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Release              string   `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Machine              string   `protobuf:"bytes,5,opt,name=machine,proto3" json:"machine,omitempty"`
	Kernel               string   `protobuf:"bytes,6,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Fqdn                 string   `protobuf:"bytes,7,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	InstallDate          uint64   `protobuf:"varint,8,opt,name=install_date,json=installDate,proto3" json:"install_date,omitempty"`
	LibcVer              string   `protobuf:"bytes,9,opt,name=libc_ver,json=libcVer,proto3" json:"libc_ver,omitempty"`
	Architecture         string   `protobuf:"bytes,10,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Pep425Tag            string   `protobuf:"bytes,11,opt,name=pep425tag,proto3" json:"pep425tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uname) Reset()         { *m = Uname{} }
func (m *Uname) String() string { return proto.CompactTextString(m) }
func (*Uname) ProtoMessage()    {}
func (*Uname) Descriptor() ([]byte, []int) {
	return fileDescriptor_actions_8e3703cb1fea44aa, []int{5}
}
func (m *Uname) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uname.Unmarshal(m, b)
}
func (m *Uname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uname.Marshal(b, m, deterministic)
}
func (dst *Uname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uname.Merge(dst, src)
}
func (m *Uname) XXX_Size() int {
	return xxx_messageInfo_Uname.Size(m)
}
func (m *Uname) XXX_DiscardUnknown() {
	xxx_messageInfo_Uname.DiscardUnknown(m)
}

var xxx_messageInfo_Uname proto.InternalMessageInfo

func (m *Uname) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *Uname) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Uname) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *Uname) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Uname) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *Uname) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *Uname) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Uname) GetInstallDate() uint64 {
	if m != nil {
		return m.InstallDate
	}
	return 0
}

func (m *Uname) GetLibcVer() string {
	if m != nil {
		return m.LibcVer
	}
	return ""
}

func (m *Uname) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *Uname) GetPep425Tag() string {
	if m != nil {
		return m.Pep425Tag
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientInformation)(nil), "proto.ClientInformation")
	proto.RegisterType((*ListDirRequest)(nil), "proto.ListDirRequest")
	proto.RegisterType((*StatFSRequest)(nil), "proto.StatFSRequest")
	proto.RegisterType((*StatEntry)(nil), "proto.StatEntry")
	proto.RegisterType((*StatEntry_ExtAttr)(nil), "proto.StatEntry.ExtAttr")
	proto.RegisterType((*PathSpec)(nil), "proto.PathSpec")
	proto.RegisterType((*Uname)(nil), "proto.Uname")
	proto.RegisterEnum("proto.StatEntry_RegistryType", StatEntry_RegistryType_name, StatEntry_RegistryType_value)
	proto.RegisterEnum("proto.PathSpec_PathType", PathSpec_PathType_name, PathSpec_PathType_value)
	proto.RegisterEnum("proto.PathSpec_Options", PathSpec_Options_name, PathSpec_Options_value)
	proto.RegisterEnum("proto.PathSpecTskFsAttrType", PathSpecTskFsAttrType_name, PathSpecTskFsAttrType_value)
}

func init() { proto.RegisterFile("actions.proto", fileDescriptor_actions_8e3703cb1fea44aa) }

var fileDescriptor_actions_8e3703cb1fea44aa = []byte{
	// 2514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0x4b, 0x6f, 0x23, 0xc7,
	0xb5, 0x76, 0xeb, 0xc1, 0x47, 0xe9, 0x31, 0x3d, 0xe5, 0xb1, 0x87, 0xd6, 0xbc, 0x6a, 0x74, 0x7d,
	0x61, 0xc9, 0xd6, 0xf4, 0xe8, 0x35, 0xf2, 0xdc, 0xc1, 0xb5, 0xaf, 0x49, 0xb1, 0x25, 0xb7, 0x45,
	0x91, 0xbc, 0xdd, 0x94, 0x3c, 0x63, 0x20, 0xe8, 0x29, 0x76, 0x17, 0xc5, 0xc2, 0x34, 0xab, 0x39,
	0x5d, 0x45, 0x49, 0x34, 0x0c, 0xd8, 0xde, 0x65, 0x99, 0x4d, 0x80, 0xec, 0x92, 0x3f, 0x90, 0x20,
	0x5b, 0xef, 0xb2, 0xf0, 0x2e, 0x08, 0x90, 0x3f, 0x10, 0x20, 0x48, 0xb6, 0x09, 0xe0, 0x1f, 0x90,
	0x00, 0x41, 0x9d, 0x6e, 0x4a, 0x9c, 0x01, 0x35, 0xab, 0xee, 0x3a, 0x8f, 0xef, 0x9c, 0x3a, 0x75,
	0xea, 0x9c, 0x53, 0x68, 0x81, 0x06, 0x8a, 0xc7, 0x42, 0x5a, 0xfd, 0x24, 0x56, 0x31, 0x9e, 0x85,
	0xcf, 0xd2, 0x93, 0xb3, 0xb3, 0x33, 0xeb, 0x94, 0x45, 0x71, 0xc0, 0x43, 0x76, 0x6e, 0x05, 0x71,
	0xef, 0xe1, 0x49, 0x1c, 0x51, 0x71, 0xf2, 0x30, 0x25, 0x26, 0xb4, 0xaf, 0xe2, 0xe4, 0x21, 0x08,
	0x3f, 0x94, 0xac, 0x47, 0x85, 0xe2, 0x41, 0x0a, 0xb1, 0xfc, 0x17, 0x03, 0x5d, 0xdf, 0x8d, 0x38,
	0x13, 0xca, 0x11, 0x9d, 0x38, 0xe9, 0x51, 0x8d, 0x8f, 0xef, 0xa1, 0xb9, 0x00, 0x88, 0xbe, 0xa0,
	0x3d, 0x56, 0x32, 0x88, 0xb1, 0x52, 0x74, 0x51, 0x4a, 0xaa, 0xd3, 0x1e, 0xc3, 0xff, 0x8d, 0x16,
	0x33, 0x81, 0x53, 0x96, 0x48, 0x1e, 0x8b, 0xd2, 0x14, 0x31, 0x56, 0x16, 0xdc, 0x85, 0x94, 0x7a,
	0x9c, 0x12, 0xf1, 0x12, 0x2a, 0x24, 0xec, 0x94, 0x83, 0xc0, 0x34, 0x31, 0x56, 0x66, 0xdc, 0x8b,
	0x35, 0xbe, 0x83, 0x50, 0x7b, 0xc0, 0xa3, 0xd0, 0x57, 0xbc, 0xc7, 0x4a, 0x33, 0x60, 0xa2, 0x08,
	0x94, 0x16, 0xef, 0x31, 0xfc, 0x00, 0xe1, 0xcc, 0x42, 0xc8, 0x64, 0x90, 0xf0, 0xbe, 0x76, 0xac,
	0x34, 0x0b, 0x62, 0xd7, 0x53, 0x4e, 0xf5, 0x92, 0x81, 0xdf, 0x45, 0xb9, 0x88, 0xb6, 0x59, 0x24,
	0x4b, 0x39, 0x32, 0xbd, 0x52, 0x74, 0xb3, 0xd5, 0xf2, 0x27, 0x68, 0xb1, 0xc6, 0xa5, 0xaa, 0xf2,
	0xc4, 0x65, 0x2f, 0x07, 0x4c, 0x2a, 0xfc, 0x11, 0x2a, 0xf4, 0xa9, 0xea, 0xca, 0x3e, 0x0b, 0x60,
	0x63, 0x73, 0x9b, 0xd7, 0xd2, 0x58, 0x58, 0x4d, 0xaa, 0xba, 0x5e, 0x9f, 0x05, 0xee, 0x85, 0xc0,
	0xf2, 0xef, 0x0c, 0xb4, 0xe0, 0x29, 0xaa, 0xf6, 0xbc, 0x91, 0xfa, 0xa7, 0xa8, 0xa8, 0xb9, 0x7e,
	0xc4, 0xa5, 0x2a, 0x19, 0xda, 0x56, 0xe5, 0xfe, 0xdf, 0xfe, 0xf5, 0xf7, 0x1f, 0x8d, 0x5b, 0xf8,
	0x3d, 0x6d, 0x89, 0xc4, 0x1d, 0x02, 0xea, 0xa4, 0x13, 0x27, 0x44, 0x2a, 0xaa, 0x3a, 0xd2, 0x4a,
	0x11, 0x35, 0x1b, 0xff, 0x2c, 0x35, 0xaf, 0x86, 0x7d, 0x06, 0x31, 0x5b, 0xdc, 0x2c, 0xbd, 0x66,
	0x1e, 0x7e, 0x5a, 0xc3, 0x3e, 0xab, 0x7c, 0x00, 0xc0, 0xf7, 0xf1, 0x3d, 0xbd, 0x1a, 0x01, 0x13,
	0x15, 0x93, 0x80, 0x46, 0x51, 0x86, 0x4d, 0x62, 0x91, 0xc1, 0x6b, 0xc8, 0xe5, 0x7f, 0xce, 0xa1,
	0xa2, 0x76, 0xd8, 0x16, 0x2a, 0x19, 0xe2, 0x7d, 0x94, 0x97, 0xca, 0xef, 0xc5, 0x61, 0x6a, 0x6b,
	0xa6, 0x62, 0x01, 0xe2, 0x0a, 0x2a, 0x68, 0x99, 0xc3, 0x38, 0x64, 0xf8, 0x76, 0x99, 0x0c, 0x04,
	0x3f, 0x27, 0x1d, 0x1e, 0x31, 0xd2, 0x67, 0x49, 0x8f, 0x4b, 0x7d, 0x3c, 0x44, 0x2b, 0x59, 0x6e,
	0x4e, 0xa6, 0x52, 0xef, 0xa0, 0x9c, 0x54, 0x3e, 0x17, 0x31, 0x1c, 0xe3, 0x82, 0x3b, 0x2b, 0x95,
	0x23, 0xe2, 0x8c, 0x1c, 0xb2, 0x53, 0x38, 0x3f, 0x20, 0x57, 0xd9, 0x29, 0x7e, 0x0f, 0x15, 0xa4,
	0xf2, 0x45, 0xc4, 0xc5, 0x0b, 0x38, 0xb1, 0x05, 0x37, 0x2f, 0x55, 0x5d, 0x2f, 0x33, 0x8d, 0x01,
	0x0f, 0x4b, 0xb9, 0x91, 0xc6, 0x11, 0x0f, 0x33, 0xf2, 0x09, 0x0f, 0x4b, 0xf9, 0x11, 0x79, 0x9f,
	0x87, 0xf8, 0x26, 0xf8, 0x2f, 0xf9, 0xd7, 0xac, 0x54, 0x80, 0xf4, 0xc9, 0x49, 0xe5, 0xf1, 0xaf,
	0x19, 0xfe, 0x1c, 0x2c, 0x50, 0x48, 0x9d, 0x22, 0xec, 0xec, 0x01, 0xec, 0xec, 0x03, 0x84, 0xdd,
	0xea, 0x5e, 0x95, 0x2a, 0xa6, 0x59, 0x1e, 0x0b, 0x62, 0x11, 0x4a, 0x7c, 0xbd, 0x46, 0xa5, 0x22,
	0x34, 0x08, 0x98, 0x94, 0x44, 0x33, 0x2c, 0xed, 0x50, 0x59, 0xff, 0xe1, 0x2f, 0x00, 0xa9, 0x07,
	0x48, 0x08, 0x90, 0x1e, 0x02, 0xd2, 0xea, 0x44, 0xa4, 0xb7, 0x01, 0xa9, 0x17, 0x87, 0xbc, 0xc3,
	0x59, 0x78, 0x89, 0x75, 0x08, 0x58, 0x75, 0xc0, 0x0a, 0x00, 0x6b, 0x0e, 0xb0, 0xb6, 0x00, 0xeb,
	0xc1, 0x44, 0xac, 0x9b, 0x80, 0xc5, 0x45, 0x1c, 0x32, 0x12, 0x74, 0xa9, 0x38, 0x61, 0x97, 0x78,
	0xbb, 0x80, 0x77, 0x0b, 0x15, 0xa5, 0xf2, 0xdb, 0x51, 0x1c, 0xbc, 0x90, 0xa5, 0x79, 0x08, 0x4c,
	0x41, 0xaa, 0x0a, 0xac, 0xf5, 0xfd, 0x01, 0xe6, 0x0b, 0x08, 0xcf, 0x02, 0x70, 0x8b, 0x9a, 0x0b,
	0x84, 0x2c, 0x74, 0x89, 0x3e, 0x9b, 0x45, 0xe0, 0xe5, 0xa4, 0x72, 0x43, 0x76, 0x8a, 0x05, 0x9a,
	0x97, 0xca, 0xef, 0x44, 0xf4, 0x44, 0xfa, 0xb1, 0x3c, 0x2f, 0xbd, 0xa3, 0xb9, 0x95, 0x1a, 0x38,
	0xba, 0x87, 0xae, 0x41, 0xf2, 0x9c, 0xab, 0x3d, 0xcd, 0x6f, 0xc8, 0x73, 0xbc, 0xc5, 0xce, 0x15,
	0x13, 0x21, 0x0b, 0xd3, 0x0c, 0xa1, 0x4a, 0x25, 0xbc, 0x3d, 0x50, 0x2c, 0xcd, 0xef, 0x43, 0x1a,
	0x90, 0x15, 0xc9, 0x14, 0x69, 0x0f, 0xc9, 0xf3, 0xa0, 0x0b, 0xa8, 0xcf, 0x57, 0x5d, 0x24, 0x2f,
	0x01, 0x5e, 0xa2, 0xc5, 0x0b, 0x7b, 0x11, 0x17, 0x83, 0xf3, 0xd2, 0xbb, 0x60, 0xf1, 0x00, 0x2c,
	0xda, 0xe8, 0xfa, 0xb8, 0xc5, 0x9a, 0x16, 0xc0, 0xeb, 0x57, 0xda, 0xa4, 0x92, 0x24, 0xac, 0x1f,
	0x27, 0x8a, 0x85, 0x60, 0x32, 0x92, 0x9a, 0xf9, 0xdc, 0x9d, 0x97, 0xe3, 0xfa, 0x25, 0x94, 0x97,
	0xc3, 0x1e, 0xa4, 0xdf, 0x35, 0x28, 0x18, 0xa3, 0x25, 0xfe, 0x93, 0x81, 0x16, 0x12, 0x76, 0xc2,
	0xa5, 0x4a, 0x86, 0x3e, 0xdc, 0x41, 0x13, 0xee, 0xe0, 0x9d, 0xec, 0x0e, 0x5e, 0x5c, 0x1d, 0xcb,
	0xcd, 0xa4, 0xe0, 0x22, 0xfe, 0xdc, 0x00, 0x67, 0xbf, 0x37, 0xf0, 0xb7, 0x4e, 0x87, 0xa8, 0x2e,
	0x97, 0x84, 0x4b, 0x42, 0xe1, 0x0a, 0xea, 0x7b, 0x49, 0xc9, 0x08, 0x94, 0x9c, 0xd2, 0x68, 0xc0,
	0xd6, 0x52, 0x99, 0x0e, 0x67, 0x51, 0x48, 0x82, 0x58, 0x28, 0xca, 0x85, 0x24, 0xaa, 0xcb, 0x88,
	0xca, 0x6e, 0x32, 0xf0, 0x41, 0xd6, 0x22, 0xad, 0x2e, 0x03, 0x21, 0x26, 0x14, 0x39, 0xe3, 0x51,
	0x44, 0x68, 0x24, 0x63, 0xd2, 0x66, 0x84, 0x89, 0x20, 0xd6, 0x51, 0xe0, 0x82, 0x24, 0x4c, 0xf2,
	0x90, 0x29, 0xcb, 0x9d, 0x4f, 0xc6, 0x1c, 0x4b, 0x0b, 0xac, 0xe6, 0x08, 0x55, 0xba, 0x4e, 0x8c,
	0x95, 0x79, 0xf7, 0x62, 0x8d, 0x4f, 0xc6, 0x0a, 0x1d, 0x9e, 0x58, 0xe8, 0x2a, 0x4f, 0x60, 0x5b,
	0xdb, 0x78, 0x53, 0xbb, 0x00, 0xc5, 0x45, 0x4b, 0xf3, 0x0e, 0x0f, 0xa0, 0x0f, 0xe8, 0x52, 0x93,
	0x6d, 0x24, 0x62, 0x44, 0xaf, 0xb5, 0xa7, 0x50, 0x7b, 0xad, 0xcb, 0x22, 0x89, 0xf7, 0x21, 0x4d,
	0x83, 0x04, 0xf2, 0xfe, 0x06, 0xe4, 0xfd, 0x87, 0x00, 0xfc, 0xfe, 0xc4, 0xbc, 0x5f, 0xdc, 0x4d,
	0x58, 0x06, 0x0f, 0xe9, 0x5e, 0x90, 0x6a, 0x17, 0x74, 0xf1, 0x23, 0x54, 0x64, 0xe7, 0xfa, 0x5a,
	0xab, 0x44, 0x96, 0x6e, 0x92, 0xe9, 0x95, 0xb9, 0x8b, 0xe2, 0x78, 0x79, 0x30, 0xf6, 0xb9, 0x2a,
	0x2b, 0x95, 0xb8, 0x05, 0x96, 0xfe, 0xc8, 0xa5, 0x2d, 0x94, 0xcf, 0x88, 0x18, 0xa3, 0x99, 0xb1,
	0x8e, 0x05, 0xff, 0xf8, 0x06, 0x9a, 0x85, 0x40, 0x43, 0x09, 0x2c, 0xba, 0xe9, 0x62, 0xf9, 0x47,
	0x03, 0xcd, 0x8f, 0x9f, 0x31, 0x9e, 0x47, 0x05, 0xd7, 0xde, 0xf7, 0xeb, 0x8d, 0xba, 0x6d, 0xbe,
	0x85, 0x11, 0xca, 0xe9, 0x95, 0xf7, 0x95, 0x69, 0xe0, 0xeb, 0x68, 0x41, 0xff, 0xdb, 0x4f, 0x9b,
	0xe5, 0x7a, 0x55, 0x93, 0xa6, 0xf0, 0x22, 0x42, 0x9a, 0x54, 0x71, 0xea, 0x65, 0xf7, 0x99, 0x39,
	0x8d, 0x17, 0x50, 0x51, 0xaf, 0xab, 0x5f, 0x36, 0xdc, 0xaa, 0x39, 0x83, 0x6f, 0xa1, 0x9b, 0x17,
	0x4b, 0xbf, 0xe6, 0xb4, 0x5a, 0x35, 0xdb, 0xb7, 0xeb, 0x55, 0xa7, 0x5c, 0x37, 0x67, 0x70, 0x09,
	0xdd, 0xb8, 0x64, 0x56, 0x9c, 0xfd, 0x11, 0x67, 0x76, 0xe4, 0x42, 0xcd, 0xa9, 0x1f, 0x98, 0x39,
	0x6c, 0xa2, 0x79, 0xbd, 0x3a, 0x3c, 0xaa, 0xb5, 0x1c, 0x6d, 0x35, 0x3f, 0xb2, 0xf2, 0xff, 0x60,
	0x65, 0x6e, 0x69, 0xca, 0x34, 0x96, 0xff, 0xbd, 0x80, 0x0a, 0xa3, 0xe3, 0xc4, 0xdb, 0x63, 0xbd,
	0xc5, 0x78, 0x73, 0x6f, 0xb9, 0x6c, 0x19, 0x3a, 0x66, 0xfa, 0x3f, 0x0b, 0x0f, 0xfc, 0xe3, 0x0f,
	0xd1, 0x5c, 0x2f, 0x1e, 0x08, 0xe5, 0xf7, 0x63, 0x2e, 0x14, 0x14, 0xfd, 0x62, 0xa5, 0x08, 0x87,
	0x3a, 0xbd, 0x64, 0x18, 0x2e, 0x02, 0x6e, 0x53, 0x33, 0x31, 0x45, 0x73, 0x52, 0x25, 0x8c, 0xf6,
	0xd2, 0x61, 0x61, 0x0e, 0x64, 0x3f, 0x03, 0xd9, 0x27, 0xf8, 0x51, 0x99, 0x68, 0x2a, 0x14, 0x0b,
	0x9d, 0x3d, 0x21, 0x55, 0xfa, 0xda, 0x68, 0x71, 0x8b, 0xec, 0xc5, 0x09, 0x61, 0xe7, 0xb4, 0xd7,
	0x8f, 0xd8, 0x1a, 0xa1, 0x82, 0x94, 0xab, 0x1e, 0x48, 0x5b, 0x60, 0x22, 0x95, 0x82, 0x71, 0x63,
	0x1d, 0xcd, 0x09, 0x26, 0x15, 0x0b, 0x7d, 0xf0, 0x74, 0x76, 0x72, 0xdb, 0x46, 0xa9, 0x8c, 0x5e,
	0xe3, 0xfb, 0x28, 0x17, 0x77, 0x3a, 0x92, 0x29, 0xe8, 0x33, 0x33, 0xe3, 0xbe, 0x67, 0x0c, 0x6c,
	0xa3, 0x79, 0xe8, 0xe4, 0x31, 0x4c, 0x10, 0x12, 0x3a, 0xcf, 0xe2, 0xe6, 0xcd, 0xd7, 0x23, 0xd6,
	0x48, 0xd9, 0xe3, 0x08, 0x73, 0x5a, 0x2f, 0xa3, 0xe3, 0x13, 0x74, 0x2d, 0x61, 0xc1, 0x00, 0x06,
	0x1e, 0x3f, 0x64, 0x7d, 0xd5, 0x85, 0x52, 0x3d, 0x53, 0xf9, 0x14, 0x14, 0x1e, 0xe3, 0x2d, 0x77,
	0xc4, 0x26, 0xc0, 0x26, 0x67, 0x5d, 0x26, 0x88, 0x6b, 0xef, 0x1e, 0xb9, 0x9e, 0x73, 0x6c, 0x93,
	0xd4, 0xbe, 0x2e, 0x28, 0xd9, 0xe5, 0x63, 0xa1, 0xb5, 0x64, 0x4c, 0xb9, 0x8b, 0x17, 0xb0, 0x55,
	0xad, 0x86, 0xef, 0xa1, 0x59, 0x68, 0x16, 0x69, 0x2b, 0x1c, 0xf7, 0x27, 0xa5, 0xe3, 0xcf, 0x51,
	0x51, 0xa8, 0x8e, 0x4c, 0xeb, 0x5a, 0x11, 0x76, 0x43, 0x5e, 0xdf, 0x8d, 0x92, 0x2f, 0xfc, 0x8e,
	0x84, 0x2b, 0x06, 0x72, 0xe3, 0x30, 0x05, 0xad, 0x0d, 0x77, 0x61, 0x19, 0xe5, 0x01, 0x89, 0x87,
	0x59, 0x4f, 0x1c, 0x0f, 0x9f, 0xe6, 0x38, 0x21, 0xfe, 0xad, 0x81, 0xb0, 0xae, 0x0b, 0xd0, 0x9e,
	0xfd, 0xf8, 0x94, 0x25, 0x09, 0x0f, 0xd3, 0x46, 0x34, 0x53, 0xf9, 0x16, 0xe4, 0x87, 0xa8, 0x50,
	0x19, 0x2a, 0x06, 0x1d, 0xbb, 0xa7, 0x0f, 0x5b, 0xcb, 0x4b, 0x72, 0xd6, 0xe5, 0x41, 0x97, 0xd0,
	0x84, 0x11, 0x11, 0x0b, 0x22, 0x19, 0x7b, 0x41, 0xdb, 0x11, 0x23, 0x9d, 0x24, 0xee, 0xe9, 0x1c,
	0xe1, 0x09, 0x61, 0x22, 0x24, 0x2b, 0xcc, 0x3a, 0xb1, 0x88, 0x9e, 0x5a, 0x83, 0x54, 0x6f, 0x75,
	0xed, 0xa2, 0xf2, 0xea, 0x4c, 0xea, 0x71, 0xc1, 0x7b, 0x83, 0x1e, 0xa1, 0x90, 0x8a, 0xba, 0xa6,
	0xb6, 0x87, 0xba, 0x45, 0x24, 0x8c, 0x86, 0x96, 0x6b, 0x6a, 0x15, 0x6d, 0xb8, 0x91, 0x39, 0x86,
	0x23, 0xb4, 0xc8, 0xa5, 0x7f, 0xca, 0x13, 0x35, 0xa0, 0x51, 0x12, 0xc7, 0x0a, 0xfa, 0x62, 0xa1,
	0x62, 0x83, 0xab, 0xff, 0x87, 0x3f, 0x71, 0x44, 0xa8, 0xeb, 0x1e, 0xd3, 0xf0, 0x54, 0xa5, 0xb6,
	0x46, 0x35, 0x8e, 0xd0, 0x48, 0xe3, 0x0e, 0x2f, 0x8b, 0x39, 0x25, 0x19, 0x14, 0xd1, 0x58, 0x96,
	0xbb, 0xc0, 0xe5, 0xf1, 0x25, 0xf6, 0xb2, 0x9b, 0x5e, 0x4b, 0x88, 0x66, 0x0e, 0x4d, 0x35, 0x3c,
	0xf3, 0x2d, 0x9c, 0x47, 0xd3, 0x2d, 0xef, 0xc0, 0x34, 0xb2, 0x7b, 0xee, 0x78, 0x2d, 0xf7, 0x99,
	0x39, 0x85, 0x31, 0xca, 0x1d, 0xda, 0x87, 0x0d, 0x5d, 0x47, 0x96, 0x72, 0x3f, 0xfd, 0xf0, 0xc7,
	0x1f, 0x8c, 0x29, 0xfc, 0x36, 0xca, 0xb7, 0x0e, 0x9b, 0x7b, 0x4e, 0xcd, 0x36, 0x67, 0x46, 0xc4,
	0xe5, 0x03, 0x94, 0x1f, 0x25, 0xdd, 0x0d, 0x64, 0xee, 0x96, 0x3d, 0xdb, 0x77, 0xea, 0x9e, 0x5d,
	0xf7, 0x9c, 0x96, 0x73, 0xac, 0x8b, 0x96, 0x89, 0xe6, 0x81, 0x5a, 0x73, 0x5a, 0xb6, 0x5b, 0xae,
	0x99, 0x06, 0x2e, 0xa2, 0x59, 0xd7, 0xde, 0xb7, 0x9f, 0x9a, 0x53, 0x69, 0xf1, 0xc8, 0x72, 0xce,
	0x9c, 0x5e, 0xfe, 0x71, 0x16, 0x99, 0xaf, 0x27, 0x83, 0x06, 0x68, 0x79, 0x07, 0xfe, 0x9e, 0xe7,
	0x1f, 0xd5, 0x3d, 0xbb, 0x65, 0xbe, 0x85, 0x6f, 0xa3, 0x52, 0x46, 0x29, 0xb7, 0x5a, 0xae, 0xdf,
	0x7a, 0xd6, 0xb4, 0xfd, 0xaa, 0xbd, 0x57, 0x3e, 0xaa, 0xb5, 0x4c, 0x63, 0x22, 0xb7, 0xde, 0xda,
	0xf3, 0x7c, 0xcf, 0x31, 0x4d, 0xbc, 0x8c, 0xee, 0x4e, 0xe6, 0xea, 0x65, 0xcd, 0xf1, 0x5a, 0x26,
	0xc1, 0xf7, 0xd0, 0xad, 0xc9, 0x32, 0x7b, 0xf5, 0xf2, 0xa1, 0x6d, 0xae, 0xe3, 0xbb, 0x68, 0x69,
	0xb2, 0xc0, 0xf1, 0xb1, 0xed, 0x9a, 0x9f, 0x5d, 0x0d, 0xd0, 0xa8, 0x7c, 0xe1, 0x54, 0xcd, 0xcf,
	0xf0, 0x1d, 0xf4, 0xde, 0x15, 0x3e, 0xda, 0xbb, 0x66, 0xf3, 0x6a, 0xfd, 0x63, 0x70, 0xe0, 0xf9,
	0x1b, 0x04, 0x9c, 0xfa, 0x5e, 0xc3, 0xec, 0xe3, 0x7b, 0x57, 0x79, 0x58, 0x2d, 0xb7, 0xca, 0xe6,
	0x77, 0x06, 0x5e, 0x46, 0x77, 0x26, 0x0b, 0x38, 0xd5, 0xa7, 0x6e, 0xa3, 0xd1, 0x32, 0x7f, 0x61,
	0xe0, 0xff, 0xba, 0x2a, 0x56, 0x4e, 0xf5, 0x69, 0xb9, 0x56, 0x6b, 0xec, 0x9a, 0xbf, 0x31, 0xf0,
	0x7d, 0x74, 0x7b, 0xb2, 0x50, 0xc5, 0x69, 0x1d, 0x96, 0x9b, 0xe6, 0xef, 0xdf, 0x20, 0xe2, 0x3d,
	0x3b, 0xac, 0xd5, 0x0f, 0xcc, 0x3f, 0xbc, 0xc1, 0x1d, 0xd7, 0x6e, 0x96, 0x5d, 0xcf, 0xd6, 0x32,
	0x57, 0xc2, 0xd8, 0x65, 0xd8, 0xf5, 0x9f, 0x0d, 0x7c, 0xe7, 0xaa, 0xb3, 0xb7, 0xcb, 0xe6, 0x5f,
	0x8d, 0xab, 0xa3, 0xd2, 0x74, 0x1b, 0x4d, 0xf3, 0x27, 0x03, 0xdf, 0xbd, 0xea, 0x5c, 0x6a, 0x8d,
	0x7d, 0xf3, 0xbb, 0x29, 0x4c, 0x26, 0xc4, 0xfd, 0xa8, 0xee, 0x3c, 0xf5, 0x9d, 0x7a, 0xd5, 0x71,
	0xcd, 0xef, 0x09, 0xf4, 0xbf, 0x7f, 0xe4, 0xd1, 0xec, 0x11, 0xb4, 0xf9, 0x03, 0x94, 0x93, 0x43,
	0xa9, 0x58, 0x2f, 0x6d, 0xfe, 0xa3, 0xd1, 0x1b, 0x7f, 0xa4, 0x67, 0x9b, 0x94, 0x43, 0xfa, 0x11,
	0x55, 0xfa, 0x95, 0x4b, 0x56, 0xbe, 0xe4, 0x22, 0x8c, 0xcf, 0xe4, 0x37, 0x55, 0x9a, 0x9c, 0x71,
	0xf1, 0x0d, 0xcc, 0x8d, 0xab, 0xfa, 0xbd, 0x03, 0x82, 0xf8, 0x31, 0x9a, 0x11, 0xa3, 0x57, 0x53,
	0xb1, 0xf2, 0x3e, 0x40, 0xdd, 0xc5, 0xb7, 0x35, 0x54, 0x37, 0x96, 0x0a, 0x5a, 0xda, 0x68, 0x8a,
	0x4b, 0x55, 0x2c, 0x17, 0x34, 0x70, 0x13, 0xe5, 0x13, 0x16, 0x31, 0x2a, 0x59, 0xd6, 0x35, 0x77,
	0x40, 0x79, 0x1d, 0x5b, 0x5a, 0xb9, 0xe1, 0x91, 0x8c, 0x4b, 0x60, 0x48, 0xd3, 0xd5, 0x3e, 0x21,
	0x50, 0xe9, 0x3e, 0x5e, 0x23, 0x0d, 0xef, 0xe9, 0x1a, 0x09, 0x59, 0x9b, 0x53, 0x61, 0xb9, 0x23,
	0x18, 0xdc, 0x42, 0xf9, 0xd1, 0x23, 0x1b, 0x5e, 0xc9, 0xaf, 0x4e, 0x6d, 0x0d, 0x8f, 0x64, 0x5c,
	0xe2, 0x54, 0x53, 0xa4, 0x1d, 0x6b, 0xc3, 0xfa, 0x78, 0x67, 0x7d, 0xc3, 0x6b, 0x6e, 0xac, 0x91,
	0x8d, 0x75, 0xeb, 0x7f, 0xac, 0xcd, 0x35, 0xb2, 0xb1, 0x6d, 0xad, 0x6f, 0x5b, 0xee, 0x08, 0x0a,
	0x1f, 0xa2, 0x7c, 0x8f, 0x06, 0x5d, 0x2e, 0x58, 0xfa, 0xa8, 0x9e, 0x18, 0x2f, 0x9a, 0x04, 0x5d,
	0xae, 0x58, 0xa0, 0x06, 0x09, 0x4b, 0xb1, 0xcb, 0x87, 0xd5, 0x9d, 0xed, 0x35, 0x72, 0xfe, 0x78,
	0xc7, 0xdf, 0xd1, 0x70, 0x19, 0x06, 0xfe, 0x0a, 0xe5, 0x5e, 0xb0, 0x44, 0xb0, 0x08, 0xfa, 0x6d,
	0xb1, 0x52, 0x01, 0xb4, 0xff, 0xc5, 0x4f, 0x34, 0x5a, 0xca, 0xb9, 0xf0, 0x53, 0xaa, 0x84, 0x8b,
	0x93, 0x57, 0x7d, 0x5d, 0x23, 0x1b, 0x5b, 0xd6, 0x86, 0xb5, 0xbe, 0x46, 0xb6, 0xac, 0x8d, 0x47,
	0x0f, 0x92, 0x60, 0xd3, 0x72, 0x33, 0x44, 0x6c, 0xa3, 0x99, 0xce, 0xcb, 0x50, 0x40, 0x83, 0x2e,
	0x56, 0x36, 0x00, 0xf9, 0x23, 0xbc, 0x7a, 0xe9, 0xe7, 0x07, 0x92, 0x74, 0x06, 0x51, 0x34, 0x24,
	0x2f, 0x07, 0x34, 0x4a, 0x5f, 0x66, 0x61, 0xdc, 0xa3, 0x5c, 0xa4, 0xd3, 0x84, 0x0b, 0xea, 0xd8,
	0x45, 0xf3, 0x5c, 0x48, 0x45, 0xa3, 0xc8, 0x0f, 0xa9, 0x1a, 0xb5, 0xd1, 0xd1, 0x6b, 0x6f, 0x6e,
	0x6c, 0x52, 0xc5, 0x4b, 0x5f, 0xea, 0x16, 0x9d, 0x05, 0xe1, 0x8c, 0x4a, 0x92, 0x29, 0xb2, 0xd0,
	0x72, 0xe7, 0xb2, 0x7f, 0x2d, 0x8c, 0x1f, 0xa3, 0x42, 0xc4, 0xdb, 0x81, 0x7f, 0xca, 0x12, 0xe8,
	0xb8, 0xc5, 0xca, 0x1d, 0xc0, 0xbb, 0x89, 0xdf, 0xd1, 0xee, 0xed, 0x92, 0x88, 0xb7, 0x13, 0xaa,
	0x9f, 0x05, 0xe9, 0xde, 0xdd, 0xbc, 0x16, 0x3f, 0x66, 0x09, 0xd6, 0xf3, 0xe7, 0x78, 0x78, 0xa1,
	0xd1, 0x16, 0x2b, 0xbf, 0x4e, 0x5f, 0x1a, 0xbf, 0x32, 0xf0, 0x2f, 0x0d, 0x8d, 0xf0, 0xca, 0x09,
	0x8c, 0x32, 0xae, 0xcd, 0x05, 0x4d, 0x86, 0x16, 0x59, 0xa9, 0xc7, 0x8a, 0xa5, 0xa4, 0x80, 0x0a,
	0xfd, 0x62, 0x08, 0x79, 0xa7, 0xc3, 0x12, 0xfd, 0x90, 0x18, 0x75, 0x53, 0x92, 0x9d, 0xd0, 0xab,
	0x48, 0x3c, 0x9b, 0xe5, 0x75, 0x22, 0xc2, 0xfb, 0x65, 0x6b, 0x93, 0xb4, 0xb9, 0xca, 0x90, 0x49,
	0x32, 0x10, 0x42, 0x1f, 0x51, 0x2c, 0x08, 0x25, 0x3b, 0xdb, 0xc0, 0x4a, 0xa3, 0xb1, 0xea, 0xbe,
	0xe2, 0x35, 0xee, 0xa1, 0x62, 0x9f, 0xf5, 0xb7, 0x37, 0x1f, 0x29, 0x7a, 0x92, 0x8d, 0x7e, 0x0d,
	0xd8, 0x81, 0x83, 0xf7, 0xb5, 0xff, 0x03, 0xc1, 0x5f, 0x0e, 0x18, 0x91, 0xfc, 0x44, 0xd0, 0x57,
	0xf6, 0xd0, 0x1f, 0xaa, 0x6e, 0x7c, 0x11, 0xe3, 0x15, 0x2a, 0x49, 0xc8, 0x3a, 0x5c, 0xa4, 0xef,
	0xba, 0xa6, 0xdd, 0xdc, 0xde, 0x7c, 0x44, 0x14, 0x3d, 0x91, 0xab, 0x96, 0x7b, 0x69, 0xa1, 0x9d,
	0x83, 0x71, 0x66, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x88, 0x96, 0x9f, 0xd4, 0x09, 0x13,
	0x00, 0x00,
}
